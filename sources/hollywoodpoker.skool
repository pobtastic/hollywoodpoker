@rom
@org=$4000

; Loading Screen
;
; #UDGTABLE
; { =h Hollywood Poker Loading Screen. }
; { #SCR$02(loading) }
; UDGTABLE#
@label=Loading
b$4000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF ; {Pixels.
 $4020 DEFB $00,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4040 DEFB $00,$FF,$FF,$EA,$80,$14,$17,$FF,$00,$00,$00,$00,$3F,$3F,$3F,$3F,$3F,$C0,$3F,$C0,$0F,$E0,$3E,$DF,$3F,$3F,$3F,$3F,$3C,$FE,$00,$00 ;
 $4060 DEFB $00,$FF,$FE,$AC,$00,$01,$42,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4080 DEFB $00,$F0,$00,$C5,$00,$00,$51,$3F,$FB,$FF,$FF,$FF,$00,$00,$00,$3F,$FE,$3F,$3F,$3F,$F0,$3F,$00,$3F,$FC,$00,$00,$00,$00,$00,$00,$00 ;
 $40A0 DEFB $00,$FF,$FE,$55,$54,$33,$52,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $40C0 DEFB $00,$FF,$FB,$30,$30,$05,$57,$FF,$F9,$87,$F7,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $40E0 DEFB $00,$FF,$E9,$D4,$57,$EF,$FF,$FD,$D3,$55,$5F,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4100 DEFB $60,$3E,$3E,$66,$00,$3E,$63,$00,$3E,$60,$60,$00,$63,$C3,$00,$60,$3E,$3E,$7C,$3F,$63,$3E,$00,$3E,$3E,$7E,$7F,$7F,$63,$3E,$FF,$FF ;
 $4120 DEFB $00,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4140 DEFB $00,$FF,$FF,$D0,$20,$0A,$0B,$FF,$00,$00,$00,$00,$3F,$3F,$3F,$3F,$3F,$C0,$3F,$C0,$07,$E0,$3E,$DF,$3F,$3F,$3F,$3F,$3C,$FE,$00,$00 ;
 $4160 DEFB $00,$FF,$FE,$82,$00,$02,$81,$7F,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4180 DEFB $00,$EF,$FF,$F4,$80,$00,$A1,$40,$07,$FF,$FF,$FF,$00,$00,$00,$3F,$F8,$3F,$3F,$3F,$F8,$3F,$00,$3F,$F8,$00,$00,$00,$00,$00,$00,$00 ;
 $41A0 DEFB $00,$FF,$FE,$CA,$A8,$7F,$AA,$FF,$FF,$FF,$FF,$FF,$63,$7F,$60,$60,$3E,$00,$3E,$3E,$3E,$3F,$63,$00,$3F,$FF,$3E,$00,$63,$7F,$00,$00 ;
 $41C0 DEFB $00,$FF,$FA,$0C,$0C,$02,$AF,$FF,$F6,$FC,$F7,$FF,$63,$3E,$63,$7F,$00,$C3,$3E,$63,$00,$3E,$7F,$7F,$63,$00,$FF,$63,$7F,$00,$00,$00 ;
 $41E0 DEFB $00,$FF,$D2,$3A,$AB,$D3,$FF,$FB,$74,$BF,$BF,$FF,$7C,$7F,$63,$3F,$3E,$63,$FF,$3E,$00,$60,$3E,$3E,$7C,$3F,$63,$3E,$00,$7E,$3F,$3E ;
 $4200 DEFB $60,$63,$63,$6C,$00,$63,$73,$00,$63,$60,$60,$00,$77,$66,$00,$60,$63,$63,$66,$0C,$73,$63,$00,$60,$63,$63,$60,$60,$73,$60,$FF,$FF ;
 $4220 DEFB $00,$FF,$FF,$FF,$E0,$07,$00,$00,$00,$00,$00,$00,$3F,$3F,$07,$F8,$3F,$C0,$3F,$C1,$FC,$07,$3E,$1F,$07,$FC,$0F,$FC,$3F,$E0,$00,$00 ;
 $4240 DEFB $00,$FF,$FF,$AA,$C0,$05,$05,$FF,$00,$00,$00,$00,$3F,$3F,$3F,$3F,$3F,$C0,$3F,$C0,$03,$E0,$3F,$FF,$3F,$3F,$3F,$3F,$3C,$FC,$00,$00 ;
 $4260 DEFB $00,$FF,$FE,$F4,$00,$01,$5F,$7F,$FF,$FF,$00,$00,$00,$00,$00,$3F,$F8,$07,$F0,$3E,$3E,$3F,$FF,$3F,$F8,$00,$00,$00,$00,$00,$00,$00 ;
 $4280 DEFB $00,$F0,$00,$F5,$00,$00,$51,$5F,$FF,$FF,$FF,$FF,$00,$00,$00,$3E,$00,$3F,$3F,$3E,$FC,$3F,$00,$3E,$7C,$00,$00,$00,$00,$00,$00,$00 ;
 $42A0 DEFB $00,$FF,$FE,$FD,$55,$FF,$DE,$FF,$FF,$FF,$FF,$FF,$63,$60,$60,$60,$63,$00,$63,$63,$63,$0C,$73,$00,$0C,$18,$60,$00,$77,$60,$00,$00 ;
 $42C0 DEFB $00,$FF,$FB,$43,$57,$95,$5F,$FF,$EB,$B8,$97,$FF,$63,$63,$63,$60,$00,$66,$63,$63,$00,$60,$60,$60,$73,$00,$18,$63,$60,$00,$00,$00 ;
 $42E0 DEFB $00,$FF,$D5,$07,$FF,$5D,$FF,$F7,$4B,$B7,$7F,$FF,$66,$60,$63,$0C,$63,$73,$18,$60,$00,$60,$63,$63,$66,$0C,$73,$63,$00,$63,$0C,$63 ;
 $4300 DEFB $60,$63,$63,$78,$00,$63,$7B,$00,$63,$60,$60,$00,$7F,$3C,$00,$60,$63,$63,$63,$0C,$7B,$60,$00,$3E,$60,$63,$7E,$7E,$7B,$3E,$FF,$FF ;
 $4320 DEFB $00,$FF,$FF,$FF,$9F,$F9,$00,$00,$00,$00,$00,$00,$3F,$3F,$1F,$FE,$3F,$C0,$3F,$C1,$FE,$0F,$3E,$1F,$1F,$FC,$0F,$FC,$3F,$F8,$00,$00 ;
 $4340 DEFB $00,$FF,$FF,$A0,$80,$02,$05,$FF,$00,$00,$00,$00,$3F,$3F,$1F,$3E,$3F,$C0,$3F,$C0,$03,$E0,$3F,$FF,$1F,$3E,$3F,$3F,$3C,$FC,$00,$00 ;
 $4360 DEFB $00,$FF,$FE,$8F,$FF,$FF,$E1,$BF,$FF,$FF,$00,$00,$00,$00,$00,$3F,$FE,$1F,$FC,$3E,$7C,$3F,$FF,$3F,$FE,$00,$00,$00,$00,$00,$00,$00 ;
 $4380 DEFB $00,$FF,$FE,$C4,$80,$00,$A1,$BF,$FF,$FF,$FF,$FF,$00,$00,$00,$3E,$00,$1F,$3E,$3E,$7E,$3F,$FF,$3E,$3E,$00,$00,$00,$00,$00,$00,$00 ;
 $43A0 DEFB $00,$FF,$FE,$97,$FF,$8C,$6D,$FF,$FF,$FF,$FF,$FF,$7F,$7E,$60,$60,$63,$00,$63,$60,$63,$0C,$7B,$00,$0C,$18,$3E,$00,$7F,$7E,$00,$00 ;
 $43C0 DEFB $00,$FF,$F7,$80,$EA,$FF,$BF,$FF,$F6,$74,$AF,$FF,$7F,$63,$63,$7E,$00,$3C,$63,$63,$00,$3E,$7E,$7E,$7B,$00,$18,$7F,$7E,$00,$00,$00 ;
 $43E0 DEFB $00,$FF,$AA,$00,$07,$FE,$FF,$E5,$95,$6C,$FF,$FF,$63,$7E,$63,$0C,$63,$7B,$18,$3E,$00,$60,$63,$63,$63,$0C,$7B,$60,$00,$63,$0C,$60 ;
 $4400 DEFB $60,$63,$63,$6C,$00,$63,$6F,$00,$7F,$60,$60,$00,$63,$18,$00,$60,$63,$7F,$63,$0C,$6F,$6F,$00,$03,$60,$7E,$60,$60,$6F,$03,$FF,$FF ;
 $4420 DEFB $00,$FF,$FF,$FF,$6A,$06,$C0,$00,$00,$00,$00,$00,$3F,$3F,$1F,$3E,$3F,$C0,$3F,$C0,$FF,$1E,$3E,$1F,$1F,$3F,$3F,$3F,$3C,$FC,$00,$00 ;
 $4440 DEFB $00,$FF,$FF,$69,$00,$05,$05,$FF,$00,$00,$00,$00,$3F,$3F,$1F,$FE,$3F,$FE,$3F,$FE,$03,$E0,$0F,$3C,$1F,$FE,$0F,$FC,$3F,$F8,$00,$00 ;
 $4460 DEFB $00,$FF,$FE,$90,$00,$00,$51,$BF,$FF,$FF,$00,$00,$00,$00,$00,$3E,$3F,$1F,$3E,$3E,$F8,$3F,$00,$3E,$3E,$00,$00,$00,$00,$00,$00,$00 ;
 $4480 DEFB $00,$FF,$FE,$C5,$00,$00,$51,$BF,$FF,$FF,$FF,$FF,$00,$00,$00,$3E,$00,$1F,$FE,$3E,$3F,$3F,$FF,$3E,$1F,$00,$00,$00,$00,$00,$00,$00 ;
 $44A0 DEFB $00,$FF,$FD,$48,$00,$E1,$D5,$FF,$FF,$F0,$7F,$FF,$63,$60,$60,$60,$63,$00,$7F,$6F,$7F,$0C,$6F,$00,$0C,$18,$03,$00,$63,$60,$00,$00 ;
 $44C0 DEFB $00,$FF,$F4,$C0,$1D,$50,$7F,$FF,$F5,$E2,$6F,$FF,$63,$7F,$63,$60,$00,$18,$63,$63,$00,$03,$60,$60,$6F,$00,$18,$63,$60,$00,$00,$00 ;
 $44E0 DEFB $00,$FF,$A4,$00,$F9,$55,$7F,$CA,$AD,$5B,$FF,$FF,$63,$60,$63,$0C,$7F,$6F,$18,$03,$00,$60,$63,$7F,$63,$0C,$6F,$6F,$00,$7E,$0C,$60 ;
 $4500 DEFB $60,$63,$63,$66,$00,$63,$67,$00,$63,$60,$60,$00,$63,$18,$00,$60,$63,$63,$66,$0C,$67,$63,$00,$63,$63,$66,$60,$60,$67,$63,$FF,$FF ;
 $4520 DEFB $00,$FF,$FF,$FC,$80,$01,$30,$00,$00,$00,$00,$00,$3F,$3F,$3F,$3F,$3F,$C0,$3F,$C0,$7F,$BC,$3E,$1F,$3F,$3F,$3F,$3F,$3C,$FC,$00,$00 ;
 $4540 DEFB $00,$FF,$FF,$42,$00,$02,$82,$FF,$00,$00,$00,$00,$3F,$3F,$07,$F8,$3F,$FE,$3F,$FE,$03,$E0,$0E,$1C,$07,$F8,$0F,$FC,$3F,$E0,$00,$00 ;
 $4560 DEFB $00,$FF,$FE,$B8,$80,$00,$A1,$DF,$FF,$FF,$00,$00,$00,$00,$00,$3E,$3F,$3F,$3E,$3F,$F0,$3F,$00,$3E,$3F,$00,$00,$00,$00,$00,$00,$00 ;
 $4580 DEFB $00,$FF,$FE,$C6,$80,$00,$A1,$7F,$FF,$FF,$FF,$FF,$00,$00,$00,$3E,$00,$07,$F8,$3E,$1F,$BF,$FF,$3E,$0F,$80,$00,$00,$00,$00,$00,$00 ;
 $45A0 DEFB $00,$FF,$FD,$84,$00,$7F,$AB,$FF,$FF,$EF,$BF,$FF,$63,$60,$60,$60,$63,$00,$63,$63,$63,$0C,$67,$00,$0C,$18,$63,$00,$63,$60,$00,$00 ;
 $45C0 DEFB $00,$FF,$F6,$3A,$AB,$EF,$FF,$FF,$EB,$D1,$5F,$FF,$63,$63,$36,$60,$00,$18,$63,$63,$00,$63,$60,$60,$67,$00,$18,$63,$60,$00,$00,$00 ;
 $45E0 DEFB $00,$FF,$68,$07,$2A,$8A,$BF,$91,$5A,$77,$FF,$FF,$66,$60,$36,$0C,$63,$67,$18,$63,$00,$60,$63,$63,$66,$0C,$67,$63,$00,$60,$0C,$63 ;
 $4600 DEFB $7F,$3E,$3E,$63,$00,$3E,$63,$00,$63,$7F,$7F,$00,$63,$18,$00,$7F,$3E,$63,$7C,$3F,$63,$3E,$00,$3E,$3E,$63,$7F,$7F,$63,$3E,$FF,$FF ;
 $4620 DEFB $00,$FF,$FF,$FB,$A0,$40,$D0,$00,$00,$00,$00,$00,$3F,$FF,$3F,$3F,$3F,$C0,$3F,$C0,$3F,$F8,$3E,$1F,$3F,$3F,$3F,$3F,$3C,$FE,$00,$00 ;
 $4640 DEFB $00,$FF,$FF,$6C,$00,$01,$02,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4660 DEFB $00,$FF,$FE,$A9,$00,$00,$51,$5F,$FF,$FF,$00,$00,$00,$00,$00,$3E,$3F,$3F,$3F,$3F,$E0,$3F,$FC,$3E,$3F,$00,$00,$00,$00,$00,$00,$00 ;
 $4680 DEFB $00,$FF,$FE,$A9,$40,$00,$51,$7F,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46A0 DEFB $00,$FF,$FB,$C3,$00,$1F,$4B,$FF,$FF,$16,$5F,$FF,$63,$7F,$7F,$7F,$3E,$00,$63,$3E,$63,$3F,$63,$00,$3F,$18,$3E,$00,$63,$7F,$00,$00 ;
 $46C0 DEFB $00,$FF,$F5,$07,$D5,$6F,$FF,$FF,$94,$48,$DF,$FF,$63,$63,$1C,$7F,$00,$18,$3E,$3E,$00,$3E,$7F,$7F,$63,$00,$18,$63,$7F,$00,$00,$00 ;
 $46E0 DEFB $00,$FF,$50,$19,$55,$55,$5F,$AA,$EB,$6F,$FF,$FF,$7C,$7F,$1C,$3F,$63,$63,$18,$3E,$00,$7F,$3E,$63,$7C,$3F,$63,$3E,$00,$60,$3F,$3E ;
 $4700 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF ;
 $4720 DEFB $00,$FF,$FF,$F4,$00,$00,$2C,$FF,$00,$00,$00,$00,$3F,$FF,$3F,$3F,$3F,$C0,$3F,$C0,$1F,$F0,$3E,$1F,$3F,$3F,$3F,$3F,$3C,$FE,$00,$00 ;
 $4740 DEFB $00,$FF,$FF,$42,$00,$02,$82,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4760 DEFB $00,$FF,$FE,$C4,$80,$00,$A1,$60,$07,$FF,$00,$00,$00,$00,$00,$3E,$3F,$3F,$3F,$3F,$E0,$3F,$FC,$3E,$3F,$00,$00,$00,$00,$00,$00,$00 ;
 $4780 DEFB $00,$FF,$FE,$BA,$A0,$00,$A1,$7F,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47A0 DEFB $00,$FF,$FA,$60,$C0,$02,$B7,$FF,$FE,$FE,$2F,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47C0 DEFB $00,$FF,$EA,$00,$7E,$DF,$FF,$FE,$68,$BF,$DF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47E0 DEFB $00,$FF,$60,$62,$AA,$A8,$2F,$A3,$17,$DF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4800 DEFB $00,$FE,$91,$80,$15,$54,$37,$6A,$B7,$BF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4820 DEFB $00,$FD,$1F,$01,$48,$17,$1C,$1B,$7E,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4840 DEFB $00,$FD,$0D,$81,$45,$B4,$00,$57,$FE,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4860 DEFB $00,$FE,$91,$80,$51,$A8,$80,$7F,$FD,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4880 DEFB $00,$FF,$D4,$48,$14,$5A,$8F,$FF,$F7,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $48A0 DEFB $00,$FF,$FA,$08,$01,$15,$FF,$FF,$BF,$FF,$FD,$55,$7F,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $48C0 DEFB $00,$FF,$FE,$82,$40,$53,$FF,$FD,$FF,$F5,$56,$55,$5F,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $48E0 DEFB $00,$FF,$FE,$85,$95,$5F,$FF,$F7,$FF,$FD,$60,$C3,$57,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4900 DEFB $00,$FE,$A6,$00,$02,$A8,$2A,$80,$2B,$7F,$FF,$FF,$C3,$7F,$FF,$00,$C3,$7F,$3E,$18,$00,$63,$7F,$60,$60,$00,$3F,$7F,$00,$63,$3E,$FF ;
 $4920 DEFB $00,$FD,$0A,$02,$88,$2E,$84,$0E,$AA,$FF,$FF,$FF,$60,$3E,$3E,$66,$00,$3E,$FF,$00,$FF,$63,$7F,$00,$60,$3E,$63,$7F,$7E,$00,$00,$00 ;
 $4940 DEFB $00,$FD,$06,$00,$A6,$A8,$00,$A6,$AA,$FF,$FF,$FF,$63,$3E,$60,$7F,$00,$3E,$7F,$00,$FF,$63,$7F,$00,$3E,$3E,$7E,$7F,$7F,$63,$00,$00 ;
 $4960 DEFB $00,$FE,$A9,$00,$29,$60,$00,$6A,$AD,$FF,$FF,$FF,$FF,$FF,$7E,$C3,$00,$FF,$63,$7F,$00,$7E,$3E,$7C,$3E,$00,$7F,$7F,$7F,$FF,$00,$00 ;
 $4980 DEFB $00,$FF,$EA,$E0,$0A,$2D,$1A,$AA,$B7,$FF,$FF,$FF,$FF,$FF,$63,$3E,$00,$63,$3E,$00,$63,$3E,$00,$FF,$63,$3F,$3E,$00,$3F,$3E,$00,$00 ;
 $49A0 DEFB $00,$FF,$FA,$08,$02,$8A,$AA,$AB,$7F,$FF,$F5,$AB,$7F,$FF,$3E,$3E,$63,$7F,$00,$63,$3E,$FF,$7F,$00,$3E,$7F,$00,$3E,$63,$7C,$C3,$3E ;
 $49C0 DEFB $00,$FF,$FE,$82,$A0,$A3,$AA,$AD,$FF,$FA,$AE,$EA,$DF,$FF,$00,$63,$3E,$63,$7F,$00,$C3,$3E,$63,$00,$3E,$7F,$7F,$63,$00,$00,$00,$00 ;
 $49E0 DEFB $00,$FF,$FE,$82,$BE,$BB,$8F,$B7,$FF,$FD,$DF,$FF,$8F,$FF,$7C,$7F,$63,$3F,$7F,$7F,$63,$00,$C3,$7F,$FF,$00,$3F,$7F,$00,$63,$3E,$FF ;
 $4A00 DEFB $00,$FE,$98,$00,$05,$54,$2D,$AA,$AF,$7F,$FF,$FF,$66,$60,$18,$00,$66,$60,$60,$18,$00,$63,$60,$60,$60,$00,$0C,$60,$00,$73,$63,$18 ;
 $4A20 DEFB $00,$FA,$0C,$00,$44,$25,$52,$15,$FE,$FF,$FF,$FF,$60,$63,$63,$6C,$00,$63,$18,$00,$18,$63,$60,$00,$60,$63,$63,$60,$63,$00,$00,$00 ;
 $4A40 DEFB $00,$FD,$04,$00,$45,$B2,$00,$1F,$FD,$FF,$FF,$FF,$63,$63,$60,$60,$00,$63,$60,$00,$18,$63,$60,$00,$60,$63,$63,$60,$60,$73,$00,$00 ;
 $4A60 DEFB $00,$FF,$50,$A0,$11,$D2,$22,$FF,$FB,$FF,$FF,$FF,$FF,$FF,$63,$66,$00,$18,$63,$60,$00,$63,$63,$66,$60,$00,$60,$60,$60,$18,$00,$00 ;
 $4A80 DEFB $00,$FF,$EB,$20,$05,$36,$9F,$FF,$F7,$FF,$FF,$FC,$FF,$FF,$63,$63,$00,$63,$63,$00,$63,$63,$00,$18,$63,$0C,$60,$00,$0C,$60,$00,$00 ;
 $4AA0 DEFB $00,$FF,$FD,$0A,$01,$4D,$FF,$FF,$7F,$FF,$CA,$DD,$BF,$FF,$60,$63,$77,$60,$00,$77,$63,$18,$60,$00,$63,$60,$00,$63,$73,$66,$66,$60 ;
 $4AC0 DEFB $00,$FF,$FE,$82,$50,$53,$FF,$FB,$FF,$FD,$53,$55,$6F,$FF,$00,$63,$63,$63,$60,$00,$66,$63,$63,$00,$60,$60,$60,$73,$00,$00,$00,$00 ;
 $4AE0 DEFB $00,$FF,$FE,$85,$65,$77,$51,$F0,$FF,$FB,$60,$C3,$DF,$FF,$66,$60,$73,$0C,$06,$60,$73,$00,$66,$60,$18,$00,$0C,$60,$00,$73,$63,$18 ;
 $4B00 DEFB $00,$FE,$A8,$3E,$00,$2A,$2B,$00,$5B,$7F,$FF,$FF,$3C,$7E,$18,$00,$3C,$7E,$3E,$18,$00,$63,$7E,$60,$60,$00,$0C,$7E,$00,$7B,$63,$18 ;
 $4B20 DEFB $00,$FA,$1C,$00,$A4,$2A,$A9,$82,$AA,$FF,$FF,$FF,$60,$63,$63,$78,$00,$63,$18,$00,$18,$7F,$7E,$00,$60,$63,$63,$7E,$63,$00,$00,$00 ;
 $4B40 DEFB $00,$FD,$04,$00,$A2,$A0,$00,$2A,$AD,$FF,$FF,$FF,$7F,$63,$60,$7E,$00,$63,$7E,$00,$18,$7F,$7E,$00,$3E,$60,$63,$7E,$7E,$7B,$00,$00 ;
 $4B60 DEFB $00,$FF,$48,$80,$28,$D0,$00,$AA,$AB,$FF,$FF,$FF,$FF,$FF,$7E,$3C,$00,$18,$7F,$7E,$00,$7E,$63,$63,$3E,$00,$7E,$7E,$7E,$18,$00,$00 ;
 $4B80 DEFB $00,$FF,$F4,$20,$0A,$2B,$EA,$AA,$AF,$FF,$FF,$F0,$FF,$FF,$7F,$63,$00,$7F,$63,$00,$7F,$63,$00,$18,$7F,$0C,$3E,$00,$0C,$3E,$00,$00 ;
 $4BA0 DEFB $00,$FF,$FD,$0A,$02,$8A,$AA,$AA,$FF,$FF,$36,$A6,$BF,$FF,$3E,$63,$7F,$7E,$00,$7F,$63,$18,$7E,$00,$63,$7E,$00,$63,$7B,$63,$3C,$3E ;
 $4BC0 DEFB $00,$FF,$FE,$83,$A0,$23,$AA,$AB,$FF,$FE,$B2,$6A,$AF,$FF,$00,$7F,$63,$63,$7E,$00,$3C,$63,$63,$00,$3E,$7E,$7E,$7B,$00,$00,$00,$00 ;
 $4BE0 DEFB $00,$FF,$FE,$8A,$7E,$E6,$EA,$0F,$0F,$FA,$61,$86,$6F,$FF,$63,$7E,$7B,$0C,$0C,$7E,$7B,$00,$3C,$7E,$18,$00,$0C,$7E,$00,$7B,$63,$18 ;
 $4C00 DEFB $00,$FD,$50,$C1,$80,$55,$2D,$AA,$BF,$7F,$FF,$FF,$18,$60,$18,$00,$18,$60,$03,$18,$00,$63,$60,$60,$60,$00,$0C,$60,$00,$6F,$63,$18 ;
 $4C20 DEFB $00,$FA,$1C,$01,$45,$4C,$54,$61,$FE,$FF,$FF,$FF,$60,$63,$63,$6C,$00,$7F,$18,$00,$18,$63,$60,$00,$60,$63,$63,$60,$7E,$00,$00,$00 ;
 $4C40 DEFB $00,$FD,$02,$80,$53,$B8,$00,$1F,$FD,$FF,$FF,$FF,$63,$7F,$60,$60,$00,$63,$60,$00,$18,$63,$60,$00,$03,$60,$7E,$60,$60,$6F,$00,$00 ;
 $4C60 DEFB $00,$FF,$50,$80,$14,$A8,$89,$FF,$FB,$FF,$FF,$FF,$FF,$FF,$63,$18,$00,$18,$63,$60,$00,$63,$63,$63,$03,$00,$60,$60,$60,$18,$00,$00 ;
 $4C80 DEFB $00,$FF,$F4,$28,$05,$35,$BF,$FF,$EF,$FF,$FF,$CE,$FF,$FF,$63,$7F,$00,$63,$7F,$00,$63,$7F,$00,$18,$63,$0C,$03,$00,$0C,$03,$00,$00 ;
 $4CA0 DEFB $00,$FF,$FD,$05,$01,$45,$FF,$FE,$FF,$FD,$2B,$6D,$BF,$FF,$03,$63,$63,$60,$00,$63,$7F,$18,$60,$00,$63,$60,$00,$7F,$6F,$63,$18,$03 ;
 $4CC0 DEFB $00,$FF,$FE,$85,$10,$51,$FF,$FB,$FF,$FF,$63,$35,$6F,$FF,$00,$63,$7F,$63,$60,$00,$18,$63,$63,$00,$03,$60,$60,$6F,$00,$00,$00,$00 ;
 $4CE0 DEFB $00,$FF,$FE,$84,$05,$8D,$55,$51,$F0,$FB,$5F,$FF,$AF,$FF,$63,$60,$6F,$0C,$18,$60,$6F,$00,$18,$60,$18,$00,$0C,$60,$00,$6F,$63,$18 ;
 $4D00 DEFB $00,$FD,$A9,$06,$E0,$2F,$AA,$80,$AB,$7F,$FF,$FF,$18,$60,$18,$0C,$18,$60,$63,$00,$00,$7F,$60,$60,$60,$00,$0C,$60,$00,$67,$63,$18 ;
 $4D20 DEFB $00,$FA,$0A,$0B,$FE,$48,$0A,$92,$AA,$FF,$FF,$FF,$60,$63,$63,$66,$00,$63,$18,$00,$18,$63,$60,$00,$60,$63,$7F,$60,$66,$00,$00,$00 ;
 $4D40 DEFB $00,$FE,$82,$00,$A2,$A0,$00,$1A,$AD,$FF,$FF,$FF,$63,$63,$60,$60,$00,$63,$60,$00,$18,$63,$60,$00,$63,$63,$66,$60,$60,$67,$00,$00 ;
 $4D60 DEFB $00,$FF,$A8,$80,$28,$A8,$02,$AA,$AB,$FF,$FF,$FF,$FF,$FF,$63,$18,$00,$18,$63,$60,$00,$63,$63,$66,$63,$00,$60,$60,$60,$18,$00,$00 ;
 $4D80 DEFB $00,$FF,$F4,$10,$02,$BA,$EA,$AA,$DF,$FF,$FF,$3A,$FF,$FF,$63,$63,$0C,$63,$63,$0C,$63,$63,$1C,$18,$63,$0C,$63,$00,$0C,$63,$00,$00 ;
 $4DA0 DEFB $00,$FF,$FD,$04,$00,$A7,$AA,$AD,$FF,$FA,$B6,$BA,$BF,$FF,$63,$63,$63,$60,$00,$63,$63,$18,$60,$00,$63,$60,$00,$63,$67,$66,$18,$63 ;
 $4DC0 DEFB $00,$FF,$FE,$83,$A8,$3F,$AA,$AB,$FF,$FE,$E4,$AA,$AF,$FF,$0C,$63,$63,$36,$60,$00,$18,$63,$63,$00,$63,$60,$60,$67,$00,$00,$00,$00 ;
 $4DE0 DEFB $00,$FF,$FE,$88,$3F,$98,$AA,$AA,$0F,$06,$31,$8B,$DF,$FF,$66,$60,$67,$0C,$30,$60,$67,$00,$18,$60,$18,$00,$0C,$60,$00,$67,$63,$18 ;
 $4E00 DEFB $00,$FD,$D6,$3D,$D0,$1D,$65,$6A,$BE,$FF,$FF,$FF,$18,$7F,$18,$0C,$18,$7F,$3E,$18,$00,$36,$7F,$7F,$7F,$00,$3F,$60,$00,$63,$3E,$18 ;
 $4E20 DEFB $00,$FA,$0D,$5D,$45,$54,$05,$4F,$FE,$FF,$FF,$FF,$7F,$3E,$3E,$63,$00,$63,$18,$00,$18,$63,$7F,$00,$7F,$3E,$36,$7F,$63,$00,$00,$00 ;
 $4E40 DEFB $00,$FE,$92,$00,$52,$B2,$00,$3F,$FD,$FF,$FF,$FF,$63,$63,$7F,$60,$00,$3E,$60,$00,$18,$63,$7F,$00,$3E,$3E,$63,$7F,$7F,$63,$00,$00 ;
 $4E60 DEFB $00,$FF,$A4,$40,$14,$56,$27,$FF,$FB,$FF,$FF,$FF,$FF,$FF,$7E,$18,$00,$18,$63,$7F,$00,$7E,$3E,$7C,$3E,$00,$60,$7F,$7F,$18,$00,$00 ;
 $4E80 DEFB $00,$FF,$FA,$12,$05,$15,$7F,$FF,$DF,$FF,$FC,$D5,$7F,$FF,$63,$63,$0C,$63,$63,$0C,$63,$63,$1C,$18,$63,$3F,$3E,$00,$3F,$3E,$00,$00 ;
 $4EA0 DEFB $00,$FF,$FD,$05,$41,$45,$FF,$FD,$FF,$F5,$AD,$15,$5F,$FF,$3E,$3E,$63,$7F,$00,$63,$63,$18,$7F,$00,$3E,$60,$00,$63,$63,$7C,$18,$3E ;
 $4EC0 DEFB $00,$FF,$FE,$85,$94,$F5,$FF,$FB,$FF,$FE,$DF,$FF,$EF,$FF,$0C,$63,$63,$1C,$7F,$00,$18,$3E,$3E,$00,$3E,$7F,$7F,$63,$00,$00,$00,$00 ;
 $4EE0 DEFB $00,$FF,$FE,$90,$FF,$70,$85,$55,$01,$FD,$38,$CC,$3F,$FF,$7C,$7F,$63,$3F,$7F,$7F,$63,$00,$18,$7F,$18,$00,$3F,$60,$00,$63,$3E,$18 ;
 $4F00 DEFB $00,$FD,$24,$C2,$B8,$3B,$F4,$A1,$6A,$FF,$FF,$FF,$00,$00,$00,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F20 DEFB $00,$FD,$0A,$E2,$A6,$78,$02,$A6,$AA,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F40 DEFB $00,$FE,$A1,$00,$29,$A0,$00,$2A,$AD,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F60 DEFB $00,$FF,$D2,$40,$0A,$54,$0A,$AA,$B7,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F80 DEFB $00,$FF,$FA,$10,$02,$9A,$6A,$AA,$BF,$FF,$F9,$AB,$7F,$FF,$00,$00,$18,$00,$00,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4FA0 DEFB $00,$FF,$FD,$02,$A0,$A5,$AA,$AD,$FF,$EA,$DE,$2A,$DF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4FC0 DEFB $00,$FF,$FE,$82,$AB,$AF,$EA,$B7,$FF,$FD,$E0,$C1,$37,$FF,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4FE0 DEFB $00,$FF,$FE,$83,$AB,$B1,$00,$AA,$00,$1E,$3F,$F3,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5000 DEFB $00,$FF,$FE,$87,$FF,$F3,$00,$00,$00,$1D,$54,$8F,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5020 DEFB $00,$FF,$FB,$86,$00,$05,$10,$07,$E0,$00,$00,$00,$03,$E7,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5040 DEFB $00,$FF,$4E,$40,$3E,$00,$15,$00,$00,$00,$00,$00,$00,$01,$6D,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5060 DEFB $00,$FE,$BA,$45,$95,$D0,$2D,$55,$AA,$AA,$AA,$AA,$AA,$AF,$7C,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5080 DEFB $00,$FF,$DA,$AA,$AA,$AA,$DA,$AA,$AA,$AB,$00,$00,$01,$55,$6B,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50A0 DEFB $00,$FC,$3A,$AE,$AA,$AB,$AA,$AD,$55,$6A,$AA,$AA,$AB,$E1,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50C0 DEFB $00,$DB,$9F,$FA,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF ;
 $50E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5100 DEFB $00,$FF,$FE,$8A,$AA,$EE,$80,$00,$00,$35,$A4,$BF,$FF,$FF,$FF,$FF,$FF,$63,$7F,$63,$00,$63,$63,$C3,$00,$63,$3E,$FF,$00,$3E,$3E,$3E ;
 $5120 DEFB $00,$FF,$F5,$98,$00,$02,$8E,$F8,$00,$00,$00,$00,$00,$19,$FF,$FF,$7E,$3E,$63,$60,$00,$3E,$63,$7C,$00,$63,$C3,$3E,$7F,$60,$7F,$00 ;
 $5140 DEFB $00,$FF,$4E,$80,$C1,$80,$14,$00,$00,$00,$2A,$A8,$00,$01,$5B,$FF,$63,$3E,$63,$7F,$00,$3E,$3E,$FF,$00,$3F,$FF,$00,$7C,$3E,$63,$7F ;
 $5160 DEFB $00,$FE,$88,$AC,$EB,$30,$2A,$80,$00,$00,$00,$00,$00,$0E,$FA,$FF,$06,$3F,$FF,$0C,$3E,$00,$63,$3E,$FF,$00,$3E,$63,$FF,$00,$00,$00 ;
 $5180 DEFB $00,$FF,$D1,$00,$00,$00,$50,$00,$00,$0C,$00,$00,$2A,$AA,$85,$FF,$00,$FF,$3F,$60,$60,$00,$63,$3E,$C3,$00,$1C,$3E,$FF,$30,$00,$00 ;
 $51A0 DEFB $00,$E3,$C0,$09,$F0,$3C,$02,$A8,$28,$00,$00,$00,$1E,$1F,$63,$3E,$FF,$3E,$63,$00,$3E,$63,$FF,$00,$7F,$3E,$7E,$00,$3E,$63,$7E,$00 ;
 $51C0 DEFB $00,$EE,$60,$07,$87,$3E,$66,$3E,$FF,$7F,$7E,$3E,$3E,$7E,$7C,$00,$3E,$3E,$63,$7F,$00,$3E,$3E,$3E,$63,$00,$00,$7E,$C3,$7F,$00,$FF ;
 $51E0 DEFB $00,$00,$00,$00,$00,$1F,$1F,$3F,$71,$BF,$1F,$9F,$3B,$BF,$00,$0E,$1F,$1F,$1F,$00,$3F,$3C,$1F,$71,$BF,$BF,$1F,$00,$00,$00,$00,$00 ;
 $5200 DEFB $00,$FF,$FD,$1F,$FF,$99,$54,$00,$01,$55,$C5,$7F,$FF,$FF,$FF,$FF,$18,$63,$60,$73,$00,$63,$63,$66,$00,$73,$63,$18,$00,$63,$63,$60 ;
 $5220 DEFB $00,$FF,$ED,$20,$00,$01,$45,$00,$00,$00,$00,$00,$00,$06,$7F,$FF,$63,$63,$63,$60,$00,$63,$73,$66,$00,$77,$66,$60,$60,$60,$60,$00 ;
 $5240 DEFB $00,$FE,$8D,$01,$00,$40,$15,$00,$00,$15,$55,$55,$55,$41,$B7,$FF,$63,$63,$63,$60,$00,$63,$63,$18,$00,$0C,$18,$00,$66,$63,$73,$60 ;
 $5260 DEFB $00,$FE,$AE,$D6,$63,$34,$6E,$AA,$AA,$AA,$AA,$AA,$AA,$BB,$D6,$FF,$0C,$0C,$18,$18,$60,$00,$73,$63,$18,$00,$63,$63,$18,$00,$00,$00 ;
 $5280 DEFB $00,$FF,$EB,$AA,$AA,$AA,$DA,$AA,$AA,$B0,$00,$01,$55,$56,$AA,$FF,$00,$18,$0C,$60,$60,$00,$77,$63,$66,$00,$3C,$60,$18,$18,$00,$00 ;
 $52A0 DEFB $00,$DF,$FA,$BA,$AF,$EA,$AD,$5A,$AA,$AA,$AA,$AB,$E1,$FF,$63,$63,$18,$63,$63,$00,$63,$63,$18,$00,$60,$63,$63,$00,$63,$63,$63,$00 ;
 $52C0 DEFB $00,$F5,$9F,$FC,$7F,$60,$6C,$63,$18,$60,$63,$63,$63,$63,$66,$00,$63,$63,$77,$60,$00,$60,$63,$63,$73,$00,$00,$63,$66,$60,$00,$FF ;
 $52E0 DEFB $00,$00,$00,$00,$00,$39,$BB,$BB,$BB,$3B,$86,$39,$BB,$8C,$00,$1E,$3B,$BB,$BB,$80,$3B,$BC,$3B,$BB,$38,$3B,$B0,$00,$00,$09,$98,$CC ;
 $5300 DEFB $00,$FF,$FD,$6A,$80,$18,$AA,$A0,$0A,$BC,$A6,$FF,$FF,$FF,$FF,$FF,$18,$7F,$7E,$7B,$00,$63,$7F,$3C,$00,$7B,$63,$18,$00,$60,$63,$3E ;
 $5320 DEFB $00,$FF,$ED,$40,$00,$00,$A5,$00,$00,$00,$00,$00,$00,$01,$BF,$FF,$63,$63,$63,$60,$00,$63,$7B,$63,$00,$7F,$3C,$3E,$7E,$60,$7E,$00 ;
 $5340 DEFB $00,$FE,$AE,$02,$1C,$20,$1E,$80,$02,$AA,$AA,$AA,$AA,$AB,$EF,$FF,$7F,$63,$63,$7E,$00,$60,$63,$18,$00,$0C,$18,$00,$63,$63,$7B,$7E ;
 $5360 DEFB $00,$FF,$4C,$2A,$1C,$2A,$A8,$00,$00,$00,$00,$00,$00,$2F,$2A,$1F,$0C,$0C,$18,$00,$3E,$00,$7B,$63,$18,$00,$63,$63,$18,$00,$00,$00 ;
 $5380 DEFB $00,$FF,$F4,$80,$00,$00,$50,$00,$01,$C0,$00,$0A,$AA,$00,$03,$7F,$00,$18,$0C,$60,$60,$00,$7F,$63,$3C,$00,$0C,$3E,$18,$18,$00,$00 ;
 $53A0 DEFB $00,$A4,$8F,$F0,$11,$43,$C5,$50,$00,$00,$00,$FC,$1F,$FF,$63,$63,$18,$60,$7F,$00,$63,$63,$18,$00,$7E,$63,$63,$00,$63,$63,$63,$00 ;
 $53C0 DEFB $00,$FB,$F8,$03,$FF,$3E,$78,$63,$18,$7E,$7E,$63,$63,$63,$63,$00,$60,$63,$7F,$7E,$00,$3E,$63,$63,$7B,$00,$00,$7E,$3C,$7E,$00,$FF ;
 $53E0 DEFB $00,$00,$00,$00,$00,$38,$3B,$BB,$9E,$3B,$86,$38,$3F,$8C,$00,$06,$3B,$9F,$1F,$00,$3B,$BC,$3B,$9E,$3F,$3B,$9F,$00,$00,$0A,$55,$52 ;
 $5400 DEFB $00,$FF,$FB,$FF,$43,$C6,$05,$55,$55,$53,$48,$0F,$FF,$FF,$FF,$FF,$18,$63,$60,$6F,$00,$63,$63,$18,$00,$6F,$63,$18,$00,$60,$63,$03 ;
 $5420 DEFB $00,$FF,$D6,$80,$00,$00,$5A,$00,$00,$00,$00,$00,$00,$00,$BF,$FF,$7E,$7F,$63,$60,$00,$7F,$6F,$63,$00,$63,$18,$03,$60,$60,$60,$00 ;
 $5440 DEFB $00,$FE,$CD,$02,$63,$20,$15,$50,$55,$55,$5A,$AB,$55,$57,$EF,$3F,$63,$7F,$63,$60,$00,$6F,$63,$18,$00,$0C,$18,$00,$63,$63,$6F,$60 ;
 $5460 DEFB $00,$FF,$6E,$AD,$00,$6F,$DA,$AA,$AA,$AA,$AA,$AA,$AA,$BF,$FF,$EF,$0C,$0C,$18,$00,$03,$00,$6F,$63,$18,$00,$63,$63,$18,$00,$00,$00 ;
 $5480 DEFB $00,$FF,$FA,$AA,$AA,$AA,$DA,$AA,$AE,$00,$05,$55,$AA,$AA,$AC,$FF,$00,$18,$0C,$60,$60,$00,$63,$7F,$18,$00,$0C,$03,$18,$18,$00,$00 ;
 $54A0 DEFB $00,$BA,$AA,$AA,$BA,$EE,$AD,$5A,$AA,$AA,$AF,$03,$FF,$FF,$63,$7F,$18,$60,$63,$00,$63,$63,$18,$00,$60,$63,$7E,$00,$63,$63,$7E,$00 ;
 $54C0 DEFB $00,$FC,$07,$FF,$FF,$03,$6C,$7F,$18,$60,$63,$63,$7F,$7E,$63,$00,$6F,$7F,$63,$60,$00,$03,$63,$63,$6F,$00,$00,$63,$18,$60,$00,$FF ;
 $54E0 DEFB $00,$00,$00,$00,$00,$38,$3B,$BF,$0C,$3F,$06,$3B,$BB,$8C,$00,$06,$1F,$BB,$BB,$80,$3F,$3C,$3F,$8C,$38,$3F,$01,$80,$00,$0B,$D8,$DE ;
 $5500 DEFB $00,$FF,$FB,$AA,$9E,$BD,$C0,$2A,$A8,$0A,$FF,$F0,$FF,$FF,$FF,$FF,$18,$63,$60,$67,$00,$7F,$63,$18,$00,$67,$63,$18,$00,$63,$63,$63 ;
 $5520 DEFB $00,$FF,$AB,$00,$00,$00,$2A,$00,$00,$00,$00,$00,$00,$00,$BF,$FF,$60,$63,$63,$60,$00,$63,$67,$66,$00,$63,$18,$63,$60,$60,$60,$00 ;
 $5540 DEFB $00,$FE,$AE,$84,$43,$10,$2A,$AA,$AA,$A8,$00,$00,$00,$AB,$F0,$DF,$63,$63,$36,$60,$00,$63,$63,$18,$00,$0C,$18,$00,$66,$63,$67,$60 ;
 $5560 DEFB $00,$FF,$44,$00,$C1,$80,$50,$00,$00,$00,$00,$1F,$FF,$FF,$FF,$EF,$0C,$0C,$18,$00,$63,$00,$67,$63,$18,$00,$63,$63,$18,$00,$00,$00 ;
 $5580 DEFB $00,$FF,$FB,$40,$00,$00,$50,$01,$F8,$02,$AA,$A8,$00,$00,$33,$FF,$00,$18,$0C,$60,$60,$00,$63,$63,$18,$00,$0C,$63,$18,$18,$00,$00 ;
 $55A0 DEFB $00,$A8,$80,$04,$2C,$89,$9A,$A0,$01,$FF,$F0,$FF,$FF,$FF,$7F,$63,$18,$63,$63,$00,$63,$63,$18,$00,$60,$63,$66,$00,$63,$63,$66,$00 ;
 $55C0 DEFB $00,$FF,$FF,$FF,$FF,$63,$66,$63,$18,$60,$63,$63,$63,$66,$66,$00,$63,$63,$63,$60,$00,$63,$63,$63,$67,$1C,$1C,$63,$18,$60,$00,$FF ;
 $55E0 DEFB $00,$00,$00,$00,$00,$39,$BB,$B0,$0C,$33,$06,$39,$BB,$8C,$00,$06,$01,$BB,$BB,$80,$30,$3C,$3B,$8C,$38,$3B,$31,$80,$00,$0A,$55,$52 ;
 $5600 DEFB $00,$FF,$FB,$75,$61,$57,$BF,$00,$00,$7F,$00,$0F,$03,$FF,$FF,$FF,$18,$63,$7F,$63,$00,$36,$63,$18,$00,$63,$3E,$18,$00,$3E,$3E,$3E ;
 $5620 DEFB $00,$FF,$AB,$40,$00,$00,$4A,$00,$00,$00,$00,$00,$00,$01,$73,$FF,$60,$63,$3E,$7F,$00,$63,$63,$7C,$00,$63,$18,$3E,$7F,$7F,$60,$00 ;
 $5640 DEFB $00,$FE,$DB,$44,$84,$90,$2D,$55,$55,$6A,$AA,$AA,$AA,$AD,$DF,$DF,$63,$63,$1C,$7F,$00,$3E,$3E,$18,$00,$3F,$18,$00,$7C,$3E,$63,$7F ;
 $5660 DEFB $00,$FF,$AE,$AA,$BE,$AA,$DA,$AA,$AA,$AA,$AF,$E0,$00,$01,$D4,$1F,$06,$3F,$18,$00,$3E,$00,$63,$3E,$18,$00,$3E,$3E,$18,$00,$00,$00 ;
 $5680 DEFB $00,$FF,$F6,$EA,$AA,$AA,$DB,$FF,$55,$55,$5A,$AA,$AA,$AB,$CF,$FF,$00,$18,$3F,$7F,$7F,$00,$63,$63,$18,$00,$3F,$3E,$18,$30,$00,$00 ;
 $56A0 DEFB $00,$BA,$EA,$AA,$FA,$AF,$FF,$FF,$FE,$00,$0F,$FF,$FF,$FF,$36,$63,$18,$3E,$63,$00,$3E,$3E,$18,$00,$60,$3E,$63,$00,$3E,$3E,$63,$00 ;
 $56C0 DEFB $00,$FF,$FF,$FF,$FF,$3E,$63,$63,$18,$7F,$7E,$3E,$63,$63,$7C,$00,$3E,$63,$63,$7F,$00,$3E,$3E,$3E,$63,$1C,$1C,$7E,$18,$7F,$00,$FF ;
 $56E0 DEFB $00,$00,$00,$00,$00,$1F,$1F,$30,$0C,$31,$9F,$9F,$3B,$8C,$00,$1F,$9F,$1F,$1F,$00,$30,$3F,$BB,$8C,$3F,$B9,$9F,$00,$00,$32,$58,$D2 ;
 $5700 DEFB $00,$FF,$FB,$4B,$80,$2A,$60,$FF,$FF,$80,$00,$00,$FC,$1F,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5720 DEFB $00,$FF,$4A,$80,$00,$00,$2A,$00,$00,$00,$00,$00,$00,$01,$6D,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5740 DEFB $00,$FE,$AA,$A6,$88,$90,$2A,$AA,$AA,$00,$00,$00,$00,$07,$AF,$3F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5760 DEFB $00,$FF,$A6,$00,$00,$00,$50,$00,$00,$00,$F0,$00,$00,$0A,$BD,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5780 DEFB $00,$FF,$C8,$38,$00,$00,$DE,$AA,$AA,$AA,$00,$00,$00,$1E,$3F,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57A0 DEFB $00,$AC,$20,$07,$07,$F0,$00,$00,$01,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57C0 DEFB $00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF ;
 $57E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; }
 $5800 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$38,$38 ; {Attributes.
 $5820 DEFB $07,$38,$38,$38,$78,$38,$07,$00,$07,$07,$07,$07,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$07,$07 ;
 $5840 DEFB $07,$38,$38,$38,$78,$78,$38,$38,$07,$07,$07,$07,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$07,$07 ;
 $5860 DEFB $07,$38,$38,$38,$78,$78,$38,$38,$38,$38,$07,$07,$07,$07,$05,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$05,$05,$07,$07,$07,$07,$07 ;
 $5880 DEFB $07,$38,$38,$38,$78,$78,$38,$38,$38,$38,$78,$78,$05,$05,$05,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$05,$07,$07,$07,$07,$07 ;
 $58A0 DEFB $07,$38,$38,$38,$38,$7A,$38,$78,$78,$78,$78,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07 ;
 $58C0 DEFB $07,$38,$38,$78,$38,$78,$78,$38,$78,$78,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $58E0 DEFB $07,$38,$38,$78,$38,$38,$38,$38,$78,$78,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5900 DEFB $07,$78,$38,$38,$78,$38,$38,$38,$38,$78,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5920 DEFB $07,$38,$38,$38,$38,$78,$38,$38,$38,$78,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5940 DEFB $07,$78,$38,$78,$78,$78,$78,$38,$38,$78,$38,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$07 ;
 $5960 DEFB $07,$78,$38,$78,$78,$78,$78,$38,$38,$38,$78,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07 ;
 $5980 DEFB $07,$78,$38,$78,$78,$38,$38,$38,$38,$38,$38,$38,$38,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $59A0 DEFB $07,$38,$38,$38,$78,$38,$38,$38,$38,$38,$38,$38,$38,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $59C0 DEFB $07,$38,$38,$38,$78,$38,$38,$38,$78,$38,$78,$38,$38,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $59E0 DEFB $07,$38,$38,$38,$38,$78,$38,$38,$78,$78,$78,$78,$38,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5A00 DEFB $07,$38,$38,$38,$38,$78,$78,$78,$78,$78,$78,$78,$78,$78,$38,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5A20 DEFB $07,$38,$38,$78,$78,$78,$38,$78,$78,$78,$78,$78,$78,$78,$38,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5A40 DEFB $07,$38,$38,$78,$78,$78,$78,$78,$78,$78,$38,$38,$38,$38,$38,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5A60 DEFB $07,$38,$38,$38,$78,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5A80 DEFB $07,$38,$38,$38,$38,$38,$38,$38,$38,$78,$78,$78,$38,$38,$38,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07 ;
 $5AA0 DEFB $07,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07 ;
 $5AC0 DEFB $07,$38,$38,$38,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$38 ;
 $5AE0 DEFB $07,$07,$07,$07,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$07,$04,$04,$04 ; }
 $5B00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C00 DEFB $FF,$00,$00,$00,$FF,$00,$23,$0D
 $5C08 DEFB $0D,$23,$05,$00,$00,$00,$16,$01
 $5C10 DEFB $01,$00,$06,$00,$0B,$00,$01,$00
 $5C18 DEFB $01,$00,$06,$00,$10,$00,$00,$00
 $5C20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C30 DEFB $00,$00,$00,$00,$00,$00,$00,$3C
 $5C38 DEFB $40,$00,$FF,$CD,$01,$B0,$5F,$00
 $5C40 DEFB $00,$00,$00,$00,$FF,$01,$00,$02
 $5C48 DEFB $00,$00,$00,$BE,$5D,$00,$00,$B6
 $5C50 DEFB $5C,$B6,$5C,$CB,$5C,$9F,$5D,$CA
 $5C58 DEFB $5C,$BF,$5D,$C2,$5D,$15,$5D,$D5
 $5C60 DEFB $5D,$C4,$5D,$C4,$5D,$C4,$5D,$2D
 $5C68 DEFB $92,$5C,$10,$02,$00,$00,$00,$00
 $5C70 DEFB $00,$00,$00,$00,$B6,$1A,$00,$00
 $5C78 DEFB $06,$00,$00,$58,$FF,$00,$00,$21
 $5C80 DEFB $00,$5B,$21,$17,$00,$40,$E0,$50
 $5C88 DEFB $21,$18,$21,$17,$01,$00,$00,$00
 $5C90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CB0 DEFB $00,$00,$B3,$5F,$FF,$FF,$F4,$09
 $5CB8 DEFB $A8,$10,$4B,$F4,$09,$C4,$15,$53
 $5CC0 DEFB $81,$0F,$C4,$15,$52,$F4,$09,$C4
 $5CC8 DEFB $15,$50,$80,$00,$01,$D0,$00,$FD
 $5CD0 DEFB $32,$34,$34,$39,$39,$0E,$00,$00
 $5CD8 DEFB $B3,$5F,$00,$3A,$F9,$C0,$28,$20
 $5CE0 DEFB $28,$BE,$32,$33,$36,$33,$35,$0E
 $5CE8 DEFB $00,$00,$53,$5C,$00,$2B,$28,$20
 $5CF0 DEFB $28,$BE,$32,$33,$36,$33,$36,$0E
 $5CF8 DEFB $00,$00,$54,$5C,$00,$29,$2A,$32
 $5D00 DEFB $35,$36,$0E,$00,$00,$00,$01,$00
 $5D08 DEFB $29,$20,$29,$2B,$37,$36,$0E,$00
 $5D10 DEFB $00,$4C,$00,$00,$29,$3A,$EA,$AF
 $5D18 DEFB $32,$8D,$5C,$32,$48,$5C,$CD,$6B
 $5D20 DEFB $0D,$DD,$21,$00,$40,$11,$00,$1B
 $5D28 DEFB $3E,$FF,$37,$CD,$56,$05,$DD,$21
 $5D30 DEFB $B4,$63,$11,$4C,$9C,$3E,$FF,$37
 $5D38 DEFB $CD,$56,$05

; Game Entry Point
@label=GameEntryPoint
c$5D3B JP $6E9D      ; Jump to #R$6E9D.

; Messaging: Loader
@label=Messaging_Loader
t$5D3E DEFM "WOW!! ANOTHER LOADER... WELL BORING THIS ONE OH WELL HAVE A GOOD "
 $5D7F DEFM "TIME YOU HACKERS!"

; Data block at 5D90
b$5D90 DEFB $00,$00,$00,$00,$00,$00,$00,$78
 $5D98 DEFB $78,$78,$78,$78,$78,$78,$0D,$00
 $5DA0 DEFB $02,$1B,$00,$FD,$32,$34,$34,$39
 $5DA8 DEFB $39,$0E,$00,$00,$B3,$5F,$00,$3A
 $5DB0 DEFB $F9,$C0,$32,$34,$35,$30,$30,$0E
 $5DB8 DEFB $00,$00,$B4,$5F,$00,$0D,$80,$EF
 $5DC0 DEFB $22,$22,$0D,$80,$00,$00,$17,$5D
 $5DC8 DEFB $00,$00,$00,$4C,$00,$00,$00,$00
 $5DD0 DEFB $00,$01,$00,$00,$00,$00,$16,$01
 $5DD8 DEFB $00,$50,$4F,$4B,$45,$52,$20,$20
 $5DE0 DEFB $F3,$00,$00,$00,$F3,$00,$0D,$00
 $5DE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ED0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ED8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F78 DEFB $00,$00,$00,$00,$00,$00,$B1,$33
 $5F80 DEFB $C4,$5D,$DB,$02,$4D,$00,$D3,$46
 $5F88 DEFB $2D,$00,$D2,$46,$8C,$18,$5C,$0E
 $5F90 DEFB $00,$47,$C0,$57,$71,$0E,$F3,$0D
 $5F98 DEFB $01,$00,$3B,$5D,$2B,$2D,$65,$33
 $5FA0 DEFB $00,$00,$ED,$10,$3A,$00,$09,$00
 $5FA8 DEFB $85,$1C,$10,$1C,$52,$1B,$76,$1B
 $5FB0 DEFB $03,$13,$00,$3E,$00,$00,$00,$00
 $5FB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6000 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6008 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6010 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6018 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6020 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6028 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6030 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6038 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6040 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6048 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6050 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6058 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6060 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6068 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6070 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6078 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6080 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6088 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6090 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6098 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6100 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6108 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6110 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6118 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6120 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6128 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6130 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6138 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6140 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6148 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6150 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6158 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6160 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6168 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6170 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6178 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6180 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6188 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6190 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6198 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6200 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6208 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6210 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6218 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6220 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6228 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6230 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6238 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6240 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6248 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6250 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6258 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6260 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6268 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6270 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6278 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6280 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6288 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6290 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6298 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6300 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6308 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6310 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6318 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6320 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6328 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6330 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6338 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6340 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6348 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6350 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6358 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6360 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6368 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6370 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6378 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6380 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6388 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6390 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6398 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6400 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6408 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6410 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6418 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6420 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6428 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6430 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6438 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6440 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6448 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6450 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6458 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6460 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6468 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6470 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6478 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6480 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6488 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6490 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6498 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6500 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6508 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6510 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6518 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6520 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6528 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6530 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6538 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6540 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6548 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6550 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6558 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6560 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6568 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6570 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6578 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6580 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6588 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6590 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6598 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6600 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6608 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6610 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6618 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6620 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6628 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6630 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6638 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6640 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6648 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6650 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6658 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6660 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6668 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6670 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6678 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6680 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6688 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6690 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6698 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6700 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6708 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6710 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6718 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6720 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6728 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6730 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6738 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6740 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6748 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6750 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6758 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6760 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6768 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6770 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6778 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6780 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6788 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6790 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6798 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6800 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6808 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6810 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6818 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6820 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6828 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6830 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6838 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6840 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6848 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6850 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6858 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6860 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6868 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6870 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6878 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6880 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6888 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6890 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6898 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6900 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6908 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6910 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6918 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6920 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6928 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6930 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6938 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6940 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6948 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6950 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6958 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6960 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6968 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6970 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6978 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6980 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6988 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6990 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6998 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D78 DEFB $00,$21,$00,$00,$22,$A8,$5C,$21
 $6D80 DEFB $84,$8D,$22,$59,$5C,$11,$3A,$FB
 $6D88 DEFB $22,$53,$5C,$AF,$ED,$47,$21,$13
 $6D90 DEFB $E3,$22,$4B,$5C,$21,$9D,$6E,$E5
 $6D98 DEFB $3A,$00,$40,$FE,$FF,$C2,$64,$00
 $6DA0 DEFB $C8,$21,$64,$00,$E3,$C9,$21,$9D
 $6DA8 DEFB $6E,$22,$3D,$5C,$2B,$F9,$CD,$4B
 $6DB0 DEFB $78,$3A,$02,$6F,$CD,$7B,$6F,$CD
 $6DB8 DEFB $3A,$FB,$CD,$8E,$02,$3E,$0F,$A3
 $6DC0 DEFB $FE,$04,$28,$11,$FE,$0C,$28,$0D
 $6DC8 DEFB $FE,$03,$28,$09,$FE,$0B,$28,$05
 $6DD0 DEFB $CD,$46,$FB,$18,$E5,$7B,$FE,$23
 $6DD8 DEFB $28,$F6,$FE,$24,$28,$2E,$FE,$1C
 $6DE0 DEFB $28,$37,$FE,$14,$28,$42,$FE,$0C
 $6DE8 DEFB $28,$4E,$FE,$04,$28,$5A,$FE,$03
 $6DF0 DEFB $CA,$94,$6F,$FE,$0B,$CA,$BE,$73
 $6DF8 DEFB $FE,$13,$CA,$4A,$70,$21,$03,$6F
 $6E00 DEFB $11,$04,$6F,$01,$FC,$90,$ED,$B0
 $6E08 DEFB $C3,$64,$00,$05,$CD,$77,$6F,$3E
 $6E10 DEFB $01,$CD,$7B,$6F,$CD,$9A,$6F,$18
 $6E18 DEFB $2F,$CD,$77,$6F,$3E,$02,$CD,$7B
 $6E20 DEFB $6F,$3E,$06,$32,$3E,$91,$18,$A8
 $6E28 DEFB $CD,$77,$6F,$3E,$03,$CD,$7B,$6F
 $6E30 DEFB $21,$59,$6F,$CD,$50,$6F,$18,$98
 $6E38 DEFB $CD,$77,$6F,$3E,$04,$CD,$7B,$6F
 $6E40 DEFB $21,$63,$6F,$CD,$50,$6F,$18,$88
 $6E48 DEFB $CD,$77,$6F,$3E,$05,$CD,$7B,$6F
 $6E50 DEFB $B7,$2D,$EF,$5D,$EA,$5D,$9D,$6E
 $6E58 DEFB $2B,$2D,$65,$33,$58,$27,$ED,$10
 $6E60 DEFB $2C,$00,$71,$00,$85,$1C,$7D,$1C
 $6E68 DEFB $52,$1B,$76,$1B,$03,$13,$00,$3E
 $6E70 DEFB $21,$00,$00,$22,$A8,$5C,$21,$84
 $6E78 DEFB $DB,$02,$4D,$00,$D1,$F4,$00,$00
 $6E80 DEFB $F6,$57,$5C,$00,$DB,$0B,$CE,$0B
 $6E88 DEFB $CE,$0B,$B6,$40,$0B,$13,$DC,$0A
 $6E90 DEFB $FE,$15,$01,$01,$22,$14,$00,$40
 $6E98 DEFB $4A,$FB,$B1,$6E,$C9

; Title Screen
;
; Used by the routines at #R$5D3B, #R$704A, #R$729A and #R$73BE.
@label=TitleScreen
c$6E9D LD HL,$6E9D    ; {#HTML(Write #R$6E9D to *<a rel="noopener nofollow"
 $6EA0 LD ($5C3D),HL  ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C3D.html">ERR_SP</a>.)
                      ; }
 $6EA3 DEC HL         ; Decrease #REGhl by one.
 $6EA4 LD SP,HL       ; Set the stack pointer to the address held by #REGhl.
 $6EA5 CALL $784B     ; Call #R$784B.
 $6EA8 LD A,($6F02)   ; {Highlight the currently selected menu item in #R$6F02.
 $6EAB CALL $6F7B     ; }
 $6EAE CALL $FB3A     ; Call #R$FB3A.
@label=TitleScreen_Loop
*$6EB1 CALL $028E     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/028E.html">KEY_SCAN</a>.)
 $6EB4 LD A,%00001111 ; {Mask off bits 4-7.
 $6EB6 AND E          ; }
 $6EB7 CP $04         ; {Jump to #R$6ECC if there is any input.
 $6EB9 JR Z,$6ECC     ;
 $6EBB CP $0C         ;
 $6EBD JR Z,$6ECC     ;
 $6EBF CP $03         ;
 $6EC1 JR Z,$6ECC     ;
 $6EC3 CP $0B         ;
 $6EC5 JR Z,$6ECC     ; }
; This entry point is used by the routines at #R$6F10, #R$6F1F, #R$6F2F and
; #R$6F3F.
@label=TitleScreenNoInput
*$6EC7 CALL $FB46     ; Call #R$FB46.
 $6ECA JR $6EB1       ; Loop back around to #R$6EB1.
; Handler directing the keypress to the appropriate routines.
@label=TitleScreenRouting
*$6ECC LD A,E         ; Fetch the user input.
 $6ECD CP $23         ; {Jump to #R$6EC7 if #REGe is #N$23.
 $6ECF JR Z,$6EC7     ; }
 $6ED1 CP $24         ; {Jump to #R$6F03 if "DEFINE KEYBOARD" was selected.
 $6ED3 JR Z,$6F03     ; }
 $6ED5 CP $1C         ; {Jump to #R$6F10 if "KEMPSTON" was selected.
 $6ED7 JR Z,$6F10     ; }
 $6ED9 CP $14         ; {Jump to #R$6F1F if "CURSOR" was selected.
 $6EDB JR Z,$6F1F     ; }
 $6EDD CP $0C         ; {Jump to #R$6F2F if "SINCLAIR IF2" was selected.
 $6EDF JR Z,$6F2F     ; }
 $6EE1 CP $04         ; {Jump to #R$6F3F if "KEYBOARD" was selected.
 $6EE3 JR Z,$6F3F     ; }
 $6EE5 CP $03         ; {Jump to #R$6F94 if "START GAME" was selected.
 $6EE7 JP Z,$6F94     ; }
 $6EEA CP $0B         ; {Jump to #R$73BE if "INFORMATION" was selected.
 $6EEC JP Z,$73BE     ; }
 $6EEF CP $13         ; {Jump to #R$704A if "WINNERS LIST" was selected.
 $6EF1 JP Z,$704A     ; }
; Else "9" was pressed which is "RETURN TO BASIC".
 $6EF4 LD HL,$6F03    ; {#HTML(Delete the game code and jump to
 $6EF7 LD DE,$6F04    ; <a rel="noopener nofollow" href="https://skoolkit.ca/disassemblies/rom/hex/asm/0066.html">RESET</a>.)
 $6EFA LD BC,$90FC    ;
 $6EFD LDIR           ;
 $6EFF JP $0064       ; }

; Control Method
;
; Will contain the following:
; #TABLE(default,centre,centre)
; { =h Byte | =h Meaning }
; { #N$01 | User-Defined Keys }
; { #N$02 | Kempston Joystick }
; { #N$03 | Cursor Keys/ Joystick }
; { #N$04 | Interface II Joystick }
; { #N$05 | Keyboard }
; TABLE#
@label=ControlMethod
g$6F02 DEFB $05

; Title Screen: Define Keys Selected
;
; Used by the routine at #R$6E9D.
@label=TitleScreen_DefineKeysSelected
c$6F03 CALL $6F77    ; Call #R$6F77.
 $6F06 LD A,$01      ; #REGa=#N$01.
 $6F08 CALL $6F7B    ; Call #R$6F7B.
 $6F0B CALL $6F9A    ; Call #R$6F9A.
 $6F0E JR $6F3F      ; Jump to #R$6F3F.

; Title Screen: Kempston Selected
;
; Used by the routine at #R$6E9D.
@label=TitleScreen_KempstonSelected
c$6F10 CALL $6F77    ; Call #R$6F77.
 $6F13 LD A,$02      ; #REGa=#N$02.
 $6F15 CALL $6F7B    ; Call #R$6F7B.
 $6F18 LD A,$06      ; {Write #N$06 to *#R$913E.
 $6F1A LD ($913E),A  ; }
 $6F1D JR $6EC7      ; Jump to #R$6EC7.

; Title Screen: Cursor Selected
;
; Used by the routine at #R$6E9D.
@label=TitleScreen_CursorSelected
c$6F1F CALL $6F77    ; Call #R$6F77.
 $6F22 LD A,$03      ; #REGa=#N$03.
 $6F24 CALL $6F7B    ; Call #R$6F7B.
 $6F27 LD HL,$6F59   ; #REGhl=#R$6F59.
 $6F2A CALL $6F50    ; Call #R$6F50.
 $6F2D JR $6EC7      ; Jump to #R$6EC7.

; Title Screen: Sinclair IF2 Selected
;
; Used by the routine at #R$6E9D.
@label=TitleScreen_SinclairIF2Selected
c$6F2F CALL $6F77    ; Call #R$6F77.
 $6F32 LD A,$04      ; #REGa=#N$04.
 $6F34 CALL $6F7B    ; Call #R$6F7B.
 $6F37 LD HL,$6F63   ; #REGhl=#R$6F63.
 $6F3A CALL $6F50    ; Call #R$6F50.
 $6F3D JR $6EC7      ; Jump to #R$6EC7.

; Title Screen: Keyboard Selected
;
; Used by the routines at #R$6E9D and #R$6F03.
@label=TitleScreen_KeyboardSelected
c$6F3F CALL $6F77    ; Call #R$6F77.
 $6F42 LD A,$05      ; #REGa=#N$05.
 $6F44 CALL $6F7B    ; Call #R$6F7B.
 $6F47 LD HL,$6F6D   ; #REGhl=#R$6F6D.
 $6F4A CALL $6F50    ; Call #R$6F50.
 $6F4D JP $6EC7      ; Jump to #R$6EC7.

; Copy Keymap To Defined Keys
;
; Used by the routines at #R$6F1F, #R$6F2F and #R$6F3F.
;
; HL Source address of keymaps to copy
@label=SetDefinedKeys
c$6F50 LD DE,$913E   ; {Copy the source keymap to #R$913E.
 $6F53 LD BC,$000A   ;
 $6F56 LDIR          ;
 $6F58 RET           ; }

; Cursor Keys Keymap
;
; Used by the routine at #R$6F1F.
@label=CursorKeysKeymap
g$6F59 DEFB $35,$03
 $6F5B DEFB $38,$04
 $6F5D DEFB $36,$01
 $6F5F DEFB $37,$02
 $6F61 DEFB $30,$00

; Sinclair Interface 2 Keymap
;
; Used by the routine at #R$6F2F.
@label=SinclairIF2Keymap
g$6F63 DEFB $36,$03
 $6F65 DEFB $37,$04
 $6F67 DEFB $38,$01
 $6F69 DEFB $39,$02
 $6F6B DEFB $30,$00

; Game status buffer entry at 6F6D
;
; Used by the routine at #R$6F3F.
@label=KeyboardKeymap
g$6F6D DEFB $35,$03
 $6F6F DEFB $38,$04
 $6F71 DEFB $36,$01
 $6F73 DEFB $37,$02
 $6F75 DEFB $30,$00

; Clear Active Menu Item
;
; Used by the routines at #R$6F03, #R$6F10, #R$6F1F, #R$6F2F and #R$6F3F.
@label=ClearActiveMenuItem
c$6F77 LD C,$07      ; #REGc=#INK$07.
 $6F79 JR $6F80      ; Jump to #R$6F80.

; Highlight Menu Line
;
; Used by the routines at #R$6E9D, #R$6F03, #R$6F10, #R$6F1F, #R$6F2F and
; #R$6F3F.
;
; A The active menu item number
@label=HighlightMenuLine
c$6F7B LD C,$03      ; #REGc=#INK$03.
 $6F7D LD ($6F02),A  ; Write #REGa to *#R$6F02.
; This entry point is used by the routine at #R$6F77.
@label=SetActiveMenuItem
*$6F80 LD A,($6F02)  ; Fetch *#R$6F02.
; Locate the desired line for highlighting.
 $6F83 LD HL,$58EB   ; #REGhl=#N$58EB (attribute buffer location).
 $6F86 LD DE,$0020   ; #REGde=#N$20 (one line).
; Keep moving down one line in relation to the active menu number.
@label=FindMenuLine
*$6F89 ADD HL,DE     ; #REGhl+=#REGde.
 $6F8A DEC A         ; {Decrease #REGa by one and jump back to #R$6F89 until
 $6F8B JR NZ,$6F89   ; the correct line is referenced.}
; Highlight the line.
 $6F8D LD B,$12      ; Set a counter of #N$12 (the maximum number of characters
                     ; on any line).
@label=HighlightMenuLine_Loop
*$6F8F LD (HL),C     ; Write the attribute byte to the currently referenced
                     ; attribute buffer location.
 $6F90 INC HL        ; Increment the referenced attribute buffer location by
                     ; one.
 $6F91 DJNZ $6F8F    ; Decrease the counter by one and loop back to #R$6F8F
                     ; until the whole line is highlighted.
 $6F93 RET           ; Return.

; Start Game
;
; Used by the routine at #R$6E9D.
@label=StartGame
c$6F94 CALL $8CF0    ; Call #R$8CF0.
 $6F97 JP $729A      ; Jump to #R$729A.

; Collect User-Defined Keys
;
; Used by the routine at #R$6F03.
@label=CollectUserDefinedKeys
c$6F9A LD A,$01       ; {Write #N$01 to *#R$7049.
 $6F9C LD ($7049),A   ; }
 $6F9F LD HL,$6F6D    ; #REGhl=#R$6F6D.
 $6FA2 LD B,$05       ; #REGb=#N$05.
*$6FA4 LD (HL),$00    ; Write #N$00 to *#REGhl.
 $6FA6 INC HL         ; {Increment #REGhl by two.
 $6FA7 INC HL         ; }
 $6FA8 DJNZ $6FA4     ; Decrease counter by one and loop back to #R$6FA4 until
                      ; counter is zero.
*$6FAA CALL $028E     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/028E.html">KEY_SCAN</a>.)
 $6FAD INC E          ; Increment #REGe by one.
 $6FAE JR NZ,$6FAA    ; Jump to #R$6FAA until #REGe is zero.
 $6FB0 XOR A          ; {#HTML(Write #N$00 to <a
 $6FB1 LD ($5C08),A   ; href="https://skoolkid.github.io/rom/asm/5C08.html">LAST-K</a>
                      ; (last key pressed).)}
*$6FB4 LD C,$05       ; #REGc=#N$05.
 $6FB6 CALL $7035     ; Call #R$7035.
*$6FB9 CALL $02BF     ; #HTML(Call <a
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/02BF.html">KEYBOARD</a>.)
 $6FBC BIT 5,(IY+$01) ; Test bit 5 of *#REGix+#N$01.
 $6FC0 JR Z,$6FB9     ; Jump to #R$6FB9 if {} is zero.
 $6FC2 LD A,($5C08)   ; #HTML(#REGa=*<a
                      ; href="https://skoolkid.github.io/rom/asm/5C08.html">LAST-K</a>
                      ; (last key pressed).)
 $6FC5 CP $0D         ; {Jump to #R$6FDD if #REGa is equal to #N$0D.
 $6FC7 JR Z,$6FDD     ; }
 $6FC9 CP $20         ; {Jump to #R$6FDD if #REGa is equal to #N$20.
 $6FCB JR Z,$6FDD     ; }
 $6FCD CP $30         ; {Jump to #R$6FB9 if #REGa is lower than #N$30.
 $6FCF JR C,$6FB9     ; }
 $6FD1 CP $5B         ; {Jump to #R$6FB9 if #REGa is higher than #N$5B.
 $6FD3 JR NC,$6FB9    ; }
 $6FD5 CP $41         ; {Jump to #R$6FDD if #REGa is higher than #N$41.
 $6FD7 JR NC,$6FDD    ; }
 $6FD9 CP $3A         ; {Jump to #R$6FB9 if #REGa is higher than #N$3A.
 $6FDB JR NC,$6FB9    ; }
*$6FDD LD HL,$6F6D    ; #REGhl=#R$6F6D.
 $6FE0 LD D,A         ; #REGd=#REGa.
 $6FE1 LD B,$05       ; #REGb=#N$05.
*$6FE3 LD A,(HL)      ; {Jump to #R$6FB9 if *#REGhl is equal to #REGd.
 $6FE4 CP D           ;
 $6FE5 JR Z,$6FB9     ; }
 $6FE7 INC HL         ; {Increment #REGhl by two.
 $6FE8 INC HL         ; }
 $6FE9 DJNZ $6FE3     ; Decrease counter by one and loop back to #R$6FE3 until
                      ; counter is zero.
 $6FEB LD A,($7049)   ; {#REGb=*#R$7049.
 $6FEE LD B,A         ; }
 $6FEF LD HL,$6F6B    ; #REGhl=#R$6F6B.
*$6FF2 INC HL         ; {Increment #REGhl by two.
 $6FF3 INC HL         ; }
 $6FF4 DJNZ $6FF2     ; Decrease counter by one and loop back to #R$6FF2 until
                      ; counter is zero.
 $6FF6 LD (HL),D      ; Write #REGd to *#REGhl.
 $6FF7 PUSH DE        ; Stash #REGde on the stack.
 $6FF8 LD B,A         ; #REGb=#REGa.
 $6FF9 LD A,$18       ; #REGa=#N$18.
 $6FFB SUB B          ; #REGa-=#REGb.
 $6FFC LD B,A         ; #REGb=#REGa.
 $6FFD LD C,$0B       ; #REGc=#N$0B.
 $6FFF CALL $0DE2     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0DD9.html#0DE2">#N$0DE2</a>
                      ; (CL_SET).)
 $7002 POP DE         ; Restore #REGde from the stack.
 $7003 LD A,D         ; #REGa=#REGd.
 $7004 CP $0D         ; {Jump to #R$702D if #REGa is equal to #N$0D.
 $7006 JR Z,$702D     ; }
 $7008 CP $20         ; {Jump to #R$7025 if #REGa is equal to #N$20.
 $700A JR Z,$7025     ; }
 $700C RST $10        ;
*$700D LD B,$04       ; #REGb=#N$04.
*$700F LD A,$20       ; #REGa=#N$20.
 $7011 RST $10        ;
 $7012 DJNZ $700F     ; Decrease counter by one and loop back to #R$700F until
                      ; counter is zero.
 $7014 LD C,$07       ; #REGc=#N$07.
 $7016 CALL $7035     ; Call #R$7035.
 $7019 LD A,($7049)   ; #REGa=*#R$7049.
 $701C INC A          ; Increment #REGa by one.
 $701D LD ($7049),A   ; Write #REGa to *#R$7049.
 $7020 CP $06         ; {Jump to #R$6FB4 if #REGa is not equal to #N$06.
 $7022 JR NZ,$6FB4    ; }
 $7024 RET            ; Return.
*$7025 LD HL,$7A41    ; #REGhl=#R$7A41.
 $7028 CALL $187D     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1855.html#187D">OUT_LINE2</a>.)
 $702B JR $700D       ; Jump to #R$700D.
*$702D LD HL,$7A47    ; #REGhl=#R$7A47.
 $7030 CALL $187D     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1855.html#187D">OUT_LINE2</a>.)
 $7033 JR $700D       ; Jump to #R$700D.
*$7035 LD HL,$580B    ; #REGhl=#N$580B (attribute buffer location).
 $7038 LD DE,$0020    ; #REGde=#N($0020,$04,$04).
 $703B LD A,($7049)   ; #REGa=*#R$7049.
*$703E ADD HL,DE      ; #REGhl+=#REGde.
 $703F DEC A          ; Decrease #REGa by one.
 $7040 JR NZ,$703E    ; Jump to #R$703E until #REGa is zero.
 $7042 LD B,$14       ; #REGb=#N$14.
*$7044 LD (HL),C      ; Write #REGc to *#REGhl.
 $7045 INC HL         ; Increment #REGhl by one.
 $7046 DJNZ $7044     ; Decrease counter by one and loop back to #R$7044 until
                      ; counter is zero.
 $7048 RET            ; Return.
 $7049 DEFB $00       ;

; Display Winners List Page
;
; #PUSHS #POKES$5C36,$C9;$5C37,$F3 #UDGTABLE(default,centre)
; { #SIM(start=$704A,stop=$7066)#SCR$02(winners-list) }
; UDGTABLE# #POPS
; Used by the routines at #R$6ECC and #R$729A.
@label=DisplayWinnersListPage
c$704A LD A,$07       ; {#HTML(Write #INK$07 to *<a rel="noopener nofollow"
 $704C LD ($5C8D),A   ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8D.html">ATTR_P</a>.)
                      ; }
 $704F CALL $0DAF     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0DAF.html">CL_ALL</a>.)
 $7052 LD HL,$0000    ; {Copy #N$1B00 bytes of data from the Spectrum ROM
 $7055 LD DE,$4000    ; (literally from #N($0000,$04,$04) to the screen.
 $7058 LD BC,$1B00    ;
 $705B LDIR           ; }
 $705D LD DE,$7073    ; #REGde=#R$7073.
 $7060 LD BC,$0227    ;
 $7063 CALL $203C     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1FFC.html#203C">PR_STRING</a>.)
 $7066 RES 5,(IY+$01) ;
 $706A LD BC,$0000    ; #REGbc=#N($0000,$04,$04).
 $706D CALL $1F3D     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1F3A.html#1F3D">PAUSE_1</a>.)
 $7070 JP $6E9D       ; Jump to #R$6E9D.

; Messaging: Winners List
;
; Used by the routine at #R$704A.
@label=Messaging_WinnersList
t$7073 DEFB $16,$01,$01                  ; PRINT AT: #N(#PEEK(#PC+$01)),
                                         ; #N(#PEEK(#PC+$02)).
 $7076 DEFM " The best poker faces are " ; "#STR(#PC,$04,$1A)".
 $7090 DEFB $16,$02,$01                  ; PRINT AT: #N(#PEEK(#PC+$01)),
                                         ; #N(#PEEK(#PC+$02)).
 $7093 DEFM "                          " ; "#STR(#PC,$04,$1A)".
 $70AD DEFB $16,$03,$01                  ; PRINT AT: #N(#PEEK(#PC+$01)),
                                         ; #N(#PEEK(#PC+$02)).
 $70B0 DEFM " 1) We have more to bid   " ; "#STR(#PC,$04,$1A)".
 $70CA DEFB $16,$04,$01                  ; PRINT AT: #N(#PEEK(#PC+$01)),
                                         ; #N(#PEEK(#PC+$02)).
 $70CD DEFM " 2) than byte and bit     " ; "#STR(#PC,$04,$1A)".
 $70E7 DEFB $16,$05,$01                  ; PRINT AT: #N(#PEEK(#PC+$01)),
                                         ; #N(#PEEK(#PC+$02)).
 $70EA DEFM " 3) Order our info        " ; "#STR(#PC,$04,$1A)".
 $7104 DEFB $16,$06,$01                  ; PRINT AT: #N(#PEEK(#PC+$01)),
                                         ; #N(#PEEK(#PC+$02)).
 $7107 DEFM " 4) about                 " ; "#STR(#PC,$04,$1A)".
 $7121 DEFB $16,$07,$01                  ; PRINT AT: #N(#PEEK(#PC+$01)),
                                         ; #N(#PEEK(#PC+$02)).
 $7124 DEFM "                          " ; "#STR(#PC,$04,$1A)".
 $713E DEFB $16,$09,$03                  ; PRINT AT: #N(#PEEK(#PC+$01)),
                                         ; #N(#PEEK(#PC+$02)).
 $7141 DEFM "                          " ; "#STR(#PC,$04,$1A)".
 $715B DEFB $16,$0A,$03                  ; PRINT AT: #N(#PEEK(#PC+$01)),
                                         ; #N(#PEEK(#PC+$02)).
 $715E DEFM " 5) Beta Disk programs    " ; "#STR(#PC,$04,$1A)".
 $7178 DEFB $16,$0B,$03                  ; PRINT AT: #N(#PEEK(#PC+$01)),
                                         ; #N(#PEEK(#PC+$02)).
 $717B DEFM " 6) Extended ROMs         " ; "#STR(#PC,$04,$1A)".
 $7195 DEFB $16,$0C,$03                  ; PRINT AT: #N(#PEEK(#PC+$01)),
                                         ; #N(#PEEK(#PC+$02)).
 $7198 DEFM " 7) Hardware              " ; "#STR(#PC,$04,$1A)".
 $71B2 DEFB $16,$0D,$03                  ; PRINT AT: #N(#PEEK(#PC+$01)),
                                         ; #N(#PEEK(#PC+$02)).
 $71B5 DEFM " 8) and..and..and..       " ; "#STR(#PC,$04,$1A)".
 $71CF DEFB $16,$0E,$03                  ; PRINT AT: #N(#PEEK(#PC+$01)),
                                         ; #N(#PEEK(#PC+$02)).
 $71D2 DEFM "                          " ; "#STR(#PC,$04,$1A)".
 $71EC DEFB $16,$10,$05                  ; PRINT AT: #N(#PEEK(#PC+$01)),
                                         ; #N(#PEEK(#PC+$02)).
 $71EF DEFM "                          " ; "#STR(#PC,$04,$1A)".
 $7209 DEFB $16,$11,$05                  ; PRINT AT: #N(#PEEK(#PC+$01)),
                                         ; #N(#PEEK(#PC+$02)).
 $720C DEFM "   INDIVIDUAL  SOFTWARE   " ; "#STR(#PC,$04,$1A)".
 $7226 DEFB $16,$12,$05                  ; PRINT AT: #N(#PEEK(#PC+$01)),
                                         ; #N(#PEEK(#PC+$02)).
 $7229 DEFM "       West Germany       " ; "#STR(#PC,$04,$1A)".
 $7243 DEFB $16,$13,$05                  ; PRINT AT: #N(#PEEK(#PC+$01)),
                                         ; #N(#PEEK(#PC+$02)).
 $7246 DEFM "     4600 Dortmund 50     " ; "#STR(#PC,$04,$1A)".
 $7260 DEFB $16,$14,$05                  ; PRINT AT: #N(#PEEK(#PC+$01)),
                                         ; #N(#PEEK(#PC+$02)).
 $7263 DEFM "     Am Beilstueck 30     " ; "#STR(#PC,$04,$1A)".
 $727D DEFB $16,$15,$05                  ; PRINT AT: #N(#PEEK(#PC+$01)),
                                         ; #N(#PEEK(#PC+$02)).
 $7280 DEFM "                          " ; "#STR(#PC,$04,$1A)".

; Routine at 729A
;
; Used by the routine at #R$6F94.
;
; .
;
; Debounce the key press.
@label=Debounce_Loop
c$729A CALL $028E     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/028E.html">KEY_SCAN</a>.)
; Handle if no keys are being pressed, for reference:
; .
; #HTML(<blockquote>In all instances the #REGe register is returned with
; a value in the range of +#N$00 to +#N$27, the value being different for each
; of the forty keys of the keyboard, or the value +#N$FF, for no-key.</blockquote>)
 $729D INC E          ; Set the zero flag if no keys have been pressed.
 $729E JR NZ,$729A    ; Jump to #R$729A unless no keys are being pressed.
 $72A0 LD A,($98E3)   ; #REGa=*#R$98E3.
 $72A3 LD B,$08       ; Set a counter of #N$08.
 $72A5 LD HL,$7368    ; #REGhl=#R$7368.
 $72A8 LD D,A         ; Copy *#R$98E3 into #REGd.
*$72A9 LD A,(HL)      ; {Jump to #R$72B5 if *#REGhl is lower than #REGd.
 $72AA CP D           ;
 $72AB JR C,$72B5     ; }
 $72AD INC HL         ; {Increment #REGhl by three.
 $72AE INC HL         ;
 $72AF INC HL         ; }
 $72B0 DJNZ $72A9     ; Decrease counter by one and loop back to #R$72A9 until
                      ; counter is zero.
 $72B2 JP $6E9D       ; Jump to #R$6E9D.
*$72B5 PUSH BC        ; {Stash #REGbc and #REGhl on the stack.
 $72B6 PUSH HL        ; }
 $72B7 LD HL,$7399    ; #REGhl=#R$7399.
 $72BA CALL $187D     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1855.html#187D">OUT_LINE2</a>.)
 $72BD LD HL,$7383    ; #REGhl=#R$7383.
 $72C0 LD B,$16       ; Set a counter of #N$16 which is the maximum length of
                      ; the name entry buffer.
@label=Clear_NameEntryBuffer_Loop
*$72C2 LD (HL),$20    ; Write an ASCII "SPACE" (#N$20) to *#REGhl.
 $72C4 INC HL         ; Increment #REGhl by one.
 $72C5 DJNZ $72C2     ; Decrease counter by one and loop back to #R$72C2 until
                      ; counter is zero.
 $72C7 XOR A          ; {Write #N$00 to *#R$7336.
 $72C8 LD ($7336),A   ; }
 $72CB LD HL,$7383    ; #REGhl=#R$7383.
 $72CE LD B,$0D       ; #REGb=#N$0D.
*$72D0 PUSH BC        ; {Stash #REGbc and #REGhl on the stack.
 $72D1 PUSH HL        ; }
*$72D2 RES 5,(IY+$01) ; Reset bit 5 of *#REGix+#N$01.
 $72D6 CALL $02BF     ; #HTML(Call <a
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/02BF.html">KEYBOARD</a>.)
 $72D9 BIT 5,(IY+$01) ; Test bit 5 of *#REGix+#N$01.
 $72DD JR Z,$72D2     ; Jump to #R$72D2 if {} is zero.
 $72DF LD A,($5C08)   ; {#HTML(Jump to #R$7337 if *<a
 $72E2 CP $0D         ; href="https://skoolkid.github.io/rom/asm/5C08.html">LAST-K</a>
 $72E4 JR Z,$7337     ; (last key pressed) is equal to #N$0D.)}
 $72E6 CP $0C         ; {#HTML(Jump to #R$7310 if *<a
 $72E8 JR Z,$7310     ; href="https://skoolkid.github.io/rom/asm/5C08.html">LAST-K</a>
                      ; (last key pressed) is equal to #N$0C.)}
 $72EA LD B,A         ; #REGb=#REGa.
 $72EB LD A,($7336)   ; {Jump to #R$72D2 if *#R$7336 is not zero.
 $72EE OR A           ;
 $72EF JR NZ,$72D2    ; }
 $72F1 LD A,B         ; {Jump to #R$72D2 if #REGb is lower than #N$20.
 $72F2 CP $20         ;
 $72F4 JR C,$72D2     ; }
 $72F6 CP $7B         ; {Jump to #R$72D2 if #REGb is higher than #N$7B.
 $72F8 JR NC,$72D2    ; }
 $72FA POP HL         ; Restore #REGhl from the stack.
 $72FB PUSH HL        ; Stash #REGhl on the stack.
 $72FC LD (HL),A      ; Write #REGa to *#REGhl.
 $72FD RST $10        ;
; Handle if no keys are being pressed, for reference:
; .
; #HTML(<blockquote>In all instances the #REGe register is returned with
; a value in the range of +#N$00 to +#N$27, the value being different for each
; of the forty keys of the keyboard, or the value +#N$FF, for no-key.</blockquote>)
*$72FE CALL $028E     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/028E.html">KEY_SCAN</a>.)
 $7301 INC E          ; Set the zero flag if no keys have been pressed.
 $7302 JR NZ,$72FE    ; Jump to #R$72FE unless no keys are being pressed.
 $7304 POP HL         ; {Restore #REGhl and #REGbc from the stack.
 $7305 POP BC         ; }
 $7306 INC HL         ; Increment #REGhl by one.
 $7307 DJNZ $72D0     ; Decrease counter by one and loop back to #R$72D0 until
                      ; counter is zero.
 $7309 LD A,$01       ; {Write #N$01 to *#R$7336.
 $730B LD ($7336),A   ; }
 $730E JR $72D0       ; Jump to #R$72D0.
*$7310 POP HL         ; {Restore #REGhl and #REGbc from the stack.
 $7311 POP BC         ; }
 $7312 XOR A          ; {Write #N$00 to *#R$7336.
 $7313 LD ($7336),A   ; }
 $7316 LD A,B         ; {Jump to #R$72D0 if #REGb is equal to #N$0D.
 $7317 CP $0D         ;
 $7319 JR Z,$72D0     ; }
 $731B DEC HL         ; Decrease #REGhl by one.
 $731C LD (HL),$20    ; Write #N$20 to *#REGhl.
 $731E LD A,$08       ; {Backspace.
 $7320 RST $10        ; }
 $7321 LD A,$20       ; {Print "SPACE".
 $7323 RST $10        ; }
 $7324 LD A,$08       ; {Backspace.
 $7326 RST $10        ; }
 $7327 INC B          ; Increment #REGb by one.
 $7328 PUSH BC        ; {Stash #REGbc and #REGhl on the stack.
 $7329 PUSH HL        ; }
 $732A RES 5,(IY+$01) ; Reset bit 5 of *#REGix+#N$01.
 $732E LD BC,$0000    ; #REGbc=#N($0000,$04,$04).
 $7331 CALL $1F3D     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1F3A.html#1F3D">PAUSE_1</a>.)
 $7334 JR $72D2       ; Jump to #R$72D2.
 $7336 DEFB $00       ;
*$7337 POP HL         ; {Restore #REGhl, #REGbc, #REGhl and #REGbc from the
 $7338 POP BC         ; stack.
 $7339 POP HL         ;
 $733A POP BC         ; }
 $733B LD E,B         ; #REGe=#REGb.
*$733C LD A,(HL)      ; #REGa=*#REGhl.
 $733D LD (HL),D      ; Write #REGd to *#REGhl.
 $733E INC HL         ; {Increment #REGhl by three.
 $733F INC HL         ;
 $7340 INC HL         ; }
 $7341 LD D,A         ; #REGd=#REGa.
 $7342 DJNZ $733C     ; Decrease counter by one and loop back to #R$733C until
                      ; counter is zero.
 $7344 LD A,E         ; #REGa=#REGe.
 $7345 LD IX,$7382    ; #REGix=#R$7381(#N$7382).
*$7349 LD H,(IX+$00)  ; #REGh=*#REGix+#N$00.
 $734C LD L,(IX-$01)  ; #REGl=*#REGix-#N$01.
 $734F LD D,(IX-$03)  ; #REGd=*#REGix-#N$03.
 $7352 LD E,(IX-$04)  ; #REGe=*#REGix-#N$04.
 $7355 LD B,$16       ; #REGb=#N$16.
 $7357 PUSH AF        ; Stash #REGaf on the stack.
 $7358 CALL $343E     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/343C.html#343E">SWAP_BYTE</a>.)
 $735B DEC IX         ; {Decrease #REGix by three.
 $735D DEC IX         ;
 $735F DEC IX         ; }
 $7361 POP AF         ; Restore #REGaf from the stack.
 $7362 DEC A          ; Decrease #REGa by one.
 $7363 JR NZ,$7349    ; Jump to #R$7349 until #REGa is zero.
 $7365 JP $704A       ; Jump to #R$704A.

; Data block at 7368
b$7368 DEFB $09
 $7369 DEFW $70B4
 $736B DEFB $08
 $736C DEFW $70D1
 $736E DEFB $07
 $736F DEFW $70EE
 $7371 DEFB $06
 $7372 DEFW $710B
 $7374 DEFB $05
 $7375 DEFW $7162
 $7377 DEFB $04
 $7378 DEFW $717F
 $737A DEFB $03
 $737B DEFW $719C
 $737D DEFB $02
 $737E DEFW $71B9
 $7380 DEFB $00

; Name Entry Buffer Pointer
@label=Reference_NameEntry
g$7381 DEFW $7383

; Name Entry Buffer
@label=Buffer_NameEntry
t$7383 DEFM "                      "

; Messaging: Your Name
@label=Messaging_YourName
t$7399 DEFB $16,$12,$01       ; PRINT AT: #N(#PEEK(#PC+$01)),
                              ; #N(#PEEK(#PC+$02)).
 $739C DEFM " YOUR NAME :   " ; {"#STR(#PC,$04,$1E)".
 $73AB DEFM "               " ; }
 $73BA DEFB $16,$12,$0F       ; PRINT AT: #N(#PEEK(#PC+$01)),
                              ; #N(#PEEK(#PC+$02)).
 $73BD DEFB $0D               ; Print "ENTER".

; Display Information Pages
;
; #PUSHS #POKES$5C36,$C9;$5C37,$F3 #UDGTABLE(default,centre)
; { #SIM(start=$73BE,stop=$73D7)#SCR$02(information-screen-1) |
;   #SIM(start=$73E1,stop=$73ED)#SCR$02(information-screen-2) }
; UDGTABLE# #POPS
; Used by the routine at #R$6ECC.
@label=DisplayInformationPages
c$73BE LD A,$07       ; {#HTML(Write #INK$07 to *<a rel="noopener nofollow"
 $73C0 LD ($5C48),A   ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C48.html">BORDCR</a>
 $73C3 LD ($5C8D),A   ; and *<a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8D.html">ATTR_P</a>.)
                      ; }
 $73C6 LD A,$00       ; {#HTML(Set the border to #INK$00 using <a rel="noopener
 $73C8 CALL $229B     ; nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/2294.html#229b">BORDER</a>.)
                      ; }
 $73CB CALL $0DAF     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0DAF.html">CL_ALL</a>.)
 $73CE LD DE,$73FA    ; #REGde=#R$73FA.
 $73D1 LD BC,$0283    ; #REGbc=#N$0283.
 $73D4 CALL $203C     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1FFC.html#203C">PR_STRING</a>.)
 $73D7 RES 5,(IY+$01) ;
 $73DB LD BC,$0000    ; #REGbc=#N($0000,$04,$04).
 $73DE CALL $1F3D     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1F3A.html#1F3D">PAUSE_1</a>.)
 $73E1 CALL $0DAF     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0DAF.html">CL_ALL</a>.)
 $73E4 LD DE,$767D    ; #REGde=#R$767D.
 $73E7 LD BC,$0122    ; #REGbc=#N$0122.
 $73EA CALL $203C     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1FFC.html#203C">PR_STRING</a>.)
 $73ED RES 5,(IY+$01) ;
 $73F1 LD BC,$0000    ; #REGbc=#N($0000,$04,$04).
 $73F4 CALL $1F3D     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1F3A.html#1F3D">PAUSE_1</a>.)
 $73F7 JP $6E9D       ; Jump to #R$6E9D.

; Messaging: Information Page 1
;
; Used by the routine at #R$73BE.
@label=Messaging_InformationPage1
t$73FA DEFB $16,$08,$01                        ; PRINT AT: #N(#PEEK(#PC+$01)),
                                               ; #N(#PEEK(#PC+$02)).
 $73FD DEFB $10,$06                            ; Set INK: #INK(#PEEK(#PC+$01)).
 $73FF DEFB $11,$00                            ; Set PAPER:
                                               ; #INK(#PEEK(#PC+$01)).
 $7401 DEFM "Copyright 1988 Players Sofware"   ; "#STR(#PC,$04,$1E)".
 $741F DEFB $16,$03,$08                        ; PRINT AT: #N(#PEEK(#PC+$01)),
                                               ; #N(#PEEK(#PC+$02)).
 $7422 DEFB $10,$06                            ; Set INK: #INK(#PEEK(#PC+$01)).
 $7424 DEFB $11,$00                            ; Set PAPER:
                                               ; #INK(#PEEK(#PC+$01)).
 $7426 DEFB $13,$01                            ; BRIGHT:
                                               ; #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $7428 DEFM "HOLLYWOOD POKER"                  ; "#STR(#PC,$04,$0F)".
 $7437 DEFB $16,$0A,$03                        ; PRINT AT: #N(#PEEK(#PC+$01)),
                                               ; #N(#PEEK(#PC+$02)).
 $743A DEFB $10,$04                            ; Set INK: #INK(#PEEK(#PC+$01)).
 $743C DEFB $11,$00                            ; Set PAPER:
                                               ; #INK(#PEEK(#PC+$01)).
 $743E DEFB $13,$01                            ; BRIGHT:
                                               ; #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $7440 DEFM "Licensed from Golden Games"       ; "#STR(#PC,$04,$1A)".
 $745A DEFB $16,$11,$00                        ; PRINT AT: #N(#PEEK(#PC+$01)),
                                               ; #N(#PEEK(#PC+$02)).
 $745D DEFB $10,$03                            ; Set INK: #INK(#PEEK(#PC+$01)).
 $745F DEFB $11,$00                            ; Set PAPER:
                                               ; #INK(#PEEK(#PC+$01)).
 $7461 DEFB $13,$01                            ; BRIGHT:
                                               ; #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $7463 DEFM "Refer to the cassette inlay card" ; "#STR(#PC,$04,$20)".
 $7483 DEFB $16,$13,$05                        ; PRINT AT: #N(#PEEK(#PC+$01)),
                                               ; #N(#PEEK(#PC+$02)).
 $7486 DEFB $10,$03                            ; Set INK: #INK(#PEEK(#PC+$01)).
 $7488 DEFB $11,$00                            ; Set PAPER:
                                               ; #INK(#PEEK(#PC+$01)).
 $748A DEFB $13,$01                            ; BRIGHT:
                                               ; #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $748C DEFM "for full instructions     "       ; "#STR(#PC,$04,$1A)".
 $74A6 DEFB $08                                ; BACKSPACE.
 $74A7 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74A8 DEFB $08                                ; BACKSPACE.
 $74A9 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74AA DEFB $08                                ; BACKSPACE.
 $74AB DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74AC DEFB $08                                ; BACKSPACE.
 $74AD DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74AE DEFB $08                                ; BACKSPACE.
 $74AF DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74B0 DEFB $08                                ; BACKSPACE.
 $74B1 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74B2 DEFB $08                                ; BACKSPACE.
 $74B3 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74B4 DEFB $08                                ; BACKSPACE.
 $74B5 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74B6 DEFB $08                                ; BACKSPACE.
 $74B7 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74B8 DEFB $08                                ; BACKSPACE.
 $74B9 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74BA DEFB $08                                ; BACKSPACE.
 $74BB DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74BC DEFB $08                                ; BACKSPACE.
 $74BD DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74BE DEFB $08                                ; BACKSPACE.
 $74BF DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74C0 DEFB $08                                ; BACKSPACE.
 $74C1 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74C2 DEFB $08                                ; BACKSPACE.
 $74C3 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74C4 DEFB $08                                ; BACKSPACE.
 $74C5 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74C6 DEFB $08                                ; BACKSPACE.
 $74C7 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74C8 DEFB $08                                ; BACKSPACE.
 $74C9 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74CA DEFB $08                                ; BACKSPACE.
 $74CB DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74CC DEFB $08                                ; BACKSPACE.
 $74CD DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74CE DEFB $08                                ; BACKSPACE.
 $74CF DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74D0 DEFB $08                                ; BACKSPACE.
 $74D1 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74D2 DEFB $08                                ; BACKSPACE.
 $74D3 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74D4 DEFB $08                                ; BACKSPACE.
 $74D5 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74D6 DEFB $08                                ; BACKSPACE.
 $74D7 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74D8 DEFB $08                                ; BACKSPACE.
 $74D9 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74DA DEFB $08                                ; BACKSPACE.
 $74DB DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74DC DEFB $08                                ; BACKSPACE.
 $74DD DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74DE DEFB $08                                ; BACKSPACE.
 $74DF DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74E0 DEFB $08                                ; BACKSPACE.
 $74E1 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74E2 DEFB $08                                ; BACKSPACE.
 $74E3 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74E4 DEFB $08                                ; BACKSPACE.
 $74E5 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74E6 DEFB $08                                ; BACKSPACE.
 $74E7 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74E8 DEFB $08                                ; BACKSPACE.
 $74E9 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74EA DEFB $08                                ; BACKSPACE.
 $74EB DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74EC DEFB $08                                ; BACKSPACE.
 $74ED DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74EE DEFB $08                                ; BACKSPACE.
 $74EF DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74F0 DEFB $08                                ; BACKSPACE.
 $74F1 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74F2 DEFB $08                                ; BACKSPACE.
 $74F3 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74F4 DEFB $08                                ; BACKSPACE.
 $74F5 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74F6 DEFB $08                                ; BACKSPACE.
 $74F7 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74F8 DEFB $08                                ; BACKSPACE.
 $74F9 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74FA DEFB $08                                ; BACKSPACE.
 $74FB DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74FC DEFB $08                                ; BACKSPACE.
 $74FD DEFM " "                                ; "#STR(#PC,$04,$01)".
 $74FE DEFB $08                                ; BACKSPACE.
 $74FF DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7500 DEFB $08                                ; BACKSPACE.
 $7501 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7502 DEFB $08                                ; BACKSPACE.
 $7503 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7504 DEFB $08                                ; BACKSPACE.
 $7505 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7506 DEFB $08                                ; BACKSPACE.
 $7507 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7508 DEFB $08                                ; BACKSPACE.
 $7509 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $750A DEFB $08                                ; BACKSPACE.
 $750B DEFM " "                                ; "#STR(#PC,$04,$01)".
 $750C DEFB $08                                ; BACKSPACE.
 $750D DEFM " "                                ; "#STR(#PC,$04,$01)".
 $750E DEFB $08                                ; BACKSPACE.
 $750F DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7510 DEFB $08                                ; BACKSPACE.
 $7511 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7512 DEFB $08                                ; BACKSPACE.
 $7513 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7514 DEFB $08                                ; BACKSPACE.
 $7515 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7516 DEFB $08                                ; BACKSPACE.
 $7517 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7518 DEFB $08                                ; BACKSPACE.
 $7519 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $751A DEFB $08                                ; BACKSPACE.
 $751B DEFM " "                                ; "#STR(#PC,$04,$01)".
 $751C DEFB $08                                ; BACKSPACE.
 $751D DEFM " "                                ; "#STR(#PC,$04,$01)".
 $751E DEFB $08                                ; BACKSPACE.
 $751F DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7520 DEFB $08                                ; BACKSPACE.
 $7521 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7522 DEFB $08                                ; BACKSPACE.
 $7523 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7524 DEFB $08                                ; BACKSPACE.
 $7525 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7526 DEFB $08                                ; BACKSPACE.
 $7527 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7528 DEFB $08                                ; BACKSPACE.
 $7529 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $752A DEFB $08                                ; BACKSPACE.
 $752B DEFM " "                                ; "#STR(#PC,$04,$01)".
 $752C DEFB $08                                ; BACKSPACE.
 $752D DEFM " "                                ; "#STR(#PC,$04,$01)".
 $752E DEFB $08                                ; BACKSPACE.
 $752F DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7530 DEFB $08                                ; BACKSPACE.
 $7531 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7532 DEFB $08                                ; BACKSPACE.
 $7533 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7534 DEFB $08                                ; BACKSPACE.
 $7535 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7536 DEFB $08                                ; BACKSPACE.
 $7537 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7538 DEFB $08                                ; BACKSPACE.
 $7539 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $753A DEFB $08                                ; BACKSPACE.
 $753B DEFM " "                                ; "#STR(#PC,$04,$01)".
 $753C DEFB $08                                ; BACKSPACE.
 $753D DEFM " "                                ; "#STR(#PC,$04,$01)".
 $753E DEFB $08                                ; BACKSPACE.
 $753F DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7540 DEFB $08                                ; BACKSPACE.
 $7541 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7542 DEFB $08                                ; BACKSPACE.
 $7543 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7544 DEFB $08                                ; BACKSPACE.
 $7545 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7546 DEFB $08                                ; BACKSPACE.
 $7547 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7548 DEFB $08                                ; BACKSPACE.
 $7549 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $754A DEFB $08                                ; BACKSPACE.
 $754B DEFM " "                                ; "#STR(#PC,$04,$01)".
 $754C DEFB $08                                ; BACKSPACE.
 $754D DEFM " "                                ; "#STR(#PC,$04,$01)".
 $754E DEFB $08                                ; BACKSPACE.
 $754F DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7550 DEFB $08                                ; BACKSPACE.
 $7551 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7552 DEFB $08                                ; BACKSPACE.
 $7553 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7554 DEFB $08                                ; BACKSPACE.
 $7555 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7556 DEFB $08                                ; BACKSPACE.
 $7557 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7558 DEFB $08                                ; BACKSPACE.
 $7559 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $755A DEFB $08                                ; BACKSPACE.
 $755B DEFM " "                                ; "#STR(#PC,$04,$01)".
 $755C DEFB $08                                ; BACKSPACE.
 $755D DEFM " "                                ; "#STR(#PC,$04,$01)".
 $755E DEFB $08                                ; BACKSPACE.
 $755F DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7560 DEFB $08                                ; BACKSPACE.
 $7561 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7562 DEFB $08                                ; BACKSPACE.
 $7563 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7564 DEFB $08                                ; BACKSPACE.
 $7565 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7566 DEFB $08                                ; BACKSPACE.
 $7567 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7568 DEFB $08                                ; BACKSPACE.
 $7569 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $756A DEFB $08                                ; BACKSPACE.
 $756B DEFM " "                                ; "#STR(#PC,$04,$01)".
 $756C DEFB $08                                ; BACKSPACE.
 $756D DEFM " "                                ; "#STR(#PC,$04,$01)".
 $756E DEFB $08                                ; BACKSPACE.
 $756F DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7570 DEFB $08                                ; BACKSPACE.
 $7571 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7572 DEFB $08                                ; BACKSPACE.
 $7573 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7574 DEFB $08                                ; BACKSPACE.
 $7575 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7576 DEFB $08                                ; BACKSPACE.
 $7577 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7578 DEFB $08                                ; BACKSPACE.
 $7579 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $757A DEFB $08                                ; BACKSPACE.
 $757B DEFM " "                                ; "#STR(#PC,$04,$01)".
 $757C DEFB $08                                ; BACKSPACE.
 $757D DEFM " "                                ; "#STR(#PC,$04,$01)".
 $757E DEFB $08                                ; BACKSPACE.
 $757F DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7580 DEFB $08                                ; BACKSPACE.
 $7581 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7582 DEFB $08                                ; BACKSPACE.
 $7583 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7584 DEFB $08                                ; BACKSPACE.
 $7585 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7586 DEFB $08                                ; BACKSPACE.
 $7587 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7588 DEFB $08                                ; BACKSPACE.
 $7589 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $758A DEFB $08                                ; BACKSPACE.
 $758B DEFM " "                                ; "#STR(#PC,$04,$01)".
 $758C DEFB $08                                ; BACKSPACE.
 $758D DEFM " "                                ; "#STR(#PC,$04,$01)".
 $758E DEFB $08                                ; BACKSPACE.
 $758F DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7590 DEFB $08                                ; BACKSPACE.
 $7591 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7592 DEFB $08                                ; BACKSPACE.
 $7593 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7594 DEFB $08                                ; BACKSPACE.
 $7595 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7596 DEFB $08                                ; BACKSPACE.
 $7597 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7598 DEFB $08                                ; BACKSPACE.
 $7599 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $759A DEFB $08                                ; BACKSPACE.
 $759B DEFM " "                                ; "#STR(#PC,$04,$01)".
 $759C DEFB $08                                ; BACKSPACE.
 $759D DEFM " "                                ; "#STR(#PC,$04,$01)".
 $759E DEFB $08                                ; BACKSPACE.
 $759F DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75A0 DEFB $08                                ; BACKSPACE.
 $75A1 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75A2 DEFB $08                                ; BACKSPACE.
 $75A3 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75A4 DEFB $08                                ; BACKSPACE.
 $75A5 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75A6 DEFB $08                                ; BACKSPACE.
 $75A7 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75A8 DEFB $08                                ; BACKSPACE.
 $75A9 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75AA DEFB $08                                ; BACKSPACE.
 $75AB DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75AC DEFB $08                                ; BACKSPACE.
 $75AD DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75AE DEFB $08                                ; BACKSPACE.
 $75AF DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75B0 DEFB $08                                ; BACKSPACE.
 $75B1 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75B2 DEFB $08                                ; BACKSPACE.
 $75B3 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75B4 DEFB $08                                ; BACKSPACE.
 $75B5 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75B6 DEFB $08                                ; BACKSPACE.
 $75B7 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75B8 DEFB $08                                ; BACKSPACE.
 $75B9 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75BA DEFB $08                                ; BACKSPACE.
 $75BB DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75BC DEFB $08                                ; BACKSPACE.
 $75BD DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75BE DEFB $08                                ; BACKSPACE.
 $75BF DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75C0 DEFB $08                                ; BACKSPACE.
 $75C1 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75C2 DEFB $08                                ; BACKSPACE.
 $75C3 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75C4 DEFB $08                                ; BACKSPACE.
 $75C5 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75C6 DEFB $08                                ; BACKSPACE.
 $75C7 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75C8 DEFB $08                                ; BACKSPACE.
 $75C9 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75CA DEFB $08                                ; BACKSPACE.
 $75CB DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75CC DEFB $08                                ; BACKSPACE.
 $75CD DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75CE DEFB $08                                ; BACKSPACE.
 $75CF DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75D0 DEFB $08                                ; BACKSPACE.
 $75D1 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75D2 DEFB $08                                ; BACKSPACE.
 $75D3 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75D4 DEFB $08                                ; BACKSPACE.
 $75D5 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75D6 DEFB $08                                ; BACKSPACE.
 $75D7 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75D8 DEFB $08                                ; BACKSPACE.
 $75D9 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75DA DEFB $08                                ; BACKSPACE.
 $75DB DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75DC DEFB $08                                ; BACKSPACE.
 $75DD DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75DE DEFB $08                                ; BACKSPACE.
 $75DF DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75E0 DEFB $08                                ; BACKSPACE.
 $75E1 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75E2 DEFB $08                                ; BACKSPACE.
 $75E3 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75E4 DEFB $08                                ; BACKSPACE.
 $75E5 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75E6 DEFB $08                                ; BACKSPACE.
 $75E7 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75E8 DEFB $08                                ; BACKSPACE.
 $75E9 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75EA DEFB $08                                ; BACKSPACE.
 $75EB DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75EC DEFB $08                                ; BACKSPACE.
 $75ED DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75EE DEFB $08                                ; BACKSPACE.
 $75EF DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75F0 DEFB $08                                ; BACKSPACE.
 $75F1 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75F2 DEFB $08                                ; BACKSPACE.
 $75F3 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75F4 DEFB $08                                ; BACKSPACE.
 $75F5 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75F6 DEFB $08                                ; BACKSPACE.
 $75F7 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75F8 DEFB $08                                ; BACKSPACE.
 $75F9 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75FA DEFB $08                                ; BACKSPACE.
 $75FB DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75FC DEFB $08                                ; BACKSPACE.
 $75FD DEFM " "                                ; "#STR(#PC,$04,$01)".
 $75FE DEFB $08                                ; BACKSPACE.
 $75FF DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7600 DEFB $08                                ; BACKSPACE.
 $7601 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7602 DEFB $08                                ; BACKSPACE.
 $7603 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7604 DEFB $08                                ; BACKSPACE.
 $7605 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7606 DEFB $08                                ; BACKSPACE.
 $7607 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7608 DEFB $08                                ; BACKSPACE.
 $7609 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $760A DEFB $08                                ; BACKSPACE.
 $760B DEFM " "                                ; "#STR(#PC,$04,$01)".
 $760C DEFB $08                                ; BACKSPACE.
 $760D DEFM " "                                ; "#STR(#PC,$04,$01)".
 $760E DEFB $08                                ; BACKSPACE.
 $760F DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7610 DEFB $08                                ; BACKSPACE.
 $7611 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7612 DEFB $08                                ; BACKSPACE.
 $7613 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7614 DEFB $08                                ; BACKSPACE.
 $7615 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7616 DEFB $08                                ; BACKSPACE.
 $7617 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7618 DEFB $08                                ; BACKSPACE.
 $7619 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $761A DEFB $08                                ; BACKSPACE.
 $761B DEFM " "                                ; "#STR(#PC,$04,$01)".
 $761C DEFB $08                                ; BACKSPACE.
 $761D DEFM " "                                ; "#STR(#PC,$04,$01)".
 $761E DEFB $08                                ; BACKSPACE.
 $761F DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7620 DEFB $08                                ; BACKSPACE.
 $7621 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7622 DEFB $08                                ; BACKSPACE.
 $7623 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7624 DEFB $08                                ; BACKSPACE.
 $7625 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7626 DEFB $08                                ; BACKSPACE.
 $7627 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7628 DEFB $08                                ; BACKSPACE.
 $7629 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $762A DEFB $08                                ; BACKSPACE.
 $762B DEFM " "                                ; "#STR(#PC,$04,$01)".
 $762C DEFB $08                                ; BACKSPACE.
 $762D DEFM " "                                ; "#STR(#PC,$04,$01)".
 $762E DEFB $08                                ; BACKSPACE.
 $762F DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7630 DEFB $08                                ; BACKSPACE.
 $7631 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7632 DEFB $08                                ; BACKSPACE.
 $7633 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7634 DEFB $08                                ; BACKSPACE.
 $7635 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7636 DEFB $08                                ; BACKSPACE.
 $7637 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7638 DEFB $08                                ; BACKSPACE.
 $7639 DEFM " "                                ; "#STR(#PC,$04,$01)".
 $763A DEFB $08                                ; BACKSPACE.
 $763B DEFM " "                                ; "#STR(#PC,$04,$01)".
 $763C DEFB $08                                ; BACKSPACE.
 $763D DEFM " "                                ; "#STR(#PC,$04,$01)".
 $763E DEFB $08                                ; BACKSPACE.
 $763F DEFM " "                                ; "#STR(#PC,$04,$01)".
 $7640 DEFB $08                                ; BACKSPACE.
 $7641 DEFM $08                                ; "#STR(#PC,$04,$01)".
 $7642 DEFB $20                                ; BACKSPACE.
 $7643 DEFM $08                                ; "#STR(#PC,$04,$01)".
 $7644 DEFB $20                                ; BACKSPACE.
 $7645 DEFM $08                                ; "#STR(#PC,$04,$01)".
 $7646 DEFB $20                                ; BACKSPACE.
 $7647 DEFM $08                                ; "#STR(#PC,$04,$01)".
 $7648 DEFB $20                                ; BACKSPACE.
 $7649 DEFM $08                                ; "#STR(#PC,$04,$01)".
 $764A DEFB $20                                ; BACKSPACE.
 $764B DEFM $08                                ; "#STR(#PC,$04,$01)".
 $764C DEFB $20                                ; BACKSPACE.
 $764D DEFM $08                                ; "#STR(#PC,$04,$01)".
 $764E DEFB $20                                ; BACKSPACE.
 $764F DEFM $08                                ; "#STR(#PC,$04,$01)".
 $7650 DEFB $20                                ; BACKSPACE.
 $7651 DEFM $08                                ; "#STR(#PC,$04,$01)".
 $7652 DEFB $20                                ; BACKSPACE.
 $7653 DEFM $08                                ; "#STR(#PC,$04,$01)".
 $7654 DEFB $20                                ; BACKSPACE.
 $7655 DEFM $08                                ; "#STR(#PC,$04,$01)".
 $7656 DEFB $20                                ; BACKSPACE.
 $7657 DEFM $08                                ; "#STR(#PC,$04,$01)".
 $7658 DEFB $20                                ; BACKSPACE.
 $7659 DEFM $08                                ; "#STR(#PC,$04,$01)".
 $765A DEFB $20                                ; BACKSPACE.
 $765B DEFM $08                                ; "#STR(#PC,$04,$01)".
 $765C DEFB $20                                ; BACKSPACE.
 $765D DEFM $08                                ; "#STR(#PC,$04,$01)".
 $765E DEFB $20                                ; BACKSPACE.
 $765F DEFM $08                                ; "#STR(#PC,$04,$01)".
 $7660 DEFB $20                                ; BACKSPACE.
 $7661 DEFM $08                                ; "#STR(#PC,$04,$01)".
 $7662 DEFB $20                                ; BACKSPACE.
 $7663 DEFM $08                                ; "#STR(#PC,$04,$01)".
 $7664 DEFB $20                                ; BACKSPACE.
 $7665 DEFM $08                                ; "#STR(#PC,$04,$01)".
 $7666 DEFB $20                                ; BACKSPACE.
 $7667 DEFM $08                                ; "#STR(#PC,$04,$01)".
 $7668 DEFB $20                                ; BACKSPACE.
 $7669 DEFM $08                                ; "#STR(#PC,$04,$01)".
 $766A DEFB $20                                ; BACKSPACE.
 $766B DEFM $08                                ; "#STR(#PC,$04,$01)".
 $766C DEFB $20                                ; BACKSPACE.
 $766D DEFM $08                                ; "#STR(#PC,$04,$01)".
 $766E DEFB $20                                ; BACKSPACE.
 $766F DEFM $08                                ; "#STR(#PC,$04,$01)".
 $7670 DEFB $20                                ; BACKSPACE.
 $7671 DEFM $08                                ; "#STR(#PC,$04,$01)".
 $7672 DEFB $20                                ; BACKSPACE.
 $7673 DEFM $08                                ; "#STR(#PC,$04,$01)".
 $7674 DEFB $20                                ; BACKSPACE.
 $7675 DEFM $08                                ; "#STR(#PC,$04,$01)".
 $7676 DEFB $20                                ; BACKSPACE.
 $7677 DEFM $08                                ; "#STR(#PC,$04,$01)".
 $7678 DEFB $20                                ; BACKSPACE.
 $7679 DEFM $08                                ; "#STR(#PC,$04,$01)".
 $767A DEFB $20                                ; BACKSPACE.
 $767B DEFM $08                                ; "#STR(#PC,$04,$01)".
 $767C DEFM " "

; Messaging: Information Page 2
;
; Used by the routine at #R$73BE.
@label=Messaging_InformationPage2
t$767D DEFM "                                "
 $769D DEFM "  H O L L Y W O O D   P O K E R "
 $76BD DEFM "  SPECTRUM VERSION  BY H.AHRENS "
 $76DD DEFM "                                "
 $76FD DEFM "                                "
 $771D DEFM "                                "
 $773D DEFM "                                "
 $775D DEFM "                                "
 $777D DEFM "                                "
 $779D DEFM "  "

; Life Lost
;
; Used by the routine at #R$8F3B.
@label=LifeLost
c$779F DI            ; Disable interrupts.
 $77A0 XOR A         ; {#REGi=#N$00.
 $77A1 LD I,A        ; }
 $77A3 LD C,$03      ; #REGc=#N$03.
*$77A5 LD B,$00      ; #REGb=#N$00.
*$77A7 XOR A         ; #REGa=#N$00.
*$77A8 OUT ($FE),A   ;
 $77AA DEC A         ; {Decrease #REGa by one and jump back to #R$77A8 until
 $77AB JR NZ,$77A8   ; #REGa is zero.}
 $77AD DJNZ $77A7    ; Decrease counter by one and loop back to #R$77A7 until
                     ; counter is zero.
 $77AF DEC C         ; {Decrease #REGc by one and jump back to #R$77A5 until
 $77B0 JR NZ,$77A5   ; #REGc is zero.}
 $77B2 LD HL,($5CA8) ; {#HTML(Jump to #R$77C0 if *<a rel="noopener nofollow"
 $77B5 LD A,H        ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C92.html#5CA6">MEMBOT</a>
 $77B6 OR L          ; (mem-4+#N$02) is not zero.)
 $77B7 JR NZ,$77C0   ; }
; #UDGTABLE
; { #MESSAGE$08(message-08) }
; UDGTABLE#
 $77B9 LD A,$08      ; {Call #R$7D97 using message block #N$08.
 $77BB CALL $7D97    ; }
 $77BE EI            ; Enable interrupts.
 $77BF RET           ; Return.
*$77C0 LD HL,$E820   ; #REGhl=#R$E820.
 $77C3 LD DE,$F4C8   ; #REGde=#R$F4C8.
*$77C6 LD (HL),$80   ; Write #N$80 to *#REGhl.
 $77C8 INC HL        ; Increment #REGhl by one.
 $77C9 PUSH HL       ; Stash #REGhl on the stack.
 $77CA SBC HL,DE     ; #REGhl-=#REGde (with carry).
 $77CC JR Z,$77D1    ; Jump to #R$77D1 if {} is zero.
 $77CE POP HL        ; Restore #REGhl from the stack.
 $77CF JR $77C6      ; Jump to #R$77C6.

; Routine at 77D1
;
; Used by the routine at #R$779F.
;
; .
;
; Self-modifying code.
c$77D1 POP HL        ; Restore #REGhl from the stack.
 $77D2 LD A,$C9      ; {#HTML(Write <code>RET</code> (#N$C9) to; #LIST {
 $77D4 LD ($FB3A),A  ; #R$FB3A } { #R$FB46 } LIST#)
 $77D7 LD ($FB46),A  ; }
 $77DA RET           ; Return.

; Data block at 77DB
w$77DB DEFW $6F6E
 $77DD DEFW $6874
 $77DF DEFW $7265
 $77E1 DEFW $6720
 $77E3 DEFW $7269
 $77E5 DEFW $206C
 $77E7 DEFW $2020
 $77E9 DEFW $7061
 $77EB DEFW $6570
 $77ED DEFW $7261
 $77EF DEFW $202C
 $77F1 DEFW $6F74
 $77F3 DEFW $6320
 $77F5 DEFW $6E6F
 $77F7 DEFW $6974
 $77F9 DEFW $756E
 $77FB DEFW $2065
 $77FD DEFW $6167
 $77FF DEFW $656D
 $7801 DEFW $202E
 $7803 DEFW $2020
 $7805 DEFW $2020
 $7807 DEFW $2020
 $7809 DEFW $0D0D
 $780B DEFW $2020
 $780D DEFW $6143
 $780F DEFW $7370
 $7811 DEFW $7320
 $7813 DEFW $6968
 $7815 DEFW $7466
 $7817 DEFW $6120
 $7819 DEFW $646E
 $781B DEFW $7320
 $781D DEFW $6D79
 $781F DEFW $6F62
 $7821 DEFW $206C
 $7823 DEFW $6873
 $7825 DEFW $6669
 $7827 DEFW $2074
 $7829 DEFW $2020
 $782B DEFW $2020
 $782D DEFW $2020
 $782F DEFW $7420
 $7831 DEFW $206F
 $7833 DEFW $6572
 $7835 DEFW $6E65
 $7837 DEFW $6574
 $7839 DEFW $2072
 $783B DEFW $6874
 $783D DEFW $2065
 $783F DEFW $656D
 $7841 DEFW $756E
 $7843 DEFW $2065
 $7845 DEFW $2020
 $7847 DEFW $2020
 $7849 DEFW $2020

; Display Title Screen
;
; Used by the routine at #R$6E9D.
;
; .
;
; #UDGTABLE
; { #PUSHS #SIM(start=$784B,stop=$7906)#SCR$02(title-screen) #POPS }
; UDGTABLE#
@label=DisplayTitleScreen
c$784B LD A,$02       ; #REGa=#N$02.
 $784D CALL $1601     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1601.html">CHAN_OPEN</a>.)
 $7850 LD A,$04       ; {#HTML(Set the border to #INK$04 using <a rel="noopener
 $7852 CALL $229B     ; nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/2294.html#229b">BORDER</a>.)
                      ; }
 $7855 SET 3,(IY+$01) ;
 $7859 SET 3,(IY+$30) ;
; Set the UDG graphics pointer.
 $785D LD HL,$F3C9    ; {#HTML(Write #R$F4C9(#N$F3C9) (#R$F4C9) to *<a
 $7860 LD ($5C36),HL  ; rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                      ; }
 $7863 LD A,$27       ; #REGa=#COLOUR$27.
 $7865 LD ($5C8D),A   ; #HTML(Write #REGa to *<a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8D.html">ATTR_P</a>.)
 $7868 LD A,$20       ; #REGa=#COLOUR$20.
 $786A LD ($5C48),A   ; #HTML(Write #REGa to *<a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C48.html">BORDCR</a>.)
 $786D CALL $0DAF     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0DAF.html">CL_ALL</a>.)
; Draw three sections which are white on the left, and black on the right:
; .
; #UDGTABLE
; { #PUSHS #SIM(start=$7863,stop=$7893)#SCR$02(empty-sections) #POPS }
; UDGTABLE#
; .
; Set the point in the attribute buffer where the black sections will begin.
 $7870 LD HL,$5821    ; #REGhl=#N$5821 (attribute buffer location).
 $7873 LD B,$03       ; Set a counter for the three sections to paint.
@label=TitleScreen_SectionLoop
*$7875 PUSH BC        ; Stash the section counter on the stack.
 $7876 LD C,$06       ; In each section there are six rows, so set another
                      ; counter for this.
@label=TitleScreen_RowLoop
*$7878 LD B,$1E       ; The entire length of each row is #N$1E character
                      ; blocks.
@label=TitleScreen_Row
*$787A LD A,B         ; {Is the current position #N$17 ... This is the split
 $787B CP $17         ; for white/ black.}
 $787D LD A,$78       ; #REGa=#COLOUR$78.
 $787F JR NC,$7883    ; Jump to #R$7883 if the current position was #N$17 on
                      ; line #R$787A.
 $7881 LD A,$07       ; #REGa=#COLOUR$07.
@label=TitleScreen_Paint
*$7883 LD (HL),A      ; Write the attribute byte to the pointer held in #REGhl.
 $7884 INC HL         ; Increment the attribute buffer pointer by one.
 $7885 DJNZ $787A     ; Decrease the length counter by one and loop back to
                      ; #R$787A until the counter is zero.
 $7887 INC HL         ; {Increment the attribute buffer pointer by two, this
 $7888 INC HL         ; moves to the start of the next row.}
 $7889 DEC C          ; {Decrease the row counter by one and jump back to
 $788A JR NZ,$7878    ; #R$7878 until all rows have been painted.}
; This section is now completely painted so move onto the next one.
 $788C LD DE,$0020    ; {Move to the next section.
 $788F ADD HL,DE      ; }
 $7890 POP BC         ; Restore the section counter from the stack.
 $7891 DJNZ $7875     ; Decrease the section counter by one and loop back to
                      ; #R$7875 until all three sections have been painted.
; Now print the icons in each box:
; .
; #UDGTABLE
; { #PUSHS
; #SIM(start=$7863,stop=$7893)#SIM(start=$7893,stop=$78C1)#SCR$02(options)
; #POPS }
; UDGTABLE#
 $7893 LD DE,$7A4D    ; Set a pointer in #REGde where the icon graphics begin:
                      ; #R$7A4D.
; Set up printing the keyboard icon.
 $7896 LD HL,$4021    ; #REGhl=#N$4021 (screen buffer location).
 $7899 LD BC,$0830    ; #REGbc=#N$0830 (width/ length).
 $789C PUSH BC        ; Stash the width/ length on the stack.
 $789D CALL $993A     ; Call #R$993A.
 $78A0 POP BC         ; Restore the width/ length from the stack.
 $78A1 LD HL,$5821    ; #REGhl=#N$5821 (attribute buffer location).
 $78A4 CALL $7917     ; Call #R$7917.
; Set up printing the joystick icon.
 $78A7 LD HL,$4801    ; #REGhl=#N$4801 (screen buffer location).
 $78AA LD BC,$0828    ; #REGbc=#N$0828 (width/ length).
 $78AD CALL $993A     ; Call #R$993A.
; Set up printing the information icon.
 $78B0 LD HL,$48E4    ; #REGhl=#N$48E4 (screen buffer location).
 $78B3 LD BC,$0228    ; #REGbc=#N$0228 (width/ length).
 $78B6 PUSH BC        ; Stash the width/ length on the stack.
 $78B7 CALL $993A     ; Call #R$993A.
 $78BA POP BC         ; Restore the width/ length from the stack.
 $78BB LD HL,$59E4    ; #REGhl=#N$59E4 (attribute buffer location).
 $78BE CALL $7917     ; Call #R$7917.
; Now handle printing the text.
 $78C1 LD DE,$7931    ; #REGde=#R$7931.
 $78C4 LD BC,$00C7    ; #REGbc=#N($00C7,$04,$04).
 $78C7 CALL $203C     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1FFC.html#203C">PR_STRING</a>.)
 $78CA LD A,$01       ; #REGa=#N$01.
 $78CC CALL $1601     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1601.html">CHAN_OPEN</a>.)
 $78CF LD HL,$79F8    ; #REGhl=#R$79F8.
 $78D2 CALL $187D     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1855.html#187D">OUT_LINE2</a>.)
 $78D5 LD A,$02       ; #REGa=#N$02.
 $78D7 CALL $1601     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1601.html">CHAN_OPEN</a>.)
; Lastly, print the current user-defined keys.
 $78DA LD HL,$6F6D    ; #REGhl=#R$6F6D.
 $78DD LD BC,$170B    ; #REGbc=#N$170B.
@label=PrintKeys_Loop
*$78E0 PUSH BC        ; {Stash #REGbc and #REGhl on the stack.
 $78E1 PUSH HL        ; }
 $78E2 CALL $0DE2     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0DD9.html#0DE2">#N$0DE2</a>
                      ; (CL_SET).)
 $78E5 LD A,$10       ; {Set INK: #INK$07.
 $78E7 RST $10        ;
 $78E8 LD A,$07       ;
 $78EA RST $10        ; }
 $78EB LD A,$11       ; {Set PAPER: #INK$00.
 $78ED RST $10        ;
 $78EE XOR A          ;
 $78EF RST $10        ; }
 $78F0 POP HL         ; Restore #REGhl from the stack.
 $78F1 PUSH HL        ; Stash #REGhl on the stack.
 $78F2 LD A,(HL)      ; #REGa=*#REGhl.
 $78F3 CP $0D         ; {Jump to #R$7907 if the key is "enter".
 $78F5 JR Z,$7907     ; }
 $78F7 CP $20         ; {Jump to #R$790F if the key is an ASCII "space".
 $78F9 JR Z,$790F     ; }
 $78FB RST $10        ; Print the key to the screen.
@label=PrintKeys_Next
*$78FC POP HL         ; Restore #REGhl from the stack.
 $78FD INC HL         ; {Increment #REGhl by two.
 $78FE INC HL         ; }
 $78FF POP BC         ; Restore #REGbc from the stack.
 $7900 DEC B          ; Decrease #REGb by one.
 $7901 LD A,B         ; {Jump back to #R$78E0 until #REGb is equal to #N$12.
 $7902 CP $12         ;
 $7904 JR NZ,$78E0    ; }
 $7906 RET            ; Return.
; Prints the word "ENTER".
@label=PrintEnter
*$7907 LD HL,$7A47    ; #REGhl=#R$7A47.
 $790A CALL $187D     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1855.html#187D">OUT_LINE2</a>.)
 $790D JR $78FC       ; Jump to #R$78FC.
; Prints the word "SPACE".
@label=PrintSpace
*$790F LD HL,$7A41    ; #REGhl=#R$7A41.
 $7912 CALL $187D     ; #HTML(Call <a rel="noopener nofollow"
                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1855.html#187D">OUT_LINE2</a>.)
 $7915 JR $78FC       ; Jump to #R$78FC.

; Write Attribute Data
;
; Used by the routine at #R$784B.
;
; DE Attribute data
; HL Attribute buffer location
; B
; C
@label=WriteAttributeData
c$7917 SRA C         ;
 $7919 SRA C         ;
 $791B SRA C         ;
*$791D PUSH HL       ; {Stash #REGhl and #REGbc on the stack.
 $791E PUSH BC       ; }
*$791F LD A,(DE)     ;
 $7920 LD (HL),A     ;
 $7921 INC HL        ;
 $7922 INC DE        ;
 $7923 DJNZ $791F    ;
 $7925 POP BC        ; {Restore #REGbc and #REGhl from the stack.
 $7926 POP HL        ; }
 $7927 PUSH DE       ; Stash #REGde on the stack.
 $7928 LD DE,$0020   ; {#REGhl+=#N($0020,$04,$04).
 $792B ADD HL,DE     ; }
 $792C POP DE        ; Restore #REGde from the stack.
 $792D DEC C         ;
 $792E JR NZ,$791D   ;
 $7930 RET           ; Return.

; Messaging: Title Screen
@label=Messaging_TitleScreen
t$7931 DEFB $10,$07              ; Set INK: #INK(#PEEK(#PC+$01)).
 $7933 DEFB $11,$00              ; Set PAPER: #INK(#PEEK(#PC+$01)).
 $7935 DEFB $13,$00              ; BRIGHT: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $7937 DEFB $16,$01,$0B          ; PRINT AT: #N(#PEEK(#PC+$01)),
                                 ; #N(#PEEK(#PC+$02)).
 $793A DEFM "LEFT"               ; "#STR(#PC,$04,$04)".
 $793E DEFB $16,$02,$0B          ; PRINT AT: #N(#PEEK(#PC+$01)),
                                 ; #N(#PEEK(#PC+$02)).
 $7941 DEFM "RIGHT"              ; "#STR(#PC,$04,$05)".
 $7946 DEFB $16,$03,$0B          ; PRINT AT: #N(#PEEK(#PC+$01)),
                                 ; #N(#PEEK(#PC+$02)).
 $7949 DEFM "DOWN"               ; "#STR(#PC,$04,$04)".
 $794D DEFB $16,$04,$0B          ; PRINT AT: #N(#PEEK(#PC+$01)),
                                 ; #N(#PEEK(#PC+$02)).
 $7950 DEFM "UP"                 ; "#STR(#PC,$04,$02)".
 $7952 DEFB $16,$05,$0B          ; PRINT AT: #N(#PEEK(#PC+$01)),
                                 ; #N(#PEEK(#PC+$02)).
 $7955 DEFM "SELECT"             ; "#STR(#PC,$04,$06)".
 $795B DEFB $16,$08,$0B          ; PRINT AT: #N(#PEEK(#PC+$01)),
                                 ; #N(#PEEK(#PC+$02)).
 $795E DEFM "1) DEFINE KEYBOARD" ; "#STR(#PC,$04,$12)".
 $7970 DEFB $16,$09,$0B          ; PRINT AT: #N(#PEEK(#PC+$01)),
                                 ; #N(#PEEK(#PC+$02)).
 $7973 DEFM "2) KEMPSTON"        ; "#STR(#PC,$04,$0B)".
 $797E DEFB $16,$0A,$0B          ; PRINT AT: #N(#PEEK(#PC+$01)),
                                 ; #N(#PEEK(#PC+$02)).
 $7981 DEFM "3) CURSOR KEYS"     ; "#STR(#PC,$04,$0E)".
 $798F DEFB $16,$0B,$0B          ; PRINT AT: #N(#PEEK(#PC+$01)),
                                 ; #N(#PEEK(#PC+$02)).
 $7992 DEFM "4) SINCLAIR IF2"    ; "#STR(#PC,$04,$0F)".
 $79A1 DEFB $16,$0C,$0B          ; PRINT AT: #N(#PEEK(#PC+$01)),
                                 ; #N(#PEEK(#PC+$02)).
 $79A4 DEFM "5) KEYBOARD"        ; "#STR(#PC,$04,$0B)".
 $79AF DEFB $16,$10,$0B          ; PRINT AT: #N(#PEEK(#PC+$01)),
                                 ; #N(#PEEK(#PC+$02)).
 $79B2 DEFM "6) START GAME"      ; "#STR(#PC,$04,$0D)".
 $79BF DEFB $16,$11,$0B          ; PRINT AT: #N(#PEEK(#PC+$01)),
                                 ; #N(#PEEK(#PC+$02)).
 $79C2 DEFM "7) INFORMATION "    ; "#STR(#PC,$04,$0F)".
 $79D1 DEFB $16,$12,$0B          ; PRINT AT: #N(#PEEK(#PC+$01)),
                                 ; #N(#PEEK(#PC+$02)).
 $79D4 DEFM "8) WINNERS LIST"    ; "#STR(#PC,$04,$0F)".
 $79E3 DEFB $16,$13,$0B          ; PRINT AT: #N(#PEEK(#PC+$01)),
                                 ; #N(#PEEK(#PC+$02)).
 $79E6 DEFM "9) RETURN TO BASIC" ; "#STR(#PC,$04,$12)".

; Messaging: Footer Copyright
@label=Messaging_FooterCopyright
t$79F8 DEFB $10,$07                          ; Set INK: #INK(#PEEK(#PC+$01)).
 $79FA DEFB $11,$00                          ; Set PAPER: #INK(#PEEK(#PC+$01)).
 $79FC DEFB $13,$00                          ; BRIGHT:
                                             ; #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $79FE DEFB $16,$00,$01                      ; PRINT AT: #N(#PEEK(#PC+$01)),
                                             ; #N(#PEEK(#PC+$02)).
 $7A01 DEFM " H O L L Y W O O D  P O K E R " ; "#STR(#PC,$04,$1E)".
 $7A1F DEFB $16,$01,$01                      ; PRINT AT: #N(#PEEK(#PC+$01)),
                                             ; #N(#PEEK(#PC+$02)).
 $7A22 DEFM "(C) 1987 GOLDEN GAMES SOFTWARE" ; "#STR(#PC,$04,$1E)".
 $7A40 DEFB $0D                              ; Print "ENTER".

; Messaging: Space
@label=Messaging_Space
t$7A41 DEFM "SPACE",$0D ; "#STR(#PC,$04,$05)".

; Messaging: Enter
@label=Messaging_Enter
t$7A47 DEFM "ENTER",$0D ; "#STR(#PC,$04,$05)".

; Graphics: Keyboard Icon
;
; Used by the routine at #R$784B.
;
; .
;
; #UDGTABLE
; { #UDGARRAY$08,scale=$04,step=$08($7A4D-$7BC5-$01-$40)@$7BCD-$7BFC(keyboard) }
; UDGTABLE#
@label=Graphics_KeyboardIcon
b$7A4D DEFB $00,$60,$01,$FF,$FF,$7F,$A0,$00 ; {Pixels.
 $7A55 DEFB $00,$C0,$03,$FF,$FE,$FF,$D0,$00 ;
 $7A5D DEFB $00,$C0,$07,$FF,$FD,$FF,$E8,$00 ;
 $7A65 DEFB $01,$80,$0F,$FF,$FB,$FF,$F4,$00 ;
 $7A6D DEFB $02,$80,$1F,$FF,$F7,$E7,$FA,$00 ;
 $7A75 DEFB $03,$00,$3F,$FF,$EF,$D3,$FD,$00 ;
 $7A7D DEFB $05,$00,$7F,$FF,$DF,$AB,$FE,$80 ;
 $7A85 DEFB $06,$00,$FF,$FF,$BF,$87,$FE,$40 ;
 $7A8D DEFB $0A,$01,$FF,$FF,$7F,$CF,$FE,$A0 ;
 $7A95 DEFB $12,$03,$FF,$FE,$FC,$FC,$FE,$F0 ;
 $7A9D DEFB $14,$07,$FF,$FD,$FA,$79,$7E,$D8 ;
 $7AA5 DEFB $2C,$0F,$FF,$FB,$F5,$76,$72,$A4 ;
 $7AAD DEFB $28,$1F,$FF,$F7,$F2,$F2,$E4,$D2 ;
 $7AB5 DEFB $58,$3F,$FF,$EF,$F9,$F9,$D8,$49 ;
 $7ABD DEFB $50,$7F,$FF,$DF,$9F,$9F,$D2,$85 ;
 $7AC5 DEFB $D8,$FF,$FF,$BF,$4F,$6F,$E7,$25 ;
 $7ACD DEFB $DD,$FF,$FF,$7E,$AE,$6E,$7E,$49 ;
 $7AD5 DEFB $CF,$FF,$FE,$FE,$1E,$9D,$3C,$91 ;
 $7ADD DEFB $67,$FF,$FD,$FF,$3F,$3B,$3C,$11 ;
 $7AE5 DEFB $7F,$FF,$FB,$F3,$F3,$F8,$7E,$62 ;
 $7AED DEFB $3F,$FF,$F7,$E9,$E9,$FC,$E7,$F5 ;
 $7AF5 DEFB $3F,$FF,$EF,$D5,$C9,$DF,$D2,$AB ;
 $7AFD DEFB $7F,$FF,$DF,$DB,$D3,$A7,$92,$D7 ;
 $7B05 DEFB $FF,$FF,$BF,$E7,$EF,$27,$A6,$6F ;
 $7B0D DEFB $FF,$FF,$7E,$7E,$7F,$4F,$CE,$DE ;
 $7B15 DEFB $FF,$FE,$FD,$3D,$3F,$9C,$FE,$BC ;
 $7B1D DEFB $FF,$FD,$FA,$BA,$B9,$FA,$7F,$78 ;
 $7B25 DEFB $FF,$FB,$F9,$79,$76,$F7,$7E,$F0 ;
 $7B2D DEFB $FF,$F7,$FC,$FC,$E8,$F2,$FD,$E0 ;
 $7B35 DEFB $FF,$EF,$CF,$CF,$E5,$F9,$FB,$C0 ;
 $7B3D DEFB $FF,$DF,$87,$B7,$FB,$9F,$F7,$80 ;
 $7B45 DEFB $FF,$BF,$57,$77,$3F,$4F,$EF,$00 ;
 $7B4D DEFB $FF,$7F,$2F,$2E,$9E,$CF,$DE,$00 ;
 $7B55 DEFB $FE,$FF,$9F,$9D,$1E,$DF,$BC,$00 ;
 $7B5D DEFB $FD,$F9,$F9,$FC,$BF,$3F,$78,$00 ;
 $7B65 DEFB $FB,$F2,$F6,$FE,$73,$FE,$F0,$00 ;
 $7B6D DEFB $F7,$EC,$EC,$E7,$ED,$FD,$E0,$00 ;
 $7B75 DEFB $EF,$E5,$E1,$DB,$D9,$FB,$C0,$00 ;
 $7B7D DEFB $DF,$F3,$F3,$93,$CB,$F7,$80,$00 ;
 $7B85 DEFB $BF,$3F,$3F,$B7,$E7,$EF,$00,$00 ;
 $7B8D DEFB $7E,$9E,$DF,$CE,$7F,$DE,$00,$00 ;
 $7B95 DEFB $FD,$1D,$5C,$FD,$BF,$BC,$00,$00 ;
 $7B9D DEFB $FC,$BC,$BA,$7A,$BF,$78,$00,$00 ;
 $7BA5 DEFB $FE,$7E,$76,$79,$7E,$F0,$00,$00 ;
 $7BAD DEFB $E7,$E7,$F4,$FC,$FD,$E0,$00,$00 ;
 $7BB5 DEFB $D3,$D3,$F9,$CF,$FB,$C0,$00,$00 ;
 $7BBD DEFB $AB,$AB,$9F,$B7,$F7,$80,$00,$00 ;
 $7BC5 DEFB $87,$97,$4F,$6F,$EF,$00,$00,$00 ; }
 $7BCD DEFB $78,$78,$78,$78,$78,$38,$78,$78 ; {Attributes.
 $7BD5 DEFB $78,$78,$78,$78,$38,$38,$38,$78 ;
 $7BDD DEFB $78,$78,$78,$38,$38,$38,$38,$38 ;
 $7BE5 DEFB $78,$78,$38,$38,$38,$38,$38,$78 ;
 $7BED DEFB $78,$38,$38,$38,$38,$38,$78,$78 ;
 $7BF5 DEFB $38,$38,$38,$38,$38,$78,$78,$78 ; }

; Graphics: Joystick Icon
;
; Used by the routine at #R$784B.
;
; .
;
; #UDGTABLE
; { #UDGARRAY$08,attr=$78,scale=$04,step=$08($7BFD-$7D25-$01-$40)(joystick) }
; UDGTABLE#
@label=Graphics_JoystickIcon
b$7BFD DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Pixels.
 $7C05 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $7C0D DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $7C15 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $7C1D DEFB $00,$00,$00,$0C,$00,$00,$00,$00 ;
 $7C25 DEFB $00,$00,$00,$3B,$00,$00,$00,$00 ;
 $7C2D DEFB $00,$00,$00,$ED,$00,$00,$00,$00 ;
 $7C35 DEFB $00,$00,$01,$BB,$00,$00,$00,$00 ;
 $7C3D DEFB $00,$00,$01,$F6,$00,$00,$00,$00 ;
 $7C45 DEFB $00,$00,$01,$A8,$00,$00,$00,$00 ;
 $7C4D DEFB $00,$00,$01,$78,$00,$00,$00,$00 ;
 $7C55 DEFB $00,$00,$01,$AC,$00,$00,$00,$00 ;
 $7C5D DEFB $00,$00,$01,$7C,$00,$00,$00,$00 ;
 $7C65 DEFB $00,$00,$01,$AC,$00,$00,$00,$00 ;
 $7C6D DEFB $00,$00,$01,$7C,$00,$00,$00,$00 ;
 $7C75 DEFB $00,$00,$01,$A8,$00,$FF,$FF,$FE ;
 $7C7D DEFB $00,$00,$01,$74,$00,$FF,$FF,$FE ;
 $7C85 DEFB $00,$00,$01,$AC,$00,$E0,$E9,$3E ;
 $7C8D DEFB $00,$00,$01,$74,$01,$FE,$E5,$7E ;
 $7C95 DEFB $00,$00,$01,$AC,$1F,$F1,$FF,$FE ;
 $7C9D DEFB $00,$00,$01,$77,$FF,$FF,$FF,$FE ;
 $7CA5 DEFB $00,$00,$01,$AF,$E1,$FF,$FF,$FE ;
 $7CAD DEFB $00,$00,$3F,$75,$60,$FF,$FF,$FE ;
 $7CB5 DEFB $00,$07,$FB,$AE,$B8,$FF,$FF,$FE ;
 $7CBD DEFB $00,$3F,$F5,$75,$56,$E0,$00,$06 ;
 $7CC5 DEFB $00,$FC,$AB,$AE,$EB,$E5,$55,$56 ;
 $7CCD DEFB $03,$E7,$55,$75,$F5,$6A,$AA,$A6 ;
 $7CD5 DEFB $0F,$8A,$AB,$AE,$EB,$BF,$FF,$FE ;
 $7CDD DEFB $3C,$1F,$55,$FD,$56,$90,$00,$00 ;
 $7CE5 DEFB $30,$15,$AA,$FA,$BD,$60,$00,$00 ;
 $7CED DEFB $60,$1A,$F5,$55,$6A,$C0,$00,$00 ;
 $7CF5 DEFB $60,$0D,$5A,$AB,$D5,$80,$00,$00 ;
 $7CFD DEFB $70,$06,$AF,$56,$AE,$00,$00,$00 ;
 $7D05 DEFB $3E,$01,$D5,$BD,$58,$00,$00,$00 ;
 $7D0D DEFB $1F,$C7,$EA,$EA,$E0,$00,$00,$00 ;
 $7D15 DEFB $03,$FF,$1D,$55,$80,$00,$00,$00 ;
 $7D1D DEFB $00,$7C,$06,$EE,$00,$00,$00,$00 ;
 $7D25 DEFB $00,$00,$01,$D8,$00,$00,$00,$00 ;
 $7D2D DEFB $00,$00,$00,$60,$00,$00,$00,$00 ;
 $7D35 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }

; Graphics: Information Icon
;
; Used by the routine at #R$784B.
;
; .
;
; #UDGTABLE
; { #UDGARRAY$02,scale=$04,step=$02($7D3D-$7D8B-$01-$10)@$7D8D-$7D96(information) }
; UDGTABLE#
@label=Graphics_InformationIcon
b$7D3D DEFB $00,$00  ; {Pixels.
 $7D3F DEFB $00,$00  ;
 $7D41 DEFB $00,$00  ;
 $7D43 DEFB $00,$00  ;
 $7D45 DEFB $00,$00  ;
 $7D47 DEFB $03,$C0  ;
 $7D49 DEFB $07,$E0  ;
 $7D4B DEFB $07,$E0  ;
 $7D4D DEFB $07,$E0  ;
 $7D4F DEFB $03,$C0  ;
 $7D51 DEFB $00,$00  ;
 $7D53 DEFB $00,$00  ;
 $7D55 DEFB $00,$00  ;
 $7D57 DEFB $00,$00  ;
 $7D59 DEFB $7F,$C0  ;
 $7D5B DEFB $FF,$E0  ;
 $7D5D DEFB $FF,$E0  ;
 $7D5F DEFB $FF,$E0  ;
 $7D61 DEFB $7F,$E0  ;
 $7D63 DEFB $0F,$E0  ;
 $7D65 DEFB $07,$E0  ;
 $7D67 DEFB $07,$E0  ;
 $7D69 DEFB $07,$E0  ;
 $7D6B DEFB $07,$E0  ;
 $7D6D DEFB $07,$E0  ;
 $7D6F DEFB $07,$E0  ;
 $7D71 DEFB $07,$E0  ;
 $7D73 DEFB $07,$E0  ;
 $7D75 DEFB $07,$E0  ;
 $7D77 DEFB $07,$E0  ;
 $7D79 DEFB $07,$E0  ;
 $7D7B DEFB $07,$E0  ;
 $7D7D DEFB $07,$E0  ;
 $7D7F DEFB $0F,$F0  ;
 $7D81 DEFB $7F,$FE  ;
 $7D83 DEFB $FF,$FF  ;
 $7D85 DEFB $FF,$FF  ;
 $7D87 DEFB $FF,$FF  ;
 $7D89 DEFB $7F,$FE  ;
 $7D8B DEFB $00,$00  ; }
 $7D8D DEFB $79,$79  ; {Attributes.
 $7D8F DEFB $79,$79  ;
 $7D91 DEFB $7A,$7A  ;
 $7D93 DEFB $7B,$7B  ;
 $7D95 DEFB $7C,$7C  ; }

; Messaging: Girl
;
; Used by the routines at #R$779F, #R$8CF0, #R$8D3E, #R$8D4A, #R$8EE2, #R$8F06,
; #R$8F20, #R$8F3B, #R$8F5A, #R$9003, #R$9171, #R$9258 and #R$960C.
;
; A Message ID
;
; #N$13 is the highest message ID.
@label=Messaging_Girl
c$7D97 LD ($8CEF),A  ; Write #REGa to *#R$8CEF.
 $7D9A CP $13        ; {Return if #REGa is higher than #N$13.
 $7D9C RET NC        ; }
 $7D9D INC A         ; Increment #REGa by one.
 $7D9E LD HL,$8CAE   ; #REGhl=#R$8CB1(#N$8CAE) (i.e. #R$8CB1-#N$03).
; Find the relevant message block.
@label=FindMessagingBlock
*$7DA1 INC HL        ; {Increment #REGhl by three.
 $7DA2 INC HL        ;
 $7DA3 INC HL        ; }
 $7DA4 DEC A         ; {Decrease #REGa by one and keep jumping back to #R$7DA1
 $7DA5 JR NZ,$7DA1   ; until it is zero.}
 $7DA7 LD E,(HL)     ; {Load the referenced message block into #REGde.
 $7DA8 INC HL        ;
 $7DA9 LD D,(HL)     ; }
 $7DAA INC HL        ; {Load the number of messages in this message block into
 $7DAB LD A,(HL)     ; #REGa.}
 $7DAC LD ($8CEA),A  ; Write the number of messages in this message block to
                     ; *#R$8CEA.
 $7DAF LD ($8CEB),DE ; Write #REGde to *#R$8CEB.
 $7DB3 LD ($8CED),DE ; Write #REGde to *#R$8CED.
*$7DB7 LD B,A        ; #REGb=the number of messages in this message block.
*$7DB8 CALL $9579    ; Call #R$9579.
 $7DBB CP $0A        ; {Jump to #R$7DD6 if #REGa is lower than #N$0A.
 $7DBD JR C,$7DD6    ; }
 $7DBF LD DE,$0036   ; {#REGhl=*#R$8CED+#N($0036,$04,$04).
 $7DC2 LD HL,($8CED) ;
 $7DC5 ADD HL,DE     ; }
 $7DC6 LD ($8CED),HL ; Write #REGhl to *#R$8CED.
 $7DC9 DJNZ $7DB8    ; Decrease counter by one and loop back to #R$7DB8 until
                     ; counter is zero.
 $7DCB LD HL,($8CEB) ; {Write *#R$8CEB to *#R$8CED.
 $7DCE LD ($8CED),HL ; }
 $7DD1 LD A,($8CEA)  ; #REGa=*#R$8CEA.
 $7DD4 JR $7DB7      ; Jump to #R$7DB7.
*$7DD6 XOR A         ; #REGa=#N$00.
*$7DD7 PUSH AF       ; Stash #REGaf on the stack.
 $7DD8 LD A,$10      ; {Set INK: #INK$00.
 $7DDA RST $10       ;
 $7DDB XOR A         ;
 $7DDC RST $10       ; }
 $7DDD LD A,$11      ; {Set PAPER: #INK$07.
 $7DDF RST $10       ;
 $7DE0 LD A,$07      ;
 $7DE2 RST $10       ; }
 $7DE3 LD A,$16      ; {PRINT AT: #N$00#RAW(,) #N$0D.
 $7DE5 RST $10       ;
 $7DE6 POP AF        ;
 $7DE7 PUSH AF       ;
 $7DE8 RST $10       ;
 $7DE9 LD A,$0D      ;
 $7DEB RST $10       ; }
 $7DEC LD A,$13      ; {BRIGHT: ON.
 $7DEE RST $10       ;
 $7DEF LD A,$01      ;
 $7DF1 RST $10       ; }
 $7DF2 LD DE,($8CED) ; #REGde=*#R$8CED.
 $7DF6 LD BC,$000E   ; #REGbc=#N($000E,$04,$04).
 $7DF9 POP AF        ; Restore #REGaf from the stack.
 $7DFA CP $03        ; Compare #REGa with #N$03.
 $7DFC PUSH AF       ; Stash #REGaf on the stack.
 $7DFD JR NZ,$7E01   ; Jump to #R$7E01 if {} is not zero.
 $7DFF DEC BC        ; {Decrease #REGbc by two.
 $7E00 DEC BC        ; }
*$7E01 CALL $F7CA    ; Call #R$F7CA.
 $7E04 LD ($8CED),DE ; Write #REGde to *#R$8CED.
 $7E08 POP AF        ; Restore #REGaf from the stack.
 $7E09 CP $03        ; {Jump to #R$7E10 if #REGa is equal to #N$03.
 $7E0B JR Z,$7E10    ; }
 $7E0D INC A         ; Increment #REGa by one.
 $7E0E JR $7DD7      ; Jump to #R$7DD7.
*$7E10 LD A,($8CEF)  ; {Jump to #R$7E1D if *#R$8CEF is equal to #N$11.
 $7E13 CP $11        ;
 $7E15 JR Z,$7E1D    ; }
 $7E17 CP $0F        ; {Jump to #R$7E1D if *#R$8CEF is equal to #N$0F.
 $7E19 JR Z,$7E1D    ; }
 $7E1B JR $7E22      ; Jump to #R$7E22.
*$7E1D LD A,$00      ; {Write #N$00 to *#R$92C5.
 $7E1F LD ($92C5),A  ; }
*$7E22 CALL $90D8    ; Call #R$90D8.
 $7E25 CP $05        ; {Jump to #R$7E22 if #REGa is higher than #N$05.
 $7E27 JR NC,$7E22   ; }
 $7E29 LD A,($8CEF)  ; {Jump to #R$7E6B if *#R$8CEF is not equal to #N$12.
 $7E2C CP $12        ;
 $7E2E JR NZ,$7E6B   ; }
 $7E30 LD HL,$5800   ; #REGhl=#N$5800 (screen buffer location).
 $7E33 LD DE,$583F   ; #REGde=#N$583F (attribute buffer location).
 $7E36 LD C,$20      ; #REGc=#N$20.
*$7E38 PUSH HL       ; {Stash #REGhl and #REGde on the stack.
 $7E39 PUSH DE       ; }
 $7E3A LD B,$06      ; #REGb=#N$06.
*$7E3C XOR A         ; #REGa=#N$00.
 $7E3D LD (HL),$00   ; Write #N$00 to *#REGhl.
 $7E3F LD (DE),A     ; Write #REGa to *#REGde.
 $7E40 PUSH DE       ; Stash #REGde on the stack.
 $7E41 LD DE,$0040   ; {#REGhl+=#N($0040,$04,$04).
 $7E44 ADD HL,DE     ; }
 $7E45 PUSH HL       ; {#REGix=#REGhl (using the stack).
 $7E46 POP IX        ; }
 $7E48 POP HL        ; Restore #REGhl from the stack.
 $7E49 ADD HL,DE     ; #REGhl+=#REGde.
 $7E4A EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $7E4B PUSH IX       ; {#REGhl=#REGix (using the stack).
 $7E4D POP HL        ; }
 $7E4E DJNZ $7E3C    ; Decrease counter by one and loop back to #R$7E3C until
                     ; counter is zero.
 $7E50 LD A,$0E      ; #REGa=#N$0E.
*$7E52 DJNZ $7E52    ; Decrease counter by one and loop back to #R$7E52 until
                     ; counter is zero.
 $7E54 DEC A         ; Decrease #REGa by one.
 $7E55 JR NZ,$7E52   ; Jump to #R$7E52 until #REGa is zero.
 $7E57 POP DE        ; {Restore #REGde and #REGhl from the stack.
 $7E58 POP HL        ; }
 $7E59 INC HL        ; Increment #REGhl by one.
 $7E5A DEC DE        ; Decrease #REGde by one.
 $7E5B DEC C         ; Decrease #REGc by one.
 $7E5C JR NZ,$7E38   ; Jump to #R$7E38 until #REGc is zero.
; Count to #N$50000 to give the player a chance to read the messaging.
 $7E5E LD B,$05      ; Set a counter for #N$05 loops.
@label=Messaging_Girl_PauseLoop
*$7E60 LD HL,$0000   ; #REGhl=#N($0000,$04,$04).
@label=Messaging_Girl_InnerPauseLoop
*$7E63 DEC HL        ; Decrease #REGhl by one.
 $7E64 LD A,H        ; {Loop back to #R$7E63 until #REGhl is zero.
 $7E65 OR L          ;
 $7E66 JR NZ,$7E63   ; }
 $7E68 DJNZ $7E60    ; Decrease the counter by one and loop back to #R$7E60
                     ; until the counter is zero.
 $7E6A RET           ; Return.

; Remove Speech Bubble
;
; #PUSHS #UDGTABLE
; { #SIM(start=$7E6B,stop=$7E8E)#SCR$02{$D0,$00,$70,$40}(couch) }
; UDGTABLE# #POPS
; Used by the routine at #R$7D97.
@label=RemoveSpeechBubble
c$7E6B LD DE,$9726   ; Set the source address as #R$9726.
 $7E6E LD HL,$400D   ; Set the destination address in the screen buffer to
                     ; #N$400D.
 $7E71 LD B,$07      ; #REGb=#N$07 (width).
 $7E73 LD C,$20      ; #REGc=#N$20 (height).
 $7E75 CALL $993A    ; Call #R$993A.
; Recolour the background.
 $7E78 LD HL,$580D   ; #REGhl=#N$580D (attribute buffer location).
 $7E7B LD C,$04      ; #REGc=#N$04 (height in character blocks).
@label=RemoveSpeechBubble_RowLoop
*$7E7D LD B,$07      ; #REGb=#N$07 (width).
@label=RemoveSpeechBubble_Loop
*$7E7F LD A,(DE)     ; {Copy one byte of attribute data to the attribute
 $7E80 LD (HL),A     ; buffer.}
 $7E81 INC DE        ; Increment the source attribute data pointer by one.
 $7E82 INC HL        ; Increment the attribute buffer pointer by one.
 $7E83 DJNZ $7E7F    ; Decrease the counter by one and loop back to #R$7E7F
                     ; until the counter is zero.
 $7E85 PUSH DE       ; Briefly stash #REGde on the stack.
 $7E86 LD DE,$0019   ; {Add #N($0019,$04,$04) to #REGhl to move onto the next
 $7E89 ADD HL,DE     ; row.}
 $7E8A POP DE        ; Restore #REGde from the stack.
 $7E8B DEC C         ; {Decrease the counter by one and jump back to #R$7E7D
 $7E8C JR NZ,$7E7D   ; until the counter is zero.}
 $7E8E RET           ; Return.

; Message Block: #N$00
;
; .
;
; .
;
; Message: #N($01+(#PC-$7E8F)/$36).
@label=MessageBlock_00
t$7E8F DEFM "Bad luck I won"
 $7E9D DEFM "  this round  "
 $7EAB DEFM "              "
 $7EB9 DEFM "            "
; Message: #N($01+(#PC-$7E8F)/$36).
 $7EC5 DEFM "              "
 $7ED3 DEFM "  I won this  "
 $7EE1 DEFM "    round!    "
 $7EEF DEFM "            "
; Message: #N($01+(#PC-$7E8F)/$36).
 $7EFB DEFM " You lost the "
 $7F09 DEFM "     game     "
 $7F17 DEFM "Don't look so "
 $7F25 DEFM "  confused. "
; Message: #N($01+(#PC-$7E8F)/$36).
 $7F31 DEFM "I'M THE WINNER"
 $7F3F DEFM "Have you ever "
 $7F4D DEFM "played poker  "
 $7F5B DEFM "before??    "
; Message: #N($01+(#PC-$7E8F)/$36).
 $7F67 DEFM " Wouldnt  you "
 $7F75 DEFM " rather  play "
 $7F83 DEFM " Joe Blade... "
 $7F91 DEFM "            "

; Message Block: #N$01
;
; .
;
; .
;
; Message: #N($01+(#PC-$7F9D)/$36).
@label=MessageBlock_01
t$7F9D DEFM "Ill give you a"
 $7FAB DEFM " fair  chance "
 $7FB9 DEFM "    I DROP    "
 $7FC7 DEFM "            "
; Message: #N($01+(#PC-$7F9D)/$36).
 $7FD3 DEFM "  I GIVE UP ! "
 $7FE1 DEFM "              "
 $7FEF DEFM "This will make"
 $7FFD DEFM "  you happy."
; Message: #N($01+(#PC-$7F9D)/$36).
 $8009 DEFM "  Naff cards  "
 $8017 DEFM "  You better  "
 $8025 DEFM "    quit!     "
 $8033 DEFM "            "
; Message: #N($01+(#PC-$7F9D)/$36).
 $803F DEFM "Youre a lucky "
 $804D DEFM "guy, this aint"
 $805B DEFM "   my day..   "
 $8069 DEFM "            "
; Message: #N($01+(#PC-$7F9D)/$36).
 $8075 DEFM " Arggghhh not "
 $8083 DEFM "more bad cards"
 $8091 DEFM "              "
 $809F DEFM "            "

; Message Block: #N$02
;
; .
;
; .
;
; Message: #N($01+(#PC-$80AB)/$36).
@label=MessageBlock_02
t$80AB DEFM "  I RAISE !   "
 $80B9 DEFM " Do you have  "
 $80C7 DEFM "enough courage"
 $80D5 DEFM " to hold ?  "
; Message: #N($01+(#PC-$80AB)/$36).
 $80E1 DEFM "  You better  "
 $80EF DEFM "   give  up   "
 $80FD DEFM "              "
 $810B DEFM "            "
; Message: #N($01+(#PC-$80AB)/$36).
 $8117 DEFM "  Hold on to  "
 $8125 DEFM "  your socks  "
 $8133 DEFM "   I RAISE    "
 $8141 DEFM "            "
; Message: #N($01+(#PC-$80AB)/$36).
 $814D DEFM "              "
 $815B DEFM "      I       "
 $8169 DEFM "    RAISE     "
 $8177 DEFM "            "
; Message: #N($01+(#PC-$80AB)/$36).
 $8183 DEFM "  You better  "
 $8191 DEFM "  drop  your  "
 $819F DEFM "    cards     "
 $81AD DEFM "   I RAISE  "

; Message Block: #N$03
;
; .
;
; .
;
; Message: #N($01+(#PC-$81B9)/$36).
@label=MessageBlock_03
t$81B9 DEFM "              "
 $81C7 DEFM "    I HOLD    "
 $81D5 DEFM "              "
 $81E3 DEFM "            "
; Message: #N($01+(#PC-$81B9)/$36).
 $81EF DEFM "              "
 $81FD DEFM "    I HOLD    "
 $820B DEFM "              "
 $8219 DEFM "            "
; Message: #N($01+(#PC-$81B9)/$36).
 $8225 DEFM "The best,I can"
 $8233 DEFM "    do,is     "
 $8241 DEFM "    HOLD!     "
 $824F DEFM "            "

; Message Block: #N$04
;
; .
;
; .
;
; Message: #N($01+(#PC-$825B)/$36).
@label=MessageBlock_04
t$825B DEFM " You won the  "
 $8269 DEFM " battle, but  "
 $8277 DEFM " not the war! "
 $8285 DEFM "            "
; Message: #N($01+(#PC-$825B)/$36).
 $8291 DEFM "              "
 $829F DEFM "  You won !   "
 $82AD DEFM "              "
 $82BB DEFM "            "
; Message: #N($01+(#PC-$825B)/$36).
 $82C7 DEFM "unreal cards! "
 $82D5 DEFM "you better not"
 $82E3 DEFM " be cheating! "
 $82F1 DEFM "            "
; Message: #N($01+(#PC-$825B)/$36).
 $82FD DEFM " I lost  this "
 $830B DEFM "time, but look"
 $8319 DEFM "out next time!"
 $8327 DEFM "            "
; Message: #N($01+(#PC-$825B)/$36).
 $8333 DEFM "              "
 $8341 DEFM " I Lost  this "
 $834F DEFM "    round!    "
 $835D DEFM "            "

; Message Block: #N$05
;
; .
;
; .
;
; Message: #N($01+(#PC-$8369)/$36).
@label=MessageBlock_05
t$8369 DEFM "              "
 $8377 DEFM " Arrrrggggggh "
 $8385 DEFM "              "
 $8393 DEFM "            "
; Message: #N($01+(#PC-$8369)/$36).
 $839F DEFM "   Watch it   "
 $83AD DEFM "   m'laddo    "
 $83BB DEFM "              "
 $83C9 DEFM "            "
; Message: #N($01+(#PC-$8369)/$36).
 $83D5 DEFM "              "
 $83E3 DEFM "I'm only human"
 $83F1 DEFM "              "
 $83FF DEFM "            "
; Message: #N($01+(#PC-$8369)/$36).
 $840B DEFM "              "
 $8419 DEFM "Arrrrgggh !!!!"
 $8427 DEFM "              "
 $8435 DEFM "            "
; Message: #N($01+(#PC-$8369)/$36).
 $8441 DEFM "              "
 $844F DEFM "It was too hot"
 $845D DEFM "in here anyway"
 $846B DEFM "            "

; Message Block: #N$06
;
; .
;
; .
;
; Message: #N($01+(#PC-$8477)/$36).
@label=MessageBlock_06
t$8477 DEFM "    I Quit    "
 $8485 DEFM "It's too  cold"
 $8493 DEFM "   in here.   "
 $84A1 DEFM "            "
; Message: #N($01+(#PC-$8477)/$36).
 $84AD DEFM "Youre Cheating"
 $84BB DEFM " Me, I quit!  "
 $84C9 DEFM "              "
 $84D7 DEFM "            "
; Message: #N($01+(#PC-$8477)/$36).
 $84E3 DEFM "   ARE YOU    "
 $84F1 DEFM " HAPPY WITH   "
 $84FF DEFM "    THIS ?    "
 $850D DEFM "            "
; Message: #N($01+(#PC-$8477)/$36).
 $8519 DEFM " What's wrong "
 $8527 DEFM " never seen a "
 $8535 DEFM "  TV screen   "
 $8543 DEFM "  Before!!  "
; Message: #N($01+(#PC-$8477)/$36).
 $854F DEFM "              "
 $855D DEFM "  I'm yours   "
 $856B DEFM " But only on  "
 $8579 DEFM " the printer"

; Message Block: #N$07
;
; .
;
; .
;
; Message: #N($01+(#PC-$8585)/$36).
@label=MessageBlock_07
t$8585 DEFM "              "
 $8593 DEFM "   GAME       "
 $85A1 DEFM "      OVER    "
 $85AF DEFM "            "

; Message Block: #N$08
;
; .
;
; .
;
; Message: #N($01+(#PC-$85BB)/$36).
@label=MessageBlock_08
t$85BB DEFM "  I hope you  "
 $85C9 DEFM "really dropped"
 $85D7 DEFM "your trousers!"
 $85E5 DEFM "            "
; Message: #N($01+(#PC-$85BB)/$36).
 $85F1 DEFM "   Shall I    "
 $85FF DEFM "  look away?  "
 $860D DEFM "              "
 $861B DEFM "            "
; Message: #N($01+(#PC-$85BB)/$36).
 $8627 DEFM "              "
 $8635 DEFM " This is only "
 $8643 DEFM "the  beginning"
 $8651 DEFM "            "
; Message: #N($01+(#PC-$85BB)/$36).
 $865D DEFM "              "
 $866B DEFM "   That was   "
 $8679 DEFM "    funny     "
 $8687 DEFM "      !     "

; Message Block: #N$09
;
; .
;
; .
;
; Message: #N($01+(#PC-$8693)/$36).
@label=MessageBlock_09
t$8693 DEFM "              "
 $86A1 DEFM "Let's compare "
 $86AF DEFM " our cards .  "
 $86BD DEFM "            "
; Message: #N($01+(#PC-$8693)/$36).
 $86C9 DEFM "              "
 $86D7 DEFM " SHOW ME YOUR "
 $86E5 DEFM "    CARDS !   "
 $86F3 DEFM "            "
; Message: #N($01+(#PC-$8693)/$36).
 $86FF DEFM "              "
 $870D DEFM "  Let me see  "
 $871B DEFM "  your cards  "
 $8729 DEFM "            "

; Message Block: #N$0A
;
; .
;
; .
;
; Message: #N($01+(#PC-$8735)/$36).
@label=MessageBlock_10
t$8735 DEFM "              "
 $8743 DEFM "  YOU FOOL!   "
 $8751 DEFM "              "
 $875F DEFM "            "
; Message: #N($01+(#PC-$8735)/$36).
 $876B DEFM "   Nervous?   "
 $8779 DEFM "              "
 $8787 DEFM "              "
 $8795 DEFM "            "
; Message: #N($01+(#PC-$8735)/$36).
 $87A1 DEFM "              "
 $87AF DEFM "Thanks a lot! "
 $87BD DEFM "              "
 $87CB DEFM "            "
; Message: #N($01+(#PC-$8735)/$36).
 $87D7 DEFM "   GIVE UP!   "
 $87E5 DEFM "You can't beat"
 $87F3 DEFM "  my  cards!  "
 $8801 DEFM "            "
; Message: #N($01+(#PC-$8735)/$36).
 $880D DEFM "              "
 $881B DEFM "   BAD GAME ! "
 $8829 DEFM "              "
 $8837 DEFM "            "

; Message Block: #N$0B
;
; .
;
; .
;
; Message: #N($01+(#PC-$8843)/$36).
@label=MessageBlock_11
t$8843 DEFM "  You hold ?? "
 $8851 DEFM "  With those  "
 $885F DEFM "  cards !!!!  "
 $886D DEFM "            "
; Message: #N($01+(#PC-$8843)/$36).
 $8879 DEFM "              "
 $8887 DEFM "drop the cards"
 $8895 DEFM "              "
 $88A3 DEFM "            "
; Message: #N($01+(#PC-$8843)/$36).
 $88AF DEFM "I'll beat  you"
 $88BD DEFM " in  the next "
 $88CB DEFM "    round!    "
 $88D9 DEFM "            "

; Message Block: #N$0D
;
; .
;
; .
;
; Message: #N($01+(#PC-$88E5)/$36).
@label=MessageBlock_13
t$88E5 DEFM "              "
 $88F3 DEFM "   Now it's   "
 $8901 DEFM "   my turn.   "
 $890F DEFM "            "

; Message Block: #N$0C
;
; .
;
; .
;
; Message: #N($01+(#PC-$891B)/$36).
@label=MessageBlock_12
t$891B DEFM "              "
 $8929 DEFM "It's your turn"
 $8937 DEFM "              "
 $8945 DEFM "            "

; Message Block: #N$0E
;
; .
;
; .
;
; Message: #N($01+(#PC-$8951)/$36).
@label=MessageBlock_14
t$8951 DEFM " I'm sorry,   "
 $895F DEFM "you lost  this"
 $896D DEFM "    round!    "
 $897B DEFM "            "
; Message: #N($01+(#PC-$8951)/$36).
 $8987 DEFM " Say goodbye  "
 $8995 DEFM " your game is "
 $89A3 DEFM "    OVER!!    "
 $89B1 DEFM "            "
; Message: #N($01+(#PC-$8951)/$36).
 $89BD DEFM "  Don't get   "
 $89CB DEFM "  upset, next "
 $89D9 DEFM "time you might"
 $89E7 DEFM " beat me!   "

; Message Block: #N$0F
;
; .
;
; .
;
; Message: #N($01+(#PC-$89F3)/$36).
@label=MessageBlock_15
t$89F3 DEFM "   Choose     "
 $8A01 DEFM "    your      "
 $8A0F DEFM "    new       "
 $8A1D DEFM "   cards!   "

; Message Block: #N$10
;
; .
;
; .
;
; Message: #N($01+(#PC-$8A29)/$36).
@label=MessageBlock_16
t$8A29 DEFM "your'e  braver"
 $8A37 DEFM "than I thought"
 $8A45 DEFM "              "
 $8A53 DEFM "            "
; Message: #N($01+(#PC-$8A29)/$36).
 $8A5F DEFM "              "
 $8A6D DEFM "You  beter not"
 $8A7B DEFM " be  bluffing "
 $8A89 DEFM "   me!!     "
; Message: #N($01+(#PC-$8A29)/$36).
 $8A95 DEFM "              "
 $8AA3 DEFM " Don't try to "
 $8AB1 DEFM "  bluff me!!  "
 $8ABF DEFM "            "
; Message: #N($01+(#PC-$8A29)/$36).
 $8ACB DEFM " The more you "
 $8AD9 DEFM "raise the more"
 $8AE7 DEFM " you loose!!! "
 $8AF5 DEFM "            "
; Message: #N($01+(#PC-$8A29)/$36).
 $8B01 DEFM "Okay, so you  "
 $8B0F DEFM " want to throw"
 $8B1D DEFM "  your money  "
 $8B2B DEFM " away!!!    "
; Message: #N($01+(#PC-$8A29)/$36).
 $8B37 DEFM "              "
 $8B45 DEFM " We  have the "
 $8B53 DEFM "tools we  have"
 $8B61 DEFM "the talent  "

; Message Block: #N$11
;
; .
;
; .
;
; Message: #N($01+(#PC-$8B6D)/$36).
@label=MessageBlock_17
t$8B6D DEFM "              "
 $8B7B DEFM " How much you "
 $8B89 DEFM " want to raise"
 $8B97 DEFM "      ?     "
; Message: #N($01+(#PC-$8B6D)/$36).
 $8BA3 DEFM "              "
 $8BB1 DEFM "  How much ?  "
 $8BBF DEFM "              "
 $8BCD DEFM "            "
; Message: #N($01+(#PC-$8B6D)/$36).
 $8BD9 DEFM "              "
 $8BE7 DEFM "  You've got  "
 $8BF5 DEFM "loads-a-money "
 $8C03 DEFM "            "

; Message Block: #N$12
;
; .
;
; .
;
; Message: #N($01+(#PC-$8C0F)/$36).
@label=MessageBlock_18
t$8C0F DEFM "              "
 $8C1D DEFM " You can play "
 $8C2B DEFM " me anytime!! "
 $8C39 DEFM "            "
; Message: #N($01+(#PC-$8C0F)/$36).
 $8C45 DEFM " Okay, up to  "
 $8C53 DEFM " now this was "
 $8C61 DEFM "   funny!!!   "
 $8C6F DEFM "            "
; Message: #N($01+(#PC-$8C0F)/$36).
 $8C7B DEFM " THE NEXT GIRL"
 $8C89 DEFM "WILL MAKE YOU "
 $8C97 DEFM "   POOR !     "
 $8CA5 DEFM "            "

; Table: In-Game Messaging
;
; .
;
; .
;
; Message Block: #N((#PC-$8CB1)/$03).
@label=Table_InGameMessaging
g$8CB1 DEFW $7E8F    ; Points to #R(#PEEK(#PC)+(#PEEK(#PC+$01)*$100)).
 $8CB3 DEFB $05      ; Number of messages in block: #N(#PEEK(#PC)).
; Message Block: #N((#PC-$8CB1)/$03).
 $8CB4 DEFW $7F9D    ; Points to #R(#PEEK(#PC)+(#PEEK(#PC+$01)*$100)).
 $8CB6 DEFB $05      ; Number of messages in block: #N(#PEEK(#PC)).
; Message Block: #N((#PC-$8CB1)/$03).
 $8CB7 DEFW $80AB    ; Points to #R(#PEEK(#PC)+(#PEEK(#PC+$01)*$100)).
 $8CB9 DEFB $05      ; Number of messages in block: #N(#PEEK(#PC)).
; Message Block: #N((#PC-$8CB1)/$03).
 $8CBA DEFW $81B9    ; Points to #R(#PEEK(#PC)+(#PEEK(#PC+$01)*$100)).
 $8CBC DEFB $03      ; Number of messages in block: #N(#PEEK(#PC)).
; Message Block: #N((#PC-$8CB1)/$03).
 $8CBD DEFW $825B    ; Points to #R(#PEEK(#PC)+(#PEEK(#PC+$01)*$100)).
 $8CBF DEFB $05      ; Number of messages in block: #N(#PEEK(#PC)).
; Message Block: #N((#PC-$8CB1)/$03).
 $8CC0 DEFW $8369    ; Points to #R(#PEEK(#PC)+(#PEEK(#PC+$01)*$100)).
 $8CC2 DEFB $05      ; Number of messages in block: #N(#PEEK(#PC)).
; Message Block: #N((#PC-$8CB1)/$03).
 $8CC3 DEFW $8477    ; Points to #R(#PEEK(#PC)+(#PEEK(#PC+$01)*$100)).
 $8CC5 DEFB $05      ; Number of messages in block: #N(#PEEK(#PC)).
; Message Block: #N((#PC-$8CB1)/$03).
 $8CC6 DEFW $8585    ; Points to #R(#PEEK(#PC)+(#PEEK(#PC+$01)*$100)).
 $8CC8 DEFB $01      ; Number of messages in block: #N(#PEEK(#PC)).
; Message Block: #N((#PC-$8CB1)/$03).
 $8CC9 DEFW $85BB    ; Points to #R(#PEEK(#PC)+(#PEEK(#PC+$01)*$100)).
 $8CCB DEFB $04      ; Number of messages in block: #N(#PEEK(#PC)).
; Message Block: #N((#PC-$8CB1)/$03).
 $8CCC DEFW $8693    ; Points to #R(#PEEK(#PC)+(#PEEK(#PC+$01)*$100)).
 $8CCE DEFB $03      ; Number of messages in block: #N(#PEEK(#PC)).
; Message Block: #N((#PC-$8CB1)/$03).
 $8CCF DEFW $8735    ; Points to #R(#PEEK(#PC)+(#PEEK(#PC+$01)*$100)).
 $8CD1 DEFB $05      ; Number of messages in block: #N(#PEEK(#PC)).
; Message Block: #N((#PC-$8CB1)/$03).
 $8CD2 DEFW $8843    ; Points to #R(#PEEK(#PC)+(#PEEK(#PC+$01)*$100)).
 $8CD4 DEFB $03      ; Number of messages in block: #N(#PEEK(#PC)).
; Message Block: #N((#PC-$8CB1)/$03).
 $8CD5 DEFW $891B    ; Points to #R(#PEEK(#PC)+(#PEEK(#PC+$01)*$100)).
 $8CD7 DEFB $01      ; Number of messages in block: #N(#PEEK(#PC)).
; Message Block: #N((#PC-$8CB1)/$03).
 $8CD8 DEFW $88E5    ; Points to #R(#PEEK(#PC)+(#PEEK(#PC+$01)*$100)).
 $8CDA DEFB $01      ; Number of messages in block: #N(#PEEK(#PC)).
; Message Block: #N((#PC-$8CB1)/$03).
 $8CDB DEFW $8951    ; Points to #R(#PEEK(#PC)+(#PEEK(#PC+$01)*$100)).
 $8CDD DEFB $03      ; Number of messages in block: #N(#PEEK(#PC)).
; Message Block: #N((#PC-$8CB1)/$03).
 $8CDE DEFW $89F3    ; Points to #R(#PEEK(#PC)+(#PEEK(#PC+$01)*$100)).
 $8CE0 DEFB $01      ; Number of messages in block: #N(#PEEK(#PC)).
; Message Block: #N((#PC-$8CB1)/$03).
 $8CE1 DEFW $8A29    ; Points to #R(#PEEK(#PC)+(#PEEK(#PC+$01)*$100)).
 $8CE3 DEFB $06      ; Number of messages in block: #N(#PEEK(#PC)).
; Message Block: #N((#PC-$8CB1)/$03).
 $8CE4 DEFW $8B6D    ; Points to #R(#PEEK(#PC)+(#PEEK(#PC+$01)*$100)).
 $8CE6 DEFB $03      ; Number of messages in block: #N(#PEEK(#PC)).
; Message Block: #N((#PC-$8CB1)/$03).
 $8CE7 DEFW $8C0F    ; Points to #R(#PEEK(#PC)+(#PEEK(#PC+$01)*$100)).
 $8CE9 DEFB $03      ; Number of messages in block: #N(#PEEK(#PC)).

; Messaging?
g$8CEA DEFB $00
 $8CEB DEFW $0000
 $8CED DEFW $0000
@label=CurrentMessageID
 $8CEF DEFB $00

; Initialise New Game
;
; Used by the routine at #R$6F94.
@label=InitialiseNewGame
c$8CF0 LD HL,$0606   ; {Write #N$06 to *#R$8F7C and #N$06 to *#R$8F7D.
 $8CF3 LD ($8F7C),HL ; }
 $8CF6 LD HL,$0000   ; {Write #N($0000,$04,$04) to; #LIST { *#R$98E3 / *#R$98E4
 $8CF9 LD ($98E3),HL ; } { *#R$96B4 / *#R$96B5 } { *#R$96B7 / *#R$96B8 } LIST#
 $8CFC LD ($96B4),HL ;
 $8CFF LD ($96B7),HL ; }
 $8D02 LD A,H        ; #REGa=#N$00.
 $8D03 LD HL,$6464   ; {Write #N$6464 to *#R$96B5 / *#R$96B6.
 $8D06 LD ($96B5),HL ; }
 $8D09 INC A         ; {Write #N$01 to; #LIST { *#R$8D49 } { *#R$8E42 } LIST#
 $8D0A LD ($8D49),A  ;
 $8D0D LD ($8E42),A  ; }
@label=Game_Loop
*$8D10 CALL $9822    ; Call #R$9822.
@label=InitialiseRound
*$8D13 LD A,$F4      ;
 $8D15 OUT ($FE),A   ;
 $8D17 CALL $8D4A    ; Call #R$8D4A.
 $8D1A OR A          ; {Jump to #R$8D13 if the response was zero.
 $8D1B JR Z,$8D13    ; }
 $8D1D DEC A         ; {Jump to #R$8D42 if the response was #N$01.
 $8D1E JR Z,$8D42    ; }
 $8D20 LD A,($98E3)  ; {Jump to #R$8D3E if *#R$98E3 is equal to #N$11.
 $8D23 CP $11        ;
 $8D25 JR Z,$8D3E    ; }
; #UDGTABLE
; { #MESSAGE$12(message-18) }
; UDGTABLE#
 $8D27 LD A,$12      ; {Call #R$7D97 using message block #N$12.
 $8D29 CALL $7D97    ; }
 $8D2C LD A,$04      ; {Write #N$04 to *#R$8F7D.
 $8D2E LD ($8F7D),A  ; }
 $8D31 LD A,($8D49)  ; #REGa=*#R$8D49.
 $8D34 XOR %00000001 ; Flip bit 1.
 $8D36 LD ($8D49),A  ; {Write #REGa to; #LIST { *#R$8D49 } { *#R$8E42 } LIST#
 $8D39 LD ($8E42),A  ; }
 $8D3C JR $8D10      ; Jump to #R$8D10.

; Print "Game Over"
;
; Used by the routine at #R$8CF0.
;
; .
;
; #UDGTABLE
; { #MESSAGE$07(message-07) }
; UDGTABLE#
@label=Print_GameOver
c$8D3E LD A,$07      ; #REGa=#R$8585(#N$07).
 $8D40 JR $8D44      ; Jump to #R$8D44.
; #UDGTABLE
; { #MESSAGE$0E(message-14) }
; UDGTABLE#
@label=Print_RoundOver
*$8D42 LD A,$0E      ; {Call #R$7D97 using message block #R$8951(#N$0E).
@label=PrintAlias
*$8D44 CALL $7D97    ; }
 $8D47 XOR A         ; #REGa=#N$00.
 $8D48 RET           ; Return.

; Game status buffer entry at 8D49
g$8D49 DEFB $00

; Play Game
;
; Used by the routine at #R$8CF0.
;
; .
;
; Reset both the player and girls hands. Note that #N$FF is used to
; signify "draw a new card".
@label=PlayGame
c$8D4A LD HL,$96C7   ; #REGhl=#R$96C7.
 $8D4D LD B,$0A      ; #REGb=#N$0A (i.e. two hands at #N$05 cards each).
@label=ResetHand_Loop
*$8D4F LD (HL),$FF   ; Write #N$FF to *#REGhl.
 $8D51 INC HL        ; Increment #REGhl by one.
 $8D52 DJNZ $8D4F    ; Decrease the card counter by one and loop back to
                     ; #R$8D4F until both hands have been reset.
; Prep the attributes for the final parts of printing the UI.
 $8D54 LD A,$20      ; {#HTML(Write #COLOUR$20 to *<a rel="noopener nofollow"
 $8D56 LD ($5C8D),A  ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C8D.html">ATTR_P</a>.)
                     ; }
 $8D59 LD B,$06      ; {#HTML(Clear the bottom #N$06 lines using <a
 $8D5B CALL $0E44    ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0E44.html">CL_LINE</a>.)
                     ; }
 $8D5E XOR A         ; {#HTML(Write #N$00 to; #LIST { *#R$96B4 } { *<a
 $8D5F LD ($96B4),A  ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C6B.html">DF_SZ</a>
 $8D62 LD ($5C6B),A  ; } LIST#)}
 $8D65 INC A         ; {Write #N$01 to *#R$96B8.
 $8D66 LD ($96B8),A  ; }
 $8D69 INC A         ; {Write #N$02 to *#R$8E59.
 $8D6A LD ($8E59),A  ; }
; Print "DROP", "HOLD" and "RAISE".
 $8D6D LD HL,$9314   ; #REGhl=#R$9314.
 $8D70 CALL $187D    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1855.html#187D">OUT_LINE2</a>.)
 $8D73 LD A,$02      ; {#HTML(Write #N$02 to *<a
 $8D75 LD ($5C6B),A  ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C6B.html">DF_SZ</a>.)
                     ; }
 $8D78 LD BC,$0720   ; #REGbc=#N($0720,$04,$04).
 $8D7B CALL $0DE2    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0DD9.html#0DE2">#N$0DE2</a>
                     ; (CL_SET).)
 $8D7E CALL $8E5A    ; Call #R$8E5A.
; Print "CURSOR" five times in a row to where it would display under each
; card in the players hand.
 $8D81 LD B,$05      ; #REGb=#N$05.
@label=PrintCursorLoop
*$8D83 LD HL,$930D   ; #REGhl=#R$930D.
 $8D86 CALL $187D    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1855.html#187D">OUT_LINE2</a>.)
 $8D89 DJNZ $8D83    ; Decrease counter by one and loop back to #R$8D83 until
                     ; counter is zero.
; Blank out #N$07 lines of the display.
 $8D8B LD HL,$5960   ; #REGhl=#N$5960 (attribute buffer location).
 $8D8E LD B,$E0      ; #REGb=#N$E0.
@label=Blank_Loop
*$8D90 LD (HL),$00   ; Write #COLOUR$00 to *#REGhl.
 $8D92 INC HL        ; Increment #REGhl by one.
 $8D93 DJNZ $8D90    ; Decrease counter by one and loop back to #R$8D90 until
                     ; counter is zero.
; Make the girl buy in.
 $8D95 LD A,$0A      ; #REGa=#N$0A.
 $8D97 CALL $96A1    ; Call #R$96A1.
 $8D9A LD A,B        ; {Write #REGb to *#R$96B7.
 $8D9B LD ($96B7),A  ; }
 $8D9E CALL $9245    ; Call #R$9245.
 $8DA1 XOR A         ; {Write #N$00 to *#R$96B7.
 $8DA2 LD ($96B7),A  ; }
 $8DA5 CALL $959B    ; Call #R$959B.
 $8DA8 LD IX,$96CC   ; #REGix=#R$96CC.
 $8DAC CALL $954E    ; Call #R$954E.
 $8DAF CALL $9518    ; Call #R$9518.
 $8DB2 LD A,($98E4)  ; #REGa=*#R$98E4.
 $8DB5 LD B,A        ; #REGb=#REGa.
 $8DB6 INC A         ; Increment #REGa by one.
*$8DB7 PUSH BC       ; Stash #REGbc on the stack.
 $8DB8 CALL $96D1    ; Call #R$96D1.
 $8DBB CALL $954E    ; Call #R$954E.
 $8DBE CALL $9518    ; Call #R$9518.
 $8DC1 POP BC        ; Restore #REGbc from the stack.
 $8DC2 DJNZ $8DB7    ; Decrease counter by one and loop back to #R$8DB7 until
                     ; counter is zero.
 $8DC4 LD BC,$0007   ; #REGbc=#N($0007,$04,$04).
 $8DC7 LD HL,$949B   ; #REGhl=#R$949B.
 $8DCA LD DE,$96C0   ; #REGde=#R$96C0.
 $8DCD LDIR          ; LDIR.
 $8DCF CALL $8F7E    ; Call #R$8F7E.
 $8DD2 LD IX,$96C7   ; #REGix=#R$96C7.
 $8DD6 CALL $954E    ; Call #R$954E.
 $8DD9 CALL $E313    ; Call #R$E313.
 $8DDC CALL $9003    ; Call #R$9003.
 $8DDF CALL $954E    ; Call #R$954E.
 $8DE2 CALL $E313    ; Call #R$E313.
 $8DE5 CALL $9518    ; Call #R$9518.
 $8DE8 LD BC,$0007   ; #REGbc=#N($0007,$04,$04).
 $8DEB LD HL,$949B   ; #REGhl=#R$949B.
 $8DEE LD DE,$96B9   ; #REGde=#R$96B9.
 $8DF1 LDIR          ; LDIR.
 $8DF3 CALL $8F7E    ; Call #R$8F7E.
 $8DF6 LD A,$01      ; {Write #N$01 to *#R$8E43.
 $8DF8 LD ($8E43),A  ; }
 $8DFB LD A,($8E42)  ; #REGa=*#R$8E42.
 $8DFE XOR %00000001 ; Flip bit 0.
 $8E00 LD ($8E42),A  ; Write #REGa to *#R$8E42.
 $8E03 JR Z,$8E22    ; Jump to #R$8E22 if #REGa is zero.
; #UDGTABLE
; { #MESSAGE$0D(message-13) }
; UDGTABLE#
*$8E05 LD A,$0D      ; {Call #R$7D97 using message block #N$0D.
 $8E07 CALL $7D97    ; }
 $8E0A CALL $960C    ; Call #R$960C.
 $8E0D PUSH AF       ; Stash #REGaf on the stack.
 $8E0E CALL $8F7E    ; Call #R$8F7E.
 $8E11 POP AF        ; Restore #REGaf from the stack.
 $8E12 OR A          ; {Jump to #R$8F20 if #REGa is zero.
 $8E13 JP Z,$8F20    ; }
 $8E16 CP $03        ; {Call #R$8EE2 if #REGa is equal to #N$03.
 $8E18 CALL Z,$8EE2  ; }
 $8E1B XOR A         ; {Write #N$00 to *#R$8E43.
 $8E1C LD ($8E43),A  ; }
 $8E1F CALL $8E44    ; Call #R$8E44.
; #UDGTABLE
; { #MESSAGE$0C(message-12) }
; UDGTABLE#
*$8E22 LD A,$0C      ; {Call #R$7D97 using message block #N$0C.
 $8E24 CALL $7D97    ; }
 $8E27 CALL $8F7E    ; Call #R$8F7E.
 $8E2A CALL $9171    ; Call #R$9171.
 $8E2D OR A          ; {Jump to #R$8F06 if #REGa is zero.
 $8E2E JP Z,$8F06    ; }
 $8E31 CP $03        ; {Call #R$8EE2 if #REGa is equal to #N$03.
 $8E33 CALL Z,$8EE2  ; }
 $8E36 XOR A         ; {Write #N$00 to *#R$8E43.
 $8E37 LD ($8E43),A  ; }
 $8E3A CALL $8E44    ; Call #R$8E44.
 $8E3D CALL $8F7E    ; Call #R$8F7E.
 $8E40 JR $8E05      ; Jump to #R$8E05.
 $8E42 DEFB $01      ;
 $8E43 DEFB $00      ;

; Routine at 8E44
;
; Used by the routine at #R$8D4A.
c$8E44 LD A,($8E59)  ; {Increment *#R$8E59 by one.
 $8E47 INC A         ;
 $8E48 LD ($8E59),A  ; }
 $8E4B SRL A         ; Shift #REGa right.
 $8E4D RET C         ; Return if {} is lower.
 $8E4E LD ($96B8),A  ; Write #REGa to *#R$96B8.
 $8E51 CP $04        ; Compare #REGa with #N$04...
 $8E53 POP HL        ; Restore #REGhl from the stack.
 $8E54 CALL Z,$8EE2  ; Call #R$8EE2 if #REGa as equal to #N$04 on line #R$8E51.
 $8E57 PUSH HL       ; Stash #REGhl on the stack.
 $8E58 RET           ; Return.
 $8E59 DEFB $00      ;

; Draw User Interface
;
; Used by the routine at #R$8D4A.
;
; .
;
; #PUSHS #UDGTABLE
; { #SIM(start=$8D54,stop=$8D6D)#SIM(start=$8D73,stop=$8D81)#SCR$02{$00,$11C,$200,$60}(user-interface) }
; UDGTABLE# #POPS
@label=DrawUserInterface
c$8E5A LD HL,$5620   ;
 $8E5D LD E,$02      ;
*$8E5F LD D,$02      ;
*$8E61 PUSH HL       ;
 $8E62 LD C,$03      ;
*$8E64 LD (HL),$03   ;
 $8E66 INC HL        ;
 $8E67 LD B,$1E      ;
*$8E69 LD (HL),$FF   ;
 $8E6B INC HL        ;
 $8E6C DJNZ $8E69    ;
 $8E6E LD (HL),$C0   ;
 $8E70 PUSH DE       ;
 $8E71 LD DE,$0021   ;
 $8E74 ADD HL,DE     ;
 $8E75 POP DE        ;
 $8E76 DEC C         ;
 $8E77 JR NZ,$8E64   ;
 $8E79 POP HL        ;
 $8E7A INC H         ;
 $8E7B DEC D         ;
 $8E7C JR NZ,$8E61   ;
 $8E7E PUSH DE       ;
 $8E7F LD DE,$07C0   ;
 $8E82 SBC HL,DE     ;
 $8E84 POP DE        ;
 $8E85 DEC E         ;
 $8E86 JR NZ,$8E5F   ;
 $8E88 LD HL,$5040   ;
 $8E8B LD C,$08      ;
*$8E8D PUSH HL       ;
 $8E8E LD B,$03      ;
*$8E90 LD (HL),$03   ;
 $8E92 LD DE,$001F   ;
 $8E95 ADD HL,DE     ;
 $8E96 LD (HL),$C0   ;
 $8E98 LD DE,$0021   ;
 $8E9B ADD HL,DE     ;
 $8E9C DJNZ $8E90    ;
 $8E9E POP HL        ;
 $8E9F INC H         ;
 $8EA0 DEC C         ;
 $8EA1 JR NZ,$8E8D   ;
 $8EA3 LD HL,$504F   ;
 $8EA6 LD C,$01      ;
 $8EA8 CALL $8ECD    ;
 $8EAB LD HL,$508A   ;
 $8EAE CALL $8ECB    ;
 $8EB1 LD HL,$5094   ;
 $8EB4 CALL $8ECB    ;
 $8EB7 LD HL,$5A41   ;
 $8EBA LD C,$03      ;
*$8EBC LD B,$1E      ;
*$8EBE LD (HL),$78   ;
 $8EC0 INC HL        ;
 $8EC1 DJNZ $8EBE    ;
 $8EC3 LD DE,$0022   ;
 $8EC6 ADD HL,DE     ;
 $8EC7 DEC C         ;
 $8EC8 JR NZ,$8EBC   ;
 $8ECA RET           ;
*$8ECB LD C,$02      ;
*$8ECD PUSH HL       ;
 $8ECE LD B,$08      ;
*$8ED0 LD (HL),$01   ;
 $8ED2 INC HL        ;
 $8ED3 LD (HL),$80   ;
 $8ED5 DEC HL        ;
 $8ED6 INC H         ;
 $8ED7 DJNZ $8ED0    ;
 $8ED9 POP HL        ;
 $8EDA LD DE,$0040   ;
 $8EDD ADD HL,DE     ;
 $8EDE DEC C         ;
 $8EDF JR NZ,$8ECD   ;
 $8EE1 RET           ;

; Handler: Showdown
;
; Used by the routines at #R$8D4A and #R$8E44.
@label=Handler_Showdown
c$8EE2 LD A,($8E43)  ; {Return if *#R$8E43 is not zero.
 $8EE5 OR A          ;
 $8EE6 RET NZ        ; }
 $8EE7 POP HL        ; Restore #REGhl from the stack.
; #UDGTABLE
; { #MESSAGE$09(message-09) }
; UDGTABLE#
 $8EE8 LD A,$09      ; {Call #R$7D97 using message block #N$09.
 $8EEA CALL $7D97    ; }
 $8EED LD IX,$96CC   ; #REGix=#R$96CC.
 $8EF1 CALL $E313    ; Call #R$E313.
 $8EF4 LD HL,$96B9   ; #REGhl=#R$96B9.
 $8EF7 LD DE,$96C0   ; #REGde=#R$96C0.
 $8EFA LD B,$07      ; #REGb=#N$07.
@label=CardChecking_Loop
*$8EFC LD A,(DE)     ; {Jump to #R$8F20 if *#REGde is lower than *#REGhl.
 $8EFD CP (HL)       ;
 $8EFE JR C,$8F20    ; }
 $8F00 JR NZ,$8F06   ; Jump to #R$8F06 if *#REGde is not equal to *#REGhl.
 $8F02 INC HL        ; Increment #REGhl by one.
 $8F03 INC DE        ; Increment #REGde by one.
 $8F04 DJNZ $8EFC    ; Decrease counter by one and loop back to #R$8EFC until
                     ; counter is zero.
; Continue on to #R$8F06.

; Girl Won Round
;
; Used by the routines at #R$8D4A and #R$8EE2.
@label=GirlWonRound
c$8F06 LD A,($96B4)  ; {Update *#R$96B6 as the girl has won this round. So, add *#R$96B4 to
 $8F09 LD B,A        ; *#R$96B6 and write the result back to *#R$96B6.
 $8F0A LD A,($96B6)  ;
 $8F0D ADD A,B       ;
 $8F0E LD ($96B6),A  ; }
; Display a random "I've won" message.
; #UDGTABLE { #MESSAGE$00(message-00) } UDGTABLE#
 $8F11 XOR A         ; {Call #R$7D97 using message block #N$00.
 $8F12 CALL $7D97    ; }
; Check if this is round over or game over for the player.
 $8F15 LD A,($96B5)  ; {Call #R$8F3B if *#R$96B5 is lower than #N$0A.
 $8F18 CP $0A        ;
 $8F1A LD A,$00      ;
 $8F1C CALL C,$8F3B  ; }
 $8F1F RET           ; Return with #REGa being #N$00.

; Won Round
;
; Used by the routines at #R$8D4A and #R$8EE2.
@label=WonRound
c$8F20 LD A,($96B4)  ; {Update *#R$96B5 as the player has won this round. So, add *#R$96B4
 $8F23 LD B,A        ; to *#R$96B5 and write the result back to *#R$96B5.
 $8F24 LD A,($96B5)  ;
 $8F27 ADD A,B       ;
 $8F28 LD ($96B5),A  ; }
; #UDGTABLE
; { #MESSAGE$04(message-04) }
; UDGTABLE#
 $8F2B LD A,$04      ; {Call #R$7D97 using message block #N$04.
 $8F2D CALL $7D97    ; }
; Check if this is round over or game over for the girl.
 $8F30 LD A,($96B6)  ; {Call #R$8F5A if *#R$96B6 is lower than #N$0A.
 $8F33 CP $0A        ;
 $8F35 LD A,$00      ;
 $8F37 CALL C,$8F5A  ; }
 $8F3A RET           ; Return with #REGa being #N$00.

; Lost Round
;
; Used by the routine at #R$8F06.
@label=LostRound
c$8F3B LD A,($8F7C)  ; {Jump to #R$8F52 if *#R$8F7C is zero.
 $8F3E OR A          ;
 $8F3F JR Z,$8F52    ; }
; The player lost, so lose a life...
 $8F41 DEC A         ; {Decrease *#R$8F7C by one.
 $8F42 LD ($8F7C),A  ; }
; Replenish the player and girls cash reserves.
 $8F45 LD HL,$6464   ; {Write #N$6464 to #R$96B5.
 $8F48 LD ($96B5),HL ; }
 $8F4B LD A,$08      ; #REGa=#N$08 (does nothing, this is immediately
                     ; overwritten).
 $8F4D CALL $779F    ; Call #R$779F.
 $8F50 XOR A         ; {Return with #REGa being #N$00.
 $8F51 RET           ; }
; #UDGTABLE
; { #MESSAGE$0E(message-14) }
; UDGTABLE#
@label=LostRound_GameOver
*$8F52 LD A,$0E      ; {Call #R$7D97 using message block #R$8951(#N$0E).
 $8F54 CALL $7D97    ; }
 $8F57 LD A,$01      ; {Return with #REGa being #N$01.
 $8F59 RET           ; }

; Routine at 8F5A
;
; Used by the routine at #R$8F20.
c$8F5A LD HL,$6464   ; {Write #N$6464 to *#R$96B5.
 $8F5D LD ($96B5),HL ; }
 $8F60 LD A,($8F7D)  ; #REGa=*#R$8F7D.
 $8F63 OR A          ; {Jump to #R$8F74 if #REGa is zero.
 $8F64 JR Z,$8F74    ; }
 $8F66 DEC A         ; Decrease #REGa by one.
 $8F67 LD ($8F7D),A  ; Write #REGa to *#R$8F7D.
 $8F6A CALL $9822    ; Call #R$9822.
; #UDGTABLE
; { #MESSAGE$05(message-05) }
; UDGTABLE#
 $8F6D LD A,$05      ; {Call #R$7D97 using message block #N$05.
 $8F6F CALL $7D97    ; }
 $8F72 XOR A         ; #REGa=#N$00.
 $8F73 RET           ; Return.
; #UDGTABLE
; { #MESSAGE$06(message-06) }
; UDGTABLE#
*$8F74 LD A,$06      ; {Call #R$7D97 using message block #N$06.
 $8F76 CALL $7D97    ; }
 $8F79 LD A,$FF      ; #REGa=#N$FF.
 $8F7B RET           ; Return.

; Player Lives
@label=PlayerLives
g$8F7C DEFB $06

; Girl Lives
@label=GirlLives
g$8F7D DEFB $07

; Print Stats
;
; Used by the routines at #R$8D4A, #R$9171 and #R$9258.
@label=PrintStats
c$8F7E LD HL,$8FE2   ; #REGhl=#R$8FE2.
 $8F81 CALL $187D    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1855.html#187D">OUT_LINE2</a>.)
; Print "POT" value.
 $8F84 LD HL,$92C6   ; #REGhl=#R$92C6.
 $8F87 LD A,($96B4)  ; #REGa=*#R$96B4.
 $8F8A LD D,$00      ; #REGd=#N$00.
 $8F8C CALL $8FE9    ; Call #R$8FE9.
; Print current round.
 $8F8F LD HL,$932D   ; #REGhl=#R$932D.
 $8F92 LD A,($96B8)  ; #REGa=*#R$96B8.
 $8F95 LD D,$FF      ; #REGd=#N$FF.
 $8F97 CALL $8FE9    ; Call #R$8FE9.
; Print "YOU" and the players cash reserves.
 $8F9A LD HL,$92CE   ; #REGhl=#R$92CE.
 $8F9D LD A,($96B5)  ; #REGa=*#R$96B5.
 $8FA0 LD D,$00      ; #REGd=#N$00.
 $8FA2 CALL $8FE9    ; Call #R$8FE9.
; Print the girls name and their cash reserve.
 $8FA5 LD A,($98E4)  ; #REGa=*#R$98E4.
 $8FA8 LD DE,$000B   ; The length of each girls name is #N($000B,$04,$04), so
                     ; store this in #REGde for the calculation.
 $8FAB LD HL,$92CB   ; #REGhl=#R$92D6(#N$92CB) (e.g. #R$92D6 less
                     ; #N($000B,$04,$04)).
@label=FindGirlsName_Loop
*$8FAE ADD HL,DE     ; Keep adding #N($000B,$04,$04) to #REGhl while #REGa is
                     ; non-zero.
 $8FAF DEC A         ; Decrease #REGa by one.
 $8FB0 JR NZ,$8FAE   ; Jump to #R$8FAE until #REGa is zero.
 $8FB2 LD A,($96B6)  ; #REGa=*#R$96B6.
 $8FB5 LD D,$00      ; #REGd=#N$00.
 $8FB7 CALL $8FE9    ; Call #R$8FE9.
; Print "Raise" and current value.
 $8FBA LD HL,$92F7   ; #REGhl=#R$92F7.
 $8FBD LD A,($96B7)  ; #REGa=*#R$96B7.
 $8FC0 LD D,$FE      ; #REGd=#N$FE.
 $8FC2 CP $0A        ; {Jump to #R$8FC8 if #REGa is higher than #N$0A.
 $8FC4 JR NC,$8FC8   ; }
 $8FC6 LD D,$00      ; #REGd=#N$00.
*$8FC8 CALL $8FE9    ; Call #R$8FE9.
; Prints the players lives.
 $8FCB LD HL,$9301   ; #REGhl=#R$9301.
 $8FCE LD A,($8F7C)  ; #REGa=*#R$8F7C.
 $8FD1 LD D,$FF      ; #REGd=#N$FF.
 $8FD3 CALL $8FE9    ; Call #R$8FE9.
 $8FD6 LD HL,$9306   ; #REGhl=#R$9306.
 $8FD9 LD A,($8F7D)  ; #REGa=*#R$8F7D.
 $8FDC LD D,$FF      ; #REGd=#N$FF.
 $8FDE CALL $8FE9    ; Call #R$8FE9.
 $8FE1 RET           ; Return.
 $8FE2 DEFB $13,$01  ; BRIGHT: #MAP(#PEEK(#PC+$01))(OFF,1:ON).
 $8FE4 DEFB $10,$00  ; Set INK: #INK(#PEEK(#PC+$01)).
 $8FE6 DEFB $11,$07  ; Set PAPER: #INK(#PEEK(#PC+$01)).
 $8FE8 DEFB $0D      ; "ENTER".
@label=PrintStatToScreen
*$8FE9 PUSH DE       ; {Stash #REGde and #REGaf on the stack.
 $8FEA PUSH AF       ; }
 $8FEB CALL $187D    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1855.html#187D">OUT_LINE2</a>.)
 $8FEE POP AF        ; Restore #REGaf from the stack.
 $8FEF LD B,$00      ; #REGb=#N$00.
 $8FF1 LD C,A        ; #REGc=#REGa.
 $8FF2 CALL $1A1B    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1A1B.html">OUT_NUM_1</a>.)
 $8FF5 POP DE        ; Restore #REGde from the stack.
 $8FF6 INC D         ; Increment #REGd by one.
 $8FF7 RET Z         ; Return if #REGd is zero.
 $8FF8 PUSH DE       ; Stash #REGde on the stack.
 $8FF9 LD A,$24      ; {Print "#CHR$24".
 $8FFB RST $10       ; }
 $8FFC POP DE        ; Restore #REGde from the stack.
 $8FFD INC D         ; Increment #REGd by one.
 $8FFE RET Z         ; Return if #REGd is zero.
 $8FFF LD A,$20      ; {Print "SPACE".
 $9001 RST $10       ; }
 $9002 RET           ; Return.

; Mark Cards
;
; Used by the routine at #R$8D4A.
;
; .
;
; #UDGTABLE
; { #MESSAGE$0F(message-15) }
; UDGTABLE#
@label=MarkCards
c$9003 LD A,$0F      ; {Call #R$7D97 using message block #N$0F.
 $9005 CALL $7D97    ; }
 $9008 LD HL,$9054   ; #REGhl=#R$9054.
 $900B LD B,$06      ; #REGb=#N$06.
*$900D LD (HL),$00   ; Write #N$00 to *#REGhl.
 $900F INC HL        ; Increment #REGhl by one.
 $9010 DJNZ $900D    ; Decrease counter by one and loop back to #R$900D until
                     ; counter is zero.
; This entry point is used by the routine at #R$905C.
*$9012 LD HL,$5A1B   ; #REGhl=#N$5A1B (attribute buffer location).
 $9015 LD A,($9054)  ; #REGa=*#R$9054.
 $9018 LD DE,$0006   ; #REGde=#N($0006,$04,$04).
 $901B INC A         ; Increment #REGa by one.
*$901C ADD HL,DE     ; #REGhl+=#REGde.
 $901D DEC A         ; Decrease #REGa by one.
 $901E JR NZ,$901C   ; Jump to #R$901C until #REGa is zero.
 $9020 LD ($905A),HL ; Write #REGhl to *#R$905A.
*$9023 LD C,$00      ; #REGc=#N$00.
*$9025 LD A,C        ; #REGa=#REGc.
 $9026 SLA A         ; {Shift #REGa left three positions (with carry).
 $9028 SLA A         ;
 $902A SLA A         ; }
 $902C OR %01000000  ; Set bit 6.
 $902E LD HL,($905A) ; #REGhl=*#R$905A.
 $9031 LD B,$06      ; #REGb=#N$06.
*$9033 LD (HL),A     ; Write #REGa to *#REGhl.
 $9034 INC HL        ; Increment #REGhl by one.
 $9035 DJNZ $9033    ; Decrease counter by one and loop back to #R$9033 until
                     ; counter is zero.
 $9037 LD D,$19      ; #REGd=#N$19.
*$9039 DEC D         ; Decrease #REGd by one.
 $903A JR NZ,$9039   ; Jump to #R$9039 until #REGd is zero.
 $903C INC C         ; Increment #REGc by one.
 $903D LD A,C        ; {Jump to #R$9025 if #REGc is not equal to #N$08.
 $903E CP $08        ;
 $9040 JR NZ,$9025   ; }
 $9042 CALL $90D8    ; Call #R$90D8.
 $9045 OR A          ; Set the bits from #REGa.
 $9046 JR Z,$9093    ; Jump to #R$9093 if #REGa is zero.
 $9048 CP $03        ; {Jump to #R$905C if #REGa is equal to #N$03.
 $904A JR Z,$905C    ; }
 $904C CP $04        ; {Jump to #R$9068 if #REGa is equal to #N$04.
 $904E JR Z,$9068    ; }
 $9050 JR C,$90BB    ; Jump to #R$90BB if #REGa is lower than #N$04.
 $9052 JR $9023      ; Jump to #R$9023.

; Data block at 9054
b$9054 DEFB $00
 $9055 DEFB $00,$00,$00,$00,$00
 $905A DEFW $0000

; Routine at 905C
;
; Used by the routine at #R$9003.
c$905C LD A,($9054)  ; #REGa=*#R$9054.
 $905F PUSH AF       ; Stash #REGaf on the stack.
 $9060 OR A          ; Set the bits from #REGa.
 $9061 JR NZ,$9065   ; Jump to #R$9065 if #REGa is not zero.
 $9063 LD A,$05      ; #REGa=#N$05.
*$9065 DEC A         ; Decrease #REGa by one.
 $9066 JR $9073      ; Jump to #R$9073.
; This entry point is used by the routine at #R$9003.
*$9068 LD A,($9054)  ; #REGa=*#R$9054.
 $906B PUSH AF       ; Stash #REGaf on the stack.
 $906C CP $04        ; {Jump to #R$9072 if #REGa is not equal to #N$04.
 $906E JR NZ,$9072   ; }
 $9070 LD A,$FF      ; #REGa=#N$FF.
*$9072 INC A         ; Increment #REGa by one.
*$9073 LD ($9054),A  ; Write #REGa to *#R$9054.
 $9076 POP AF        ; Restore #REGaf from the stack.
 $9077 INC A         ; Increment #REGa by one.
 $9078 LD B,A        ; #REGb=#REGa.
 $9079 LD HL,$9054   ; #REGhl=#R$9054.
*$907C INC HL        ; Increment #REGhl by one.
 $907D DEC A         ; Decrease #REGa by one.
 $907E JR NZ,$907C   ; Jump to #R$907C until #REGa is zero.
 $9080 LD A,(HL)     ; #REGa=*#REGhl.
 $9081 LD HL,$5A1B   ; #REGhl=#N$5A1B (attribute buffer location).
 $9084 LD DE,$0006   ; #REGde=#N($0006,$04,$04).
*$9087 ADD HL,DE     ; #REGhl+=#REGde.
 $9088 DJNZ $9087    ; Decrease counter by one and loop back to #R$9087 until
                     ; counter is zero.
 $908A LD B,$06      ; #REGb=#N$06.
*$908C LD (HL),A     ; Write #REGa to *#REGhl.
 $908D INC HL        ; Increment #REGhl by one.
 $908E DJNZ $908C    ; Decrease counter by one and loop back to #R$908C until
                     ; counter is zero.
*$9090 JP $9012      ; Jump to #R$9012.
; This entry point is used by the routine at #R$9003.
*$9093 LD HL,$9055   ; #REGhl=#R$9055.
 $9096 LD B,$05      ; #REGb=#N$05.
 $9098 LD C,$00      ; #REGc=#N$00.
*$909A LD A,(HL)     ; #REGa=*#REGhl.
 $909B OR A          ; Set the bits from #REGa.
 $909C JR Z,$909F    ; Jump to #R$909F if #REGa is zero.
 $909E INC C         ; Increment #REGc by one.
*$909F INC HL        ; Increment #REGhl by one.
 $90A0 DJNZ $909A    ; Decrease counter by one and loop back to #R$909A until
                     ; counter is zero.
 $90A2 LD A,($9054)  ; #REGa=*#R$9054.
 $90A5 INC A         ; Increment #REGa by one.
 $90A6 LD HL,$9054   ; #REGhl=#R$9054.
*$90A9 INC HL        ; Increment #REGhl by one.
 $90AA DEC A         ; Decrease #REGa by one.
 $90AB JR NZ,$90A9   ; Jump to #R$90A9 until #REGa is zero.
 $90AD LD A,C        ; {Jump to #R$90B5 if #REGc is lower than #N$03.
 $90AE CP $03        ;
 $90B0 JR C,$90B5    ; }
 $90B2 XOR A         ; #REGa=#N$00.
 $90B3 JR $90B8      ; Jump to #R$90B8.
*$90B5 LD A,(HL)     ; #REGa=*#REGhl.
 $90B6 XOR %00111111 ; Flip bits 0-5.
*$90B8 LD (HL),A     ; Write #REGa to *#REGhl.
 $90B9 JR $9090      ; Jump to #R$9090.
; This entry point is used by the routine at #R$9003.
*$90BB LD DE,$9055   ; #REGde=#R$9055.
 $90BE LD HL,$96C7   ; #REGhl=#R$96C7.
 $90C1 LD B,$05      ; #REGb=#N$05.
*$90C3 LD A,(DE)     ; #REGa=*#REGde.
 $90C4 OR A          ; Set the bits from #REGa.
 $90C5 JR Z,$90C9    ; Jump to #R$90C9 if #REGa is zero.
 $90C7 LD (HL),$FF   ; Write #N$FF to *#REGhl.
*$90C9 INC HL        ; Increment #REGhl by one.
 $90CA INC DE        ; Increment #REGde by one.
 $90CB DJNZ $90C3    ; Decrease counter by one and loop back to #R$90C3 until
                     ; counter is zero.
 $90CD LD HL,$5A21   ; #REGhl=#N$5A21 (attribute buffer location).
 $90D0 LD B,$1E      ; #REGb=#N$1E.
*$90D2 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $90D4 INC HL        ; Increment #REGhl by one.
 $90D5 DJNZ $90D2    ; Decrease counter by one and loop back to #R$90D2 until
                     ; counter is zero.
 $90D7 RET           ; Return.

; Controls: Get Input
;
; Used by the routines at #R$7D97, #R$9003, #R$9171 and #R$9258.
@label=Controls
c$90D8 XOR A         ; {#HTML(Write #N$00 to *<a
 $90D9 LD ($5C08),A  ; href="https://skoolkid.github.io/rom/asm/5C08.html">LAST-K</a>
                     ; (last key pressed).)}
 $90DC LD A,($913E)  ; {Jump to #R$90EC if *#R$913E is not equal to #N$06.
 $90DF CP $06        ;
 $90E1 JR NZ,$90EC   ; }
 $90E3 CALL $9148    ; Call #R$9148.
 $90E6 LD A,C        ; #REGa=Player input.
 $90E7 INC C         ; {Jump to #R$9103 if no input was detected (#N$FF for "no
 $90E8 JR Z,$9103    ; input was made").}
 $90EA JR $9108      ; Jump to #R$9108.
@label=Controls_ReadKeyboard
*$90EC CALL $02BF    ; #HTML(Call <a
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/02BF.html">KEYBOARD</a>.)
 $90EF LD HL,$913E   ; #REGhl=#R$913E.
 $90F2 LD A,($5C08)  ; #HTML(#REGa=*<a
                     ; href="https://skoolkid.github.io/rom/asm/5C08.html">LAST-K</a>
                     ; (last key pressed).)
 $90F5 CP $0E        ; {Jump to #R$9722 if #REGa is equal to #N$0E.
 $90F7 JP Z,$9722    ; }
; Detect the keyboard input.
 $90FA LD B,$05      ; Set a counter of #N$05 for the number of controls to be
                     ; read.
@label=Controls_ReadKeyboard_Loop
*$90FC CP (HL)       ; {Jump to #R$9106 if the currently pressed key is equal
 $90FD JR Z,$9106    ; to *#REGhl.}
 $90FF INC HL        ; {Increment #REGhl by two.
 $9100 INC HL        ; }
 $9101 DJNZ $90FC    ; Decrease counter by one and loop back to #R$90FC until
                     ; counter is zero.
; No input was detected so return with #N$FF.
@label=Controls_NoInput
*$9103 LD A,$FF      ; #REGa=#N$FF.
 $9105 RET           ; Return.
; A valid key press was detected, handle it.
@label=Controls_HandleKeyPress
*$9106 INC HL        ; Increment #REGhl by one.
 $9107 LD A,(HL)     ; #REGa=*#REGhl.
*$9108 PUSH AF       ; Stash #REGaf on the stack.
 $9109 LD A,($92C5)  ; {Jump to #R$9124 if *#R$92C5 is not zero.
 $910C OR A          ;
 $910D JR NZ,$9124   ; }
 $910F LD A,($913E)  ; {Jump to #R$911E if *#R$913E is not equal to #N$06.
 $9112 CP $06        ;
 $9114 JR NZ,$911E   ; }
*$9116 CALL $9148    ; Call #R$9148.
 $9119 INC C         ; Increment #REGc by one.
 $911A JR NZ,$9116   ; Jump to #R$9116 if #REGc is not zero.
 $911C JR $9124      ; Jump to #R$9124.
; Debounce the key press.
@label=DebounceLoop
*$911E CALL $028E    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/028E.html">KEY_SCAN</a>.)
; Handle if no keys are being pressed, for reference:
; .
; #HTML(<blockquote>In all instances the #REGe register is returned with
; a value in the range of +#N$00 to +#N$27, the value being different for each
; of the forty keys of the keyboard, or the value +#N$FF, for no-key.</blockquote>)
 $9121 INC E         ; Set the zero flag if no keys have been pressed.
 $9122 JR NZ,$911E   ; Jump to #R$911E unless no keys are being pressed.
; Play the "select" key wave sound.
@label=PlaySelectWaveSound
*$9124 XOR A         ; {Write #N$00 to *#R$92C5.
 $9125 LD ($92C5),A  ; }
 $9128 POP AF        ; Restore #REGaf from the stack.
 $9129 OR A          ; {Return if #REGa is not zero.
 $912A RET NZ        ; }
 $912B DI            ; Disable interrupts.
 $912C LD B,$C9      ; #REGb=#N$C9.
 $912E LD A,$FC      ; #REGa=#N$FC.
@label=SelectSoundLoop
*$9130 LD C,$32      ; #REGc=#N$32.
@label=SelectSoundDurationLoop
*$9132 DEC C         ; Decrease #REGc by one.
 $9133 JR NZ,$9132   ; Jump to #R$9132 until #REGc is zero.
 $9135 OUT ($FE),A   ; {Flip the speaker bit (bit 4), and send the result to
 $9137 XOR %00010000 ; the speaker.}
 $9139 DJNZ $9130    ; Decrease counter by one and loop back to #R$9130 until
                     ; counter is zero.
 $913B XOR A         ; #REGa=#N$00.
 $913C EI            ; Enable interrupts.
 $913D RET           ; Return.

; User-Defined Keys
;
; Used by the routine at #R$6F50.
@label=UserDefinedKeys
g$913E DEFB $35,$03
 $9140 DEFB $38,$04
 $9142 DEFB $36,$01
 $9144 DEFB $37,$02
 $9146 DEFB $30,$00

; Read Kempston Joystick
;
; Used by the routine at #R$90D8.
;
; O:C Key press input
;
; The response will be:
; #TABLE(default,centre,centre)
; { =h Byte | =h Meaning }
; { #N$00 | Select (fire) }
; { #N$01 | Up }
; { #N$02 | Down }
; { #N$03 | Left }
; { #N$04 | Right }
; { #N$FF | No input }
; TABLE#
@label=Controls_ReadKempston
c$9148 LD B,$3A      ; Set a read counter of #N$3A.
@label=Controls_ReadKempston_Loop
*$914A IN A,($1F)    ; Read Kempston Joystick input.
 $914C DJNZ $914A    ; Decrease the read counter by one and loop back to
                     ; #R$9148 until the counter is zero.
 $914E LD C,$00      ; {Return with #REGc being #N$00 if "fire" has been
 $9150 CP $10        ; pressed.
 $9152 RET Z         ; }
 $9153 INC C         ; {Return with #REGc being #N$01 if "up" has been pressed.
 $9154 CP $04        ;
 $9156 RET Z         ; }
 $9157 INC C         ; {Return with #REGc being #N$02 if "down" has been
 $9158 CP $08        ; pressed.
 $915A RET Z         ; }
 $915B INC C         ; {Return with #REGc being #N$03 if "left" has been
 $915C CP $02        ; pressed.
 $915E RET Z         ; }
 $915F INC C         ; {Return with #REGc being #N$04 if "right" has been
 $9160 CP $01        ; pressed.
 $9162 RET Z         ; }
 $9163 CALL $02BF    ; #HTML(Call <a
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/02BF.html">KEYBOARD</a>.)
 $9166 LD A,($5C08)  ; {#HTML(Jump to #R$9722 if <a
 $9169 CP $0E        ; href="https://skoolkid.github.io/rom/asm/5C08.html">LAST-K</a>
 $916B JP Z,$9722    ; (last key pressed) is #N$0E.)}
 $916E LD C,$FF      ; #REGc=#N$FF.
 $9170 RET           ; Return.

; Routine at 9171
;
; Used by the routine at #R$8D4A.
c$9171 LD A,$01      ; {Write #N$01 to *#R$91D8.
 $9173 LD ($91D8),A  ; }
 $9176 LD B,$68      ; #REGb=#COLOUR$68.
 $9178 CALL $91C2    ; Call #R$91C2.
*$917B CALL $90D8    ; Call #R$90D8.
 $917E CP $03        ; {Jump to #R$918B if "left" has been pressed.
 $9180 JR Z,$918B    ; }
 $9182 CP $04        ; {Jump to #R$918B if "right" has been pressed.
 $9184 JR Z,$918B    ; }
 $9186 OR A          ; {Jump to #R$91B2 if "select" has been pressed.
 $9187 JR Z,$91B2    ; }
 $9189 JR $917B      ; Jump to #R$917B.
*$918B PUSH AF       ; Stash #REGaf on the stack.
 $918C LD B,$78      ; #REGb=#COLOUR$78.
 $918E CALL $91C2    ; Call #R$91C2.
 $9191 POP AF        ; Restore #REGaf from the stack.
 $9192 CP $04        ; Compare #REGa with #N$04.
 $9194 LD A,($91D8)  ; #REGa=*#R$91D8.
 $9197 JR Z,$91A1    ; Jump to #R$91A1 if #REGa was equal to #N$04 on line
                     ; #R$9192.
 $9199 OR A          ; {Jump to #R$919E if *#R$91D8 is not zero.
 $919A JR NZ,$919E   ; }
 $919C LD A,$03      ; #REGa=#N$03.
*$919E DEC A         ; Decrease #REGa by one.
 $919F JR $91A8      ; Jump to #R$91A8.
*$91A1 CP $02        ; {Jump to #R$91A7 if #REGa is not equal to #N$02.
 $91A3 JR NZ,$91A7   ; }
 $91A5 LD A,$FF      ; #REGa=#N$FF.
*$91A7 INC A         ; Increment #REGa by one.
*$91A8 LD ($91D8),A  ; Write #REGa to *#R$91D8.
 $91AB LD B,$68      ; #REGb=#COLOUR$68.
 $91AD CALL $91C2    ; Call #R$91C2.
 $91B0 JR $917B      ; Jump to #R$917B.
*$91B2 LD B,$78      ; #REGb=#COLOUR$78.
 $91B4 CALL $91C2    ; Call #R$91C2.
 $91B7 LD A,($91D8)  ; {Jump to #R$91D9 if *#R$91D8 is zero.
 $91BA OR A          ;
 $91BB JR Z,$91D9    ; }
 $91BD DEC A         ; Decrease #REGa by one.
 $91BE JR Z,$922D    ; Jump to #R$922D if #REGa is zero.
 $91C0 JR $91E0      ; Jump to #R$91E0.
*$91C2 LD A,($91D8)  ; #REGa=*#R$91D8.
 $91C5 LD HL,$5AB7   ; #REGhl=#N$5AB7 (attribute buffer location).
 $91C8 LD DE,$000A   ; #REGde=#N($000A,$04,$04).
 $91CB INC A         ; Increment #REGa by one.
*$91CC ADD HL,DE     ; #REGhl+=#REGde.
 $91CD DEC A         ; Decrease #REGa by one.
 $91CE JR NZ,$91CC   ; Jump to #R$91CC until #REGa is zero.
 $91D0 LD A,B        ; #REGa=#REGb.
; This entry point is used by the routine at #R$9258.
*$91D1 LD B,$0A      ; #REGb=#N$0A.
*$91D3 LD (HL),A     ; Write #REGa to *#REGhl.
 $91D4 INC HL        ; Increment #REGhl by one.
 $91D5 DJNZ $91D3    ; Decrease counter by one and loop back to #R$91D3 until
                     ; counter is zero.
 $91D7 RET           ; Return.
 $91D8 DEFB $01      ;
; #UDGTABLE
; { #MESSAGE$0A(message-10) }
; UDGTABLE#
*$91D9 LD A,$0A      ; {Call #R$7D97 using message block #R$8735(#N$0A).
 $91DB CALL $7D97    ; }
 $91DE XOR A         ; #REGa=#N$00.
 $91DF RET           ; Return.
*$91E0 LD A,($8E59)  ; {Jump to #R$9171 if *#R$8E59 is equal to #N$07.
 $91E3 CP $07        ;
 $91E5 JP Z,$9171    ; }
 $91E8 LD A,($96B5)  ; #REGa=*#R$96B5.
 $91EB LD C,A        ; #REGc=#REGa.
 $91EC OR A          ; {Jump to #R$9171 if *#R$96B5 is zero.
 $91ED JP Z,$9171    ; }
 $91F0 LD A,($96B6)  ; #REGa=*#R$96B6.
 $91F3 OR A          ; {Jump to #R$9171 if *#R$96B6 is zero.
 $91F4 JP Z,$9171    ; }
 $91F7 LD A,($96B7)  ; #REGa=*#R$96B7.
 $91FA SUB C         ; #REGa-=#REGc.
 $91FB JP Z,$9171    ; Jump to #R$9171 if {} is zero.
 $91FE ADD A,C       ; #REGa+=#REGc.
 $91FF PUSH AF       ; Stash #REGaf on the stack.
 $9200 LD A,$01      ; {Write #N$01 to *#R$96B7.
 $9202 LD ($96B7),A  ; }
 $9205 CALL $8F7E    ; Call #R$8F7E.
 $9208 POP AF        ; Restore #REGaf from the stack.
 $9209 LD ($96B7),A  ; Write #REGa to *#R$96B7.
 $920C CALL $9245    ; Call #R$9245.
 $920F LD A,$01      ; {Write #N$01 to *#R$96B7.
 $9211 LD ($96B7),A  ; }
 $9214 CALL $9258    ; Call #R$9258.
 $9217 LD A,($96B5)  ; #REGa=*#R$96B5.
 $921A SUB B         ; #REGa-=#REGb.
 $921B LD ($96B5),A  ; Write #REGa to *#R$96B5.
 $921E LD A,($96B4)  ; #REGa=*#R$96B4.
 $9221 ADD A,B       ; #REGa+=#REGb.
 $9222 LD ($96B4),A  ; Write #REGa to *#R$96B4.
; #UDGTABLE
; { #MESSAGE$10(message-16) }
; UDGTABLE#
 $9225 LD A,$10      ; {Call #R$7D97 using message block #R$8A29(#N$10).
 $9227 CALL $7D97    ; }
 $922A LD A,$01      ; #REGa=#N$01.
 $922C RET           ; Return.
*$922D LD A,($96B7)  ; {Jump to #R$9242 if *#R$96B7 is zero.
 $9230 OR A          ;
 $9231 JR Z,$9242    ; }
 $9233 CALL $9245    ; Call #R$9245.
 $9236 XOR A         ; {Write #N$00 to *#R$96B7.
 $9237 LD ($96B7),A  ; }
; #UDGTABLE
; { #MESSAGE$0B(message-11) }
; UDGTABLE#
 $923A LD A,$0B      ; {Call #R$7D97 using message block #R$8843(#N$0B).
 $923C CALL $7D97    ; }
 $923F LD A,$02      ; #REGa=#N$02.
 $9241 RET           ; Return.
*$9242 LD A,$03      ; #REGa=#N$03.
 $9244 RET           ; Return.

; Player Add To Pot
;
; Used by the routines at #R$8D4A and #R$9171.
@label=PlayerAddToPot
c$9245 LD A,($96B7)  ; {Subtract *#R$96B7 from *#R$96B5 and write it back to
 $9248 LD B,A        ; *#R$96B5.
 $9249 LD A,($96B5)  ;
 $924C SUB B         ;
 $924D LD ($96B5),A  ; }
 $9250 LD A,($96B4)  ; {Add *#R$96B7 to *#R$96B4 and write this back to
 $9253 ADD A,B       ; *#R$96B4.
 $9254 LD ($96B4),A  ; }
 $9257 RET           ; Return.

; Routine at 9258
;
; Used by the routine at #R$9171.
c$9258 LD A,$68      ; #REGa=#COLOUR$68.
 $925A LD HL,$5A95   ; #REGhl=#N$5A95 (attribute buffer location).
 $925D CALL $91D1    ; Call #R$91D1.
; #UDGTABLE
; { #MESSAGE$11(message-17) }
; UDGTABLE#
 $9260 LD A,$11      ; {Call #R$7D97 using message block #R$8B6D(#N$11).
 $9262 CALL $7D97    ; }
*$9265 LD A,$01      ; {Write #N$01 to *#R$92C5.
 $9267 LD ($92C5),A  ; }
 $926A POP IX        ; Restore #REGix from the stack.
 $926C CALL $90D8    ; Call #R$90D8.
 $926F PUSH IX       ; Stash #REGix on the stack.
 $9271 OR A          ; Set the bits from #REGa.
 $9272 JR Z,$927C    ; Jump to #R$927C if #REGa is zero.
 $9274 DEC A         ; Decrease #REGa by one.
 $9275 JR Z,$92A7    ; Jump to #R$92A7 if #REGa is zero.
 $9277 DEC A         ; Decrease #REGa by one.
 $9278 JR Z,$9289    ; Jump to #R$9289 if #REGa is zero.
 $927A JR $9265      ; Jump to #R$9265.
*$927C LD A,$78      ; #REGa=#COLOUR$78.
 $927E LD HL,$5A95   ; #REGhl=#N$5A95 (attribute buffer location).
 $9281 CALL $91D1    ; Call #R$91D1.
 $9284 LD A,($96B7)  ; {#REGb=*#R$96B7.
 $9287 LD B,A        ; }
 $9288 RET           ; Return.
*$9289 LD A,($96B7)  ; #REGa=*#R$96B7.
 $928C INC A         ; Increment #REGa by one.
 $928D CP $15        ; {Jump to #R$9265 if #REGa is higher than #N$15.
 $928F JR NC,$9265   ; }
 $9291 LD B,A        ; #REGb=#REGa.
 $9292 LD A,($96B5)  ; {Jump to #R$9265 if *#R$96B5 is lower than #REGb.
 $9295 CP B          ;
 $9296 JR C,$9265    ; }
 $9298 LD A,($96B6)  ; {Jump to #R$9265 if *#R$96B6 is lower than #REGb.
 $929B CP B          ;
 $929C JR C,$9265    ; }
 $929E LD A,B        ; #REGa=#REGb.
 $929F LD ($96B7),A  ; Write #REGa to *#R$96B7.
 $92A2 CALL $8F7E    ; Call #R$8F7E.
 $92A5 JR $92B3      ; Jump to #R$92B3.
*$92A7 LD A,($96B7)  ; #REGa=*#R$96B7.
 $92AA DEC A         ; Decrease #REGa by one.
 $92AB JR Z,$9265    ; Jump to #R$9265 if #REGa is zero.
 $92AD LD ($96B7),A  ; Write #REGa to *#R$96B7.
 $92B0 CALL $8F7E    ; Call #R$8F7E.
*$92B3 LD A,$68      ; #REGa=#COLOUR$68.
 $92B5 LD HL,$5A95   ; #REGhl=#N$5A95 (attribute buffer location).
 $92B8 CALL $91D1    ; Call #R$91D1.
 $92BB LD BC,$4000   ; #REGbc=#N$4000 (screen buffer location).
*$92BE DEC C         ; Decrease #REGc by one.
 $92BF JR NZ,$92BE   ; Jump to #R$92BE until #REGc is zero.
 $92C1 DJNZ $92BE    ; Decrease counter by one and loop back to #R$92BE until
                     ; counter is zero.
 $92C3 JR $9265      ; Jump to #R$9265.
 $92C5 DEFB $00      ;

; Messaging: In-Game
@label=Messaging_InGame
t$92C6 DEFB $16,$14,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $92C9 DEFM "POT:"      ; "#STR(#PC,$04,$04)".
 $92CD DEFB $0D
@label=Messaging_You
 $92CE DEFB $16,$12,$11 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $92D1 DEFM "YOU:"      ; "#STR(#PC,$04,$04)".
 $92D5 DEFB $0D
@label=Messaging_Sheila
 $92D6 DEFB $16,$12,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $92D9 DEFM "SHEILA:"   ; "#STR(#PC,$04,$07)".
 $92E0 DEFB $0D
@label=Messaging_Ireen
 $92E1 DEFB $16,$12,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $92E4 DEFM "IREEN :"   ; "#STR(#PC,$04,$07)".
 $92EB DEFB $0D
@label=Messaging_Diane
 $92EC DEFB $16,$12,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $92EF DEFM "DIANE :"   ; "#STR(#PC,$04,$07)".
 $92F6 DEFB $0D
@label=Messaging_Raise
 $92F7 DEFB $16,$14,$16 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $92FA DEFM "RAISE:"    ; "#STR(#PC,$04,$06)".
 $9300 DEFB $0D
@label=Messaging_PlayerLivesHash
 $9301 DEFB $16,$12,$1C ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $9304 DEFM "#"         ; "#STR(#PC,$04,$01)".
 $9305 DEFB $0D
@label=Messaging_GirlLivesHash
 $9306 DEFB $16,$12,$0F ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $9309 DEFB $08
 $930A DEFB $08
 $930B DEFM "#"         ; "#STR(#PC,$04,$01)".
 $930C DEFB $0D
@label=Messaging_Cursor
 $930D DEFM "CURSOR"    ; "#STR(#PC,$04,$06)".
 $9313 DEFB $0D
@label=Messaging_Drop
 $9314 DEFB $16,$16,$04 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $9317 DEFM "DROP"      ; "#STR(#PC,$04,$04)".
 $931B DEFB $16,$16,$0C ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $931E DEFM "  HOLD"    ; "#STR(#PC,$04,$06)".
 $9324 DEFB $16,$16,$17 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $9327 DEFM "RAISE"     ; "#STR(#PC,$04,$05)".
 $932C DEFB $0D
@label=Messaging_Round
 $932D DEFB $16,$14,$0C ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $9330 DEFM "ROUND:"    ; "#STR(#PC,$04,$06)".
 $9336 DEFB $0D

; Routine at 9337
;
; Used by the routine at #R$95EF.
c$9337 LD HL,$949B   ; #REGhl=#R$949B.
 $933A LD B,$07      ; #REGb=#N$07.
*$933C LD (HL),$00   ; Write #N$00 to *#REGhl.
 $933E INC HL        ; Increment #REGhl by one.
 $933F DJNZ $933C    ; Decrease counter by one and loop back to #R$933C until
                     ; counter is zero.
 $9341 CALL $94A2    ; Call #R$94A2.
 $9344 JR NZ,$9359   ; Jump to #R$9359 if {} is not zero.
 $9346 DEC HL        ; Decrease #REGhl by one.
 $9347 CALL $9473    ; Call #R$9473.
 $934A LD ($949C),A  ; Write #REGa to *#R$949C.
 $934D CALL $947B    ; Call #R$947B.
 $9350 LD ($949D),A  ; Write #REGa to *#R$949D.
 $9353 LD A,$09      ; {Write #N$09 to *#R$949B.
 $9355 LD ($949B),A  ; }
 $9358 RET           ; Return.
*$9359 CALL $94AA    ; Call #R$94AA.
 $935C JR NZ,$936E   ; Jump to #R$936E if {} is not zero.
 $935E CALL $9473    ; Call #R$9473.
 $9361 LD ($949C),A  ; Write #REGa to *#R$949C.
 $9364 LD A,$08      ; {Write #N$08 to *#R$949B.
 $9366 LD ($949B),A  ; }
 $9369 XOR A         ; {Write #N$00 to *#R$949D.
 $936A LD ($949D),A  ; }
 $936D RET           ; Return.
*$936E CALL $94B8    ; Call #R$94B8.
 $9371 JR NZ,$9386   ; Jump to #R$9386 if {} is not zero.
 $9373 LD HL,($9516) ; #REGhl=*#R$9516.
 $9376 CALL $9473    ; Call #R$9473.
 $9379 LD ($949C),A  ; Write #REGa to *#R$949C.
 $937C LD A,$07      ; {Write #N$07 to *#R$949B.
 $937E LD ($949B),A  ; }
 $9381 XOR A         ; {Write #N$00 to *#R$949D.
 $9382 LD ($949D),A  ; }
 $9385 RET           ; Return.
*$9386 CALL $94C1    ; Call #R$94C1.
 $9389 JR NZ,$93B0   ; Jump to #R$93B0 if {} is not zero.
 $938B LD A,(IX+$00) ; #REGa=*#REGix+#N$00.
 $938E LD B,$04      ; #REGb=#N$04.
*$9390 SRA A         ; Shift #REGa right (with carry).
 $9392 DJNZ $9390    ; Decrease counter by one and loop back to #R$9390 until
                     ; counter is zero.
 $9394 LD ($949D),A  ; Write #REGa to *#R$949D.
 $9397 LD A,$06      ; {Write #N$06 to *#R$949B.
 $9399 LD ($949B),A  ; }
 $939C LD D,$00      ; #REGd=#N$00.
 $939E PUSH IX       ; Stash #REGix on the stack.
 $93A0 POP HL        ; Restore #REGhl from the stack.
 $93A1 LD B,$05      ; #REGb=#N$05.
*$93A3 LD A,(HL)     ; #REGa=*#REGhl.
 $93A4 AND %00001111 ; Keep only bits 0-3.
 $93A6 CP D          ; {Jump to #R$93AA if #REGa is higher than #REGd.
 $93A7 JR NC,$93AA   ; }
 $93A9 LD D,A        ; #REGd=#REGa.
*$93AA DJNZ $93A3    ; Decrease counter by one and loop back to #R$93A3 until
                     ; counter is zero.
 $93AC LD ($949C),A  ; Write #REGa to *#R$949C.
 $93AF RET           ; Return.
*$93B0 CALL $94C7    ; Call #R$94C7.
 $93B3 JR NZ,$93C9   ; Jump to #R$93C9 if {} is not zero.
 $93B5 DEC HL        ; Decrease #REGhl by one.
 $93B6 LD A,(HL)     ; #REGa=*#REGhl.
 $93B7 CALL $9473    ; Call #R$9473.
 $93BA LD ($949C),A  ; Write #REGa to *#R$949C.
 $93BD CALL $947B    ; Call #R$947B.
 $93C0 LD ($949D),A  ; Write #REGa to *#R$949D.
 $93C3 LD A,$05      ; {Write #N$05 to *#R$949B.
 $93C5 LD ($949B),A  ; }
 $93C8 RET           ; Return.
*$93C9 CALL $94DA    ; Call #R$94DA.
 $93CC JR NZ,$93DE   ; Jump to #R$93DE if {} is not zero.
 $93CE CALL $9473    ; Call #R$9473.
 $93D1 LD ($949C),A  ; Write #REGa to *#R$949C.
 $93D4 LD A,$04      ; {Write =#N$04 to *#R$949B.
 $93D6 LD ($949B),A  ; }
 $93D9 XOR A         ; {Write #N$00 to *#R$949D.
 $93DA LD ($949D),A  ; }
 $93DD RET           ; Return.
*$93DE CALL $94E8    ; Call #R$94E8.
 $93E1 JR NZ,$9412   ; Jump to #R$9412 if {} is not zero.
 $93E3 CALL $9473    ; Call #R$9473.
 $93E6 LD ($949C),A  ; Write #REGa to *#R$949C.
 $93E9 LD HL,($9516) ; #REGhl=*#R$9516.
 $93EC CALL $9473    ; Call #R$9473.
 $93EF LD ($949E),A  ; Write #REGa to *#R$949E.
 $93F2 LD HL,$9540   ; #REGhl=#R$9540.
*$93F5 LD A,(HL)     ; {Jump to #R$93FD if *#REGhl is equal to #N$01.
 $93F6 CP $01        ;
 $93F8 JR Z,$93FD    ; }
 $93FA INC HL        ; Increment #REGhl by one.
 $93FB JR $93F5      ; Jump to #R$93F5.
*$93FD CALL $9473    ; Call #R$9473.
 $9400 LD ($949F),A  ; Write #REGa to *#R$949F.
 $9403 LD A,($949C)  ; #REGa=*#R$949C.
 $9406 CALL $947B    ; Call #R$947B.
 $9409 LD ($949D),A  ; Write #REGa to *#R$949D.
 $940C LD A,$03      ; {Write #N$03 to *#R$949B.
 $940E LD ($949B),A  ; }
 $9411 RET           ; Return.
*$9412 CALL $9506    ; Call #R$9506.
 $9415 JR NZ,$9447   ; Jump to #R$9447 if {} is not zero.
 $9417 CALL $9473    ; Call #R$9473.
 $941A LD ($949C),A  ; Write #REGa to *#R$949C.
 $941D LD A,$02      ; {Write #N$02 to *#R$949B.
 $941F LD ($949B),A  ; }
 $9422 LD B,$0D      ; #REGb=#N$0D.
 $9424 LD DE,$949E   ; #REGde=#R$949E.
 $9427 LD HL,$954C   ; #REGhl=#R$954C.
*$942A LD A,(HL)     ; {Jump to #R$943C if *#REGhl is equal to #N$01.
 $942B CP $01        ;
 $942D JR Z,$943C    ; }
*$942F DEC HL        ; Decrease #REGhl by one.
 $9430 DJNZ $942A    ; Decrease counter by one and loop back to #R$942A until
                     ; counter is zero.
 $9432 LD A,($949C)  ; #REGa=*#R$949C.
 $9435 CALL $947B    ; Call #R$947B.
 $9438 LD ($949D),A  ; Write #REGa to *#R$949D.
 $943B RET           ; Return.
*$943C PUSH HL       ; {Stash #REGhl and #REGde on the stack.
 $943D PUSH DE       ; }
 $943E CALL $9473    ; Call #R$9473.
 $9441 POP DE        ; {Restore #REGde and #REGhl from the stack.
 $9442 POP HL        ; }
 $9443 LD (DE),A     ; Write #REGa to *#REGde.
 $9444 INC DE        ; Increment #REGde by one.
 $9445 JR $942F      ; Jump to #R$942F.
*$9447 CALL $950D    ; Call #R$950D.
 $944A PUSH HL       ; Stash #REGhl on the stack.
 $944B CALL $9473    ; Call #R$9473.
 $944E INC A         ; Increment #REGa by one.
 $944F LD ($949C),A  ; Write #REGa to *#R$949C.
 $9452 CALL $947B    ; Call #R$947B.
 $9455 LD ($949D),A  ; Write #REGa to *#R$949D.
 $9458 POP HL        ; Restore #REGhl from the stack.
 $9459 LD A,$01      ; #REGa=#N$01.
 $945B LD ($949B),A  ; Write #REGa to *#R$949B.
 $945E LD B,$04      ; #REGb=#N$04.
 $9460 LD DE,$949E   ; #REGde=#R$949E.
*$9463 CALL $9510    ; Call #R$9510.
 $9466 PUSH HL       ; {Stash #REGhl and #REGde on the stack.
 $9467 PUSH DE       ; }
 $9468 CALL $9473    ; Call #R$9473.
 $946B POP DE        ; {Restore #REGde and #REGhl from the stack.
 $946C POP HL        ; }
 $946D INC A         ; Increment #REGa by one.
 $946E LD (DE),A     ; Write #REGa to *#REGde.
 $946F INC DE        ; Increment #REGde by one.
 $9470 DJNZ $9463    ; Decrease counter by one and loop back to #R$9463 until
                     ; counter is zero.
 $9472 RET           ; Return.

; Routine at 9473
;
; Used by the routines at #R$9337 and #R$96D1.
c$9473 LD DE,$9540   ; #REGde=#R$9540.
 $9476 XOR A         ; #REGa=#N$00.
 $9477 SBC HL,DE     ; #REGhl-=#REGde (with carry).
 $9479 LD A,L        ; #REGa=#REGl.
 $947A RET           ; Return.

; Routine at 947B
;
; Used by the routine at #R$9337.
c$947B LD D,A        ; #REGd=#REGa.
 $947C LD E,$00      ; #REGe=#N$00.
 $947E PUSH IX       ; Stash #REGix on the stack.
 $9480 POP HL        ; Restore #REGhl from the stack.
 $9481 LD B,$05      ; #REGb=#N$05.
*$9483 LD A,(HL)     ; #REGa=*#REGhl.
 $9484 AND %00001111 ; Keep only bits 0-3.
 $9486 CP D          ; {Jump to #R$9494 if #REGa is equal to #REGd.
 $9487 JR Z,$9494    ; }
*$9489 INC HL        ; Increment #REGhl by one.
 $948A DJNZ $9483    ; Decrease counter by one and loop back to #R$9483 until
                     ; counter is zero.
 $948C LD A,E        ; #REGa=#REGe.
 $948D LD B,$04      ; #REGb=#N$04.
*$948F SRA A         ; Shift #REGa right (with carry).
 $9491 DJNZ $948F    ; Decrease counter by one and loop back to #R$948F until
                     ; counter is zero.
 $9493 RET           ; Return.
*$9494 LD A,(HL)     ; {Jump to #R$9489 if *#REGhl is lower than #REGe.
 $9495 CP E          ;
 $9496 JR C,$9489    ; }
 $9498 LD E,A        ; #REGe=#REGa.
 $9499 JR $9489      ; Jump to #R$9489.

; Data block at 949B
b$949B DEFB $00
 $949C DEFB $00
 $949D DEFB $00
 $949E DEFB $00
 $949F DEFB $00,$00,$00

; Routine at 94A2
;
; Used by the routine at #R$9337.
c$94A2 LD A,($954D)  ;
 $94A5 CP $01        ;
 $94A7 RET NZ        ;
 $94A8 JR $94C7      ;
; This entry point is used by the routine at #R$9337.
*$94AA LD HL,$9540   ;
 $94AD LD B,$0D      ;
*$94AF LD A,(HL)     ;
 $94B0 CP $04        ;
 $94B2 RET Z         ;
 $94B3 INC HL        ;
 $94B4 DJNZ $94AF    ;
 $94B6 INC B         ;
 $94B7 RET           ;
; This entry point is used by the routine at #R$9337.
*$94B8 CALL $94DA    ;
 $94BB LD ($9516),HL ;
 $94BE RET NZ        ;
 $94BF JR $9506      ;
; This entry point is used by the routine at #R$9337.
*$94C1 LD A,($954D)  ;
 $94C4 CP $01        ;
 $94C6 RET           ;
; This entry point is used by the routine at #R$9337.
*$94C7 LD HL,$953F   ;
*$94CA INC HL        ;
 $94CB LD A,(HL)     ;
 $94CC CP $01        ;
 $94CE JR NZ,$94CA   ;
 $94D0 LD B,$05      ;
*$94D2 LD A,(HL)     ;
 $94D3 CP $01        ;
 $94D5 RET NZ        ;
 $94D6 INC HL        ;
 $94D7 DJNZ $94D2    ;
 $94D9 RET           ;
; This entry point is used by the routine at #R$9337.
*$94DA LD HL,$9540   ;
 $94DD LD B,$0D      ;
*$94DF LD A,(HL)     ;
 $94E0 CP $03        ;
 $94E2 RET Z         ;
 $94E3 INC HL        ;
 $94E4 DJNZ $94DF    ;
 $94E6 INC B         ;
 $94E7 RET           ;
; This entry point is used by the routine at #R$9337.
*$94E8 LD HL,$9540   ;
 $94EB LD B,$0D      ;
*$94ED LD A,(HL)     ;
 $94EE CP $02        ;
 $94F0 JR Z,$94F7    ;
 $94F2 INC HL        ;
 $94F3 DJNZ $94ED    ;
*$94F5 INC B         ;
 $94F6 RET           ;
*$94F7 DEC B         ;
 $94F8 LD ($9516),HL ;
 $94FB JR Z,$94F5    ;
*$94FD INC HL        ;
 $94FE LD A,(HL)     ;
 $94FF CP $02        ;
 $9501 RET Z         ;
 $9502 DJNZ $94FD    ;
 $9504 JR $94F5      ;
; This entry point is used by the routine at #R$9337.
*$9506 LD B,$0D      ;
 $9508 LD HL,$953F   ;
 $950B JR $94FD      ;
; This entry point is used by the routine at #R$9337.
*$950D LD HL,$954C   ;
; This entry point is used by the routine at #R$9337.
*$9510 LD A,(HL)     ;
 $9511 DEC HL        ;
 $9512 OR A          ;
 $9513 JR Z,$9510    ;
 $9515 RET           ;

; Game status buffer entry at 9516
g$9516 DEFW $0000

; Routine at 9518
;
; Used by the routine at #R$8D4A.
c$9518 LD HL,$9540   ; #REGhl=#R$9540.
 $951B LD B,$0D      ; #REGb=#N$0D.
*$951D LD (HL),$00   ; Write #N$00 to *#REGhl.
 $951F INC HL        ; Increment #REGhl by one.
 $9520 DJNZ $951D    ; Decrease counter by one and loop back to #R$951D until
                     ; counter is zero.
 $9522 PUSH IX       ; Stash #REGix on the stack.
 $9524 PUSH IX       ; {#REGhl=#REGix (using the stack).
 $9526 POP HL        ; }
 $9527 LD B,$05      ; #REGb=#N$05.
*$9529 LD IX,$9540   ; #REGix=#R$9540.
 $952D LD A,(HL)     ; #REGa=*#REGhl.
 $952E AND %00001111 ; Keep only bits 0-3.
 $9530 LD E,A        ; #REGe=#REGa.
 $9531 LD D,$00      ; #REGd=#N$00.
 $9533 ADD IX,DE     ; #REGix+=#REGde.
 $9535 INC (IX+$00)  ; Increment *#REGix+#N$00 by one.
 $9538 INC HL        ; Increment #REGhl by one.
 $9539 DJNZ $9529    ; Decrease counter by one and loop back to #R$9529 until
                     ; counter is zero.
 $953B POP IX        ; Restore #REGix from the stack.
 $953D JP $95EF      ; Jump to #R$95EF.

; Data block at 9540
b$9540 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9548 DEFB $00,$00,$00,$00
 $954C DEFB $00
 $954D DEFB $00

; Draw Cards
;
; Used by the routine at #R$8D4A.
;
; IX Pointer to either the player or girls hand
;
; If a card value in the players hand is #N$FF this indicates that a card needs
; to be drawn.
; .
; If a card value in #R$95BB is #N$FF this indicates that the card has already
; been chosen.
@label=DrawCards
c$954E PUSH IX       ; Stash #REGix on the stack.
 $9550 PUSH IX       ; {#REGde=#REGix (using the stack).
 $9552 POP DE        ; }
 $9553 LD B,$05      ; A hand consists of #N$05 cards.
@label=DrawCards_Loop
*$9555 PUSH BC       ; Stash the card count on the stack.
@label=DrawCards_RePick
*$9556 LD HL,$95BB   ; #REGhl=#R$95BB.
; Only draw a card if the current position in the hand is marked as needing to
; be picked.
 $9559 LD A,(DE)     ; {Jump to #R$9572 if the hand pointer is not equal to
 $955A CP $FF        ; #N$FF.
 $955C JR NZ,$9572   ; }
 $955E PUSH DE       ; {Stash the hand and deck pointers on the stack
 $955F PUSH HL       ; temporarily.}
 $9560 CALL $9579    ; Call #R$9579.
 $9563 POP HL        ; {Restore the deck and hand pointers from the stack.
 $9564 POP DE        ; }
 $9565 LD C,A        ; {Create an offset in #REGbc.
 $9566 LD B,$00      ; }
 $9568 DEC BC        ; Decrease the card count by one.
 $9569 ADD HL,BC     ; #REGhl+=#REGbc.
 $956A LD A,(HL)     ; {Jump to #R$9556 if this card has already been picked
 $956B CP $FF        ; (if the chosen card "value" is equal to #N$FF).
 $956D JR Z,$9556    ; }
; The picked card is valid and able to be drawn into the hand.
 $956F LD (DE),A     ; Write the drawn card to the current hand position.
 $9570 LD (HL),$FF   ; Now mark the card in the deck as being unavailable so it
                     ; can't be chosen again.
@label=DrawCards_Next
*$9572 POP BC        ; Restore the card count from the stack.
 $9573 INC DE        ; Increment the hand pointer by one.
 $9574 DJNZ $9555    ; Decrease the card count by one and loop back to #R$9555
                     ; until the deck is filled.
 $9576 POP IX        ; Restore #REGix from the stack.
 $9578 RET           ; Return.

; Get Random Number
;
; Used by the routines at #R$7D97, #R$954E, #R$960C and #R$96D1.
@label=GetRandomNumber
c$9579 LD A,R        ; {#REGh=#REGr.
 $957B LD H,A        ; }
*$957C DEC A         ;
 $957D JR NZ,$957C   ;
 $957F LD A,R        ; {#REGl=#REGr.
 $9581 LD L,A        ; }
 $9582 LD DE,($5C79) ; {#HTML(#REGhl+=*<a rel="noopener nofollow"
 $9586 ADD HL,DE     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C78.html">FRAMES+#N$01</a>.)
                     ; }
 $9587 LD A,$3F      ;
 $9589 AND H         ;
 $958A LD H,A        ;
 $958B LD A,(HL)     ;
 $958C LD H,A        ;
*$958D DEC A         ;
 $958E JR NZ,$958D   ;
 $9590 LD A,H        ;
 $9591 LD H,$34      ;
*$9593 SUB H         ;
 $9594 JR Z,$9593    ;
 $9596 CP $35        ;
 $9598 JR NC,$9593   ;
 $959A RET           ; Return.

; Reset Deck
;
; Used by the routine at #R$8D4A.
@label=ResetDeck
c$959B LD HL,$95BB   ; #REGhl=#R$95BB.
 $959E LD C,$00      ; #REGc=#N$00.
*$95A0 LD B,$00      ; #REGb=#N$00.
*$95A2 LD A,C        ; #REGa=#REGc.
 $95A3 PUSH BC       ; Stash #REGbc on the stack.
 $95A4 LD B,$04      ; #REGb=#N$04.
*$95A6 SLA A         ; Shift #REGa left (with carry).
 $95A8 DJNZ $95A6    ; Decrease counter by one and loop back to #R$95A6 until
                     ; counter is zero.
 $95AA POP BC        ; Restore #REGbc from the stack.
 $95AB OR B          ; Set the bits from #REGb.
 $95AC LD (HL),A     ; Write #REGa to *#REGhl.
 $95AD INC HL        ; Increment #REGhl by one.
 $95AE INC B         ; Increment #REGb by one.
; There are #N$0D cards for each suit.
 $95AF LD A,B        ; {Jump to #R$95A2 if #REGb is not equal to #N$0D.
 $95B0 CP $0D        ;
 $95B2 JR NZ,$95A2   ; }
 $95B4 INC C         ; Increment #REGc by one.
; There are four suits.
 $95B5 LD A,C        ; {Jump to #R$95A0 if #REGc is not equal to #N$04.
 $95B6 CP $04        ;
 $95B8 JR NZ,$95A0   ; }
 $95BA RET           ; Return.

; Card Deck
@label=CardDeck
g$95BB DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $95C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $95D5 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $95E2 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Routine at 95EF
;
; Used by the routine at #R$9518.
c$95EF PUSH IX       ; Stash #REGix on the stack.
 $95F1 POP DE        ; Restore #REGde from the stack.
 $95F2 LD B,$04      ; #REGb=#N$04.
 $95F4 LD A,(DE)     ; #REGa=*#REGde.
 $95F5 AND %11110000 ; Keep only bits 4-7.
 $95F7 LD H,A        ; #REGh=#REGa.
*$95F8 INC DE        ; Increment #REGde by one.
 $95F9 LD A,(DE)     ; #REGa=*#REGde.
 $95FA AND %11110000 ; Keep only bits 4-7.
 $95FC CP H          ; {Jump to #R$9609 if #REGa is not equal to #REGh.
 $95FD JR NZ,$9609   ; }
 $95FF DJNZ $95F8    ; Decrease counter by one and loop back to #R$95F8 until
                     ; counter is zero.
 $9601 LD A,$01      ; #REGa=#N$01.
*$9603 LD ($954D),A  ; Write #REGa to *#R$954D.
 $9606 JP $9337      ; Jump to #R$9337.
*$9609 XOR A         ; #REGa=#N$00.
 $960A JR $9603      ; Jump to #R$9603.

; Routine at 960C
;
; Used by the routine at #R$8D4A.
c$960C LD A,($96C0)  ; #REGa=*#R$96C0.
 $960F LD C,A        ; #REGc=#REGa.
 $9610 CP $02        ; {Jump to #R$9626 if #REGa is lower than #N$02.
 $9612 JR C,$9626    ; }
 $9614 RL C          ; Rotate #REGc left.
 $9616 CP $04        ; {Jump to #R$961C if #REGa is lower than #N$04.
 $9618 JR C,$961C    ; }
 $961A RL C          ; Rotate #REGc left.
*$961C LD B,C        ; #REGb=#REGc.
*$961D CALL $9579    ; Call #R$9579.
 $9620 CP $0E        ; {Jump to #R$9637 if #REGa is lower than #N$0E.
 $9622 JR C,$9637    ; }
 $9624 DJNZ $961D    ; Decrease counter by one and loop back to #R$961D until
                     ; counter is zero.
*$9626 LD B,C        ; #REGb=#REGc.
*$9627 CALL $9579    ; Call #R$9579.
 $962A CP $1E        ; {Jump to #R$968C if #REGa is lower than #N$1E.
 $962C JR C,$968C    ; }
 $962E DJNZ $9627    ; Decrease counter by one and loop back to #R$9627 until
                     ; counter is zero.
; #UDGTABLE
; { #MESSAGE$01(message-01) }
; UDGTABLE#
 $9630 LD A,$01      ; {Call #R$7D97 using message block #N$01.
 $9632 CALL $7D97    ; }
 $9635 XOR A         ; #REGa=#N$00
 $9636 RET           ; Return.
*$9637 LD A,($8E59)  ; {Jump to #R$968C if *#R$8E59 is equal to #N$07.
 $963A CP $07        ;
 $963C JR Z,$968C    ; }
 $963E LD A,($96B7)  ; #REGa=*#R$96B7.
 $9641 CALL $96A1    ; Call #R$96A1.
*$9644 CALL $9579    ; Call #R$9579.
 $9647 SRA A         ; Shift #REGa right (with carry).
 $9649 SUB $06       ; #REGa-=#N$06.
 $964B JR C,$9644    ; Jump to #R$9644 if {} is lower.
 $964D LD B,A        ; #REGb=#REGa.
 $964E LD A,($96B6)  ; {Jump to #R$966C if *#R$96B6 is higher than #REGb.
 $9651 CP B          ;
 $9652 JR NC,$966C   ; }
 $9654 OR A          ;
 $9655 LD B,A        ; #REGb=#REGa.
 $9656 JR NZ,$966C   ; Jump to #R$966C if {} is not zero.
; #UDGTABLE
; { #MESSAGE$03(message-03) }
; UDGTABLE#
*$9658 LD A,$03      ; {Call #R$7D97 using message block #N$03.
 $965A CALL $7D97    ; }
 $965D LD A,($96B7)  ; #REGa=*#R$96B7.
 $9660 LD D,A        ; #REGd=#REGa.
 $9661 XOR A         ; {Write #N$00 to *#R$96B7.
 $9662 LD ($96B7),A  ; }
 $9665 LD A,D        ; {Return with #REGa=#N$02 if #REGd is not zero.
 $9666 OR A          ;
 $9667 LD A,$02      ;
 $9669 RET NZ        ; }
 $966A INC A         ; Increment #REGa by one.
 $966B RET           ; Return.
*$966C LD A,($96B5)  ; {Jump to #R$967D if *#R$96B5 is higher than #REGb.
 $966F CP B          ;
 $9670 JR NC,$967D   ; }
 $9672 LD A,($96B5)  ; {Write *#R$96B5 to *#R$96B7.
 $9675 LD ($96B7),A  ; }
 $9678 OR A          ; {Jump to #R$9658 if #REGa is zero.
 $9679 JR Z,$9658    ; }
 $967B JR $9681      ; Jump to #R$9681.
*$967D LD A,B        ; {Write #REGb to *#R$96B7.
 $967E LD ($96B7),A  ; }
*$9681 CALL $96A1    ; Call #R$96A1.
; #UDGTABLE
; { #MESSAGE$02(message-02) }
; UDGTABLE#
 $9684 LD A,$02      ; {Call #R$7D97 using message block #N$02.
 $9686 CALL $7D97    ; }
 $9689 LD A,$01      ; #REGa=#N$01.
 $968B RET           ; Return.
*$968C LD A,($96B7)  ; {Jump to #R$96B1 if *#R$96B7 is zero.
 $968F OR A          ;
 $9690 JR Z,$96B1    ; }
 $9692 CALL $96A1    ; Call #R$96A1.
 $9695 XOR A         ; {Write #N$00 to *#R$96B7.
 $9696 LD ($96B7),A  ; }
; #UDGTABLE
; { #MESSAGE$03(message-03) }
; UDGTABLE#
 $9699 LD A,$03      ; {Call #R$7D97 using message block #N$03.
 $969B CALL $7D97    ; }
 $969E LD A,$02      ; #REGa=#N$02.
 $96A0 RET           ; Return.

; Girl Add To Pot
;
; Used by the routines at #R$8D4A and #R$960C.
;
; A Value to add to Pot
@label=GirlAddToPot
c$96A1 LD B,A        ; Store the value to add in #REGb.
 $96A2 LD A,($96B6)  ; {Subtract the value to add from *#R$96B6.
 $96A5 SUB B         ;
 $96A6 LD ($96B6),A  ; }
 $96A9 LD A,($96B4)  ; {And add the value onto *#R$96B4.
 $96AC ADD A,B       ;
 $96AD LD ($96B4),A  ; }
 $96B0 RET           ; Return.

; Routine at 96B1
;
; Used by the routine at #R$960C.
c$96B1 LD A,$03      ; #REGa=#N$03.
 $96B3 RET           ; Return.

; Pot Value
@label=PotValue
g$96B4 DEFB $00

; Player Cash
@label=PlayerCash
g$96B5 DEFB $64

; Girl Cash
@label=GirlCash
g$96B6 DEFB $64

; Current "Raise" Value
@label=CurrentRaiseValue
g$96B7 DEFB $00

; Current Round
@label=CurrentRound
g$96B8 DEFB $00

; Game status buffer entry at 96B9
g$96B9 DEFB $00,$00,$00,$00,$00,$00,$00
 $96C0 DEFB $00,$00,$00,$00,$00,$00,$00

; Players Hand?
@label=PlayersHand?
g$96C7 DEFB $00,$00,$00,$00,$00

; Girls Hand?
@label=GirlsHand?
g$96CC DEFB $00,$00,$00,$00,$00

; Routine at 96D1
;
; Used by the routine at #R$8D4A.
c$96D1 LD A,($949B)  ; #REGa=*#R$949B.
 $96D4 LD HL,$971E   ; #REGhl=#R$971E.
 $96D7 LD B,$04      ; #REGb=#N$04.
*$96D9 CP (HL)       ; {Return if *#REGhl is equal to #REGa.
 $96DA RET Z         ; }
 $96DB INC HL        ; Increment #REGhl by one.
 $96DC DJNZ $96D9    ; Decrease counter by one and loop back to #R$96D9 until
                     ; counter is zero.
 $96DE CALL $9579    ; Call #R$9579.
 $96E1 CP $0A        ; {Jump to #R$96EC if #REGa is lower than #N$0A.
 $96E3 JR C,$96EC    ; }
 $96E5 LD A,($949B)  ; {Jump to #R$9705 if *#R$949B is equal to #N$03.
 $96E8 CP $03        ;
 $96EA JR Z,$9705    ; }
*$96EC LD A,($949C)  ; {#REGd=*#R$949C.
 $96EF LD D,A        ; }
 $96F0 LD HL,$96CC   ; #REGhl=#R$96CC.
 $96F3 LD B,$05      ; #REGb=#N$05.
 $96F5 LD C,$03      ; #REGc=#N$03.
*$96F7 LD A,(HL)     ; #REGa=*#REGhl.
 $96F8 AND %00001111 ; Keep only bits 0-3.
 $96FA CP D          ; {Jump to #R$9701 #REGa is equal to #REGd.
 $96FB JR Z,$9701    ; }
 $96FD LD (HL),$FF   ; Write #N$FF to *#REGhl.
 $96FF DEC C         ; Decrease #REGc by one.
 $9700 RET Z         ; Return if #REGc is zero.
*$9701 INC HL        ; Increment #REGhl by one.
 $9702 DJNZ $96F7    ; Decrease counter by one and loop back to #R$96F7 until
                     ; counter is zero.
 $9704 RET           ; Return.
*$9705 LD HL,$953F   ; #REGhl=#R$953D(#N$953F).
*$9708 INC HL        ; Increment #REGhl by one.
 $9709 LD A,(HL)     ; #REGa=*#REGhl.
 $970A DEC A         ; Decrease #REGa by one.
 $970B JR NZ,$9708   ; Jump to #R$9708 until #REGa is zero.
 $970D CALL $9473    ; Call #R$9473.
 $9710 LD D,A        ; #REGd=#REGa.
 $9711 LD HL,$96CB   ; #REGhl=#R$96CC(#N$96CB).
*$9714 INC HL        ; Increment #REGhl by one.
 $9715 LD A,(HL)     ; #REGa=*#REGhl.
 $9716 AND %00001111 ; Keep only bits 0-3.
 $9718 CP D          ; {Jump to #R$9714 if #REGa is not equal to #REGd.
 $9719 JR NZ,$9714   ; }
 $971B LD (HL),$FF   ; Write #N$FF to *#REGhl.
 $971D RET           ; Return.
 $971E DEFB $09      ;
 $971F DEFB $07      ;
 $9720 DEFB $06      ;
 $9721 DEFB $05      ;
; This entry point is used by the routines at #R$90D8 and #R$9148.
*$9722 LD HL,($5C3D) ; {#HTML(Jump to the address held by *<a rel="noopener
 $9725 JP (HL)       ; nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C3D.html">ERR_SP</a>.)
                     ; }

; Graphics: Couch
;
; Used by the routine at #R$7E6B.
;
; .
;
; #UDGTABLE
; { #UDGARRAY$07,scale=$04,step=$07($9726-$97FE-$01-$38)@$9806-$9822(couch) }
; UDGTABLE#
@label=Graphics_Couch
b$9726 DEFB $00,$00,$00,$00,$00,$00,$00 ; {Pixels.
 $972D DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $9734 DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $973B DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $9742 DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $9749 DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $9750 DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $9757 DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $975E DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $9765 DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $976C DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $9773 DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $977A DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $9781 DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $9788 DEFB $00,$00,$00,$00,$00,$01,$FF ;
 $978F DEFB $00,$00,$0F,$FF,$C0,$7E,$AA ;
 $9796 DEFB $00,$FF,$FA,$AA,$FF,$D5,$55 ;
 $979D DEFB $FF,$D5,$55,$55,$5A,$AA,$AA ;
 $97A4 DEFB $AD,$AA,$AA,$AA,$AB,$55,$55 ;
 $97AB DEFB $55,$55,$55,$55,$5A,$AA,$AA ;
 $97B2 DEFB $AC,$AA,$AA,$AA,$AB,$55,$55 ;
 $97B9 DEFB $56,$D5,$55,$55,$59,$AA,$AA ;
 $97C0 DEFB $AA,$AA,$AA,$AA,$AD,$55,$55 ;
 $97C7 DEFB $56,$D5,$55,$55,$55,$AA,$AA ;
 $97CE DEFB $AA,$AA,$AA,$AA,$AD,$55,$55 ;
 $97D5 DEFB $56,$D5,$55,$55,$55,$AA,$AA ;
 $97DC DEFB $AA,$6A,$AA,$AA,$AD,$55,$55 ;
 $97E3 DEFB $55,$55,$55,$55,$55,$AA,$AB ;
 $97EA DEFB $AB,$6A,$AA,$AA,$AD,$55,$54 ;
 $97F1 DEFB $55,$55,$55,$55,$55,$AA,$AC ;
 $97F8 DEFB $AB,$6A,$AA,$AA,$AC,$D5,$54 ;
 $97FF DEFB $55,$55,$55,$55,$56,$AA,$AB ; }
 $9806 DEFB $70,$70,$70,$70,$70,$70,$70 ; {Attributes.
 $980D DEFB $70,$70,$70,$70,$70,$70,$70 ;
 $9814 DEFB $38,$38,$38,$38,$38,$38,$38 ;
 $981B DEFB $38,$38,$38,$38,$38,$38,$38 ; }

; Jump To InPlay Girl Routine
;
; Used by the routines at #R$8CF0 and #R$8F5A.
@label=JumpToInPlayGirlRoutine
c$9822 LD A,($98E3)  ; {Return if *#R$98E3 is equal to #N$11.
 $9825 CP $11        ;
 $9827 RET Z         ; }
 $9828 INC A         ; {Increment *#R$98E3 by one.
 $9829 LD ($98E3),A  ; }
 $982C LD HL,$98E0   ; #REGhl=#R$98E5(#N$98E0) (i.e. #R$98E5).
@label=FindCurrentGirlJumpRoutine
*$982F INC HL        ; {Increment #REGhl by five.
 $9830 INC HL        ;
 $9831 INC HL        ;
 $9832 INC HL        ;
 $9833 INC HL        ; }
 $9834 DEC A         ; {Decrease #REGa by one and jump back to #R$982F until
 $9835 JR NZ,$982F   ; #REGa is zero.}
 $9837 JP (HL)       ; Jump to the address held by #REGhl.

; Print Girl
;
; Used by the routine at #R$98CD.
@label=PrintGirl
c$9838 PUSH BC       ; Stash #REGbc on the stack.
 $9839 CALL $993A    ; Call #R$993A.
 $983C POP BC        ; Restore #REGbc from the stack.
 $983D SRL C         ; {Shift #REGc left three times.
 $983F SRL C         ;
 $9841 SRL C         ; }
 $9843 PUSH DE       ; {#REGhl=#REGde (using the stack).
 $9844 POP HL        ; }
@label=GirlCopyAttributes_RowLoop
*$9845 PUSH IX       ; {Stash #REGix and #REGbc on the stack.
 $9847 PUSH BC       ; }
@label=GirlCopyAttributes_Loop
*$9848 LD A,(HL)     ; {Copy a byte of data from *#REGhl to *#REGix+#N$00.
 $9849 LD (IX+$00),A ; }
 $984C INC HL        ; Increment #REGhl by one.
 $984D INC IX        ; Increment #REGix by one.
 $984F DJNZ $9848    ; Decrease the counter by one and loop back to #R$9848
                     ; until the counter is zero.
 $9851 POP BC        ; Restore #REGbc from the stack.
 $9852 POP IX        ; Restore #REGix from the stack.
 $9854 LD DE,$0020   ; {#REGix+=#N($0020,$04,$04).
 $9857 ADD IX,DE     ; }
 $9859 DEC C         ; Decrease #REGc by one.
 $985A JR NZ,$9845   ; Jump back to #R$9845 until #REGc is zero.
 $985C INC C         ; Increment #REGc by one.
 $985D RET           ; Return.

; Graphics: Initialise Girl
;
; Used by the routines at #R$9975, #R$B613 and #R$CFBD.
;
; HL Pointer to #R$98E5 for referencing the graphic data
@label=Graphics_InitialiseGirl
c$985E LD C,$58      ; #REGc=#N$58 (height).
 $9860 LD B,$20      ; #REGb=#N$20 (width).
 $9862 LD DE,$4000   ; #REGde=#N$4000 (screen buffer location).
 $9865 LD IX,$5800   ; #REGix=#N$5800 (attribute buffer location).
 $9869 LD A,($98E4)  ; {Increment *#R$98E4 by one.
 $986C INC A         ;
 $986D LD ($98E4),A  ; }
 $9870 JR $98D8      ; Jump to #R$98D8.

; Graphics: Print Image Width - #N$0E
;
; Used by the routines at #R$A5D5, #R$A8C9, #R$ABBD and #R$B0E8.
;
; HL Pointer to #R$98E5 for referencing the graphic data
@label=Graphics_Width14
c$9872 LD C,$30      ; #REGc=#N$30 (height).
 $9874 LD B,$0E      ; #REGb=#N$0E (width).
 $9876 LD DE,$40A8   ; #REGde=#N$40A8 (screen buffer location).
 $9879 LD IX,$58A8   ; #REGix=#N$58A8 (attribute buffer location).
 $987D JR $98D8      ; Jump to #R$98D8.

; Graphics: Print Left Image Width - #N$09
;
; Used by the routines at #R$AEB1, #R$B3DC and #R$C9D5.
;
; HL Pointer to #R$98E5 for referencing the graphic data
@label=Graphics_Width09_Left
c$987F LD C,$38      ; #REGc=#N$38 (height).
 $9881 LD B,$09      ; #REGb=#N$09 (width).
 $9883 LD DE,$4080   ; #REGde=#N$4080 (screen buffer location).
 $9886 LD IX,$5880   ; #REGix=#N$5880 (attribute buffer location).
 $988A JR $98D8      ; Jump to #R$98D8.

; Graphics: Print Right Image Width - #N$0F
;
; Used by the routines at #R$C273, #R$C624 and #R$CC0C.
;
; HL Pointer to #R$98E5 for referencing the graphic data
@label=Graphics_Width0F
c$988C LD C,$38      ; #REGc=#N$38 (height).
 $988E LD B,$0F      ; #REGb=#N$0F (width).
 $9890 LD DE,$4087   ; #REGde=#N$4087 (screen buffer location).
 $9893 LD IX,$5887   ; #REGix=#N$5887 (attribute buffer location).
 $9897 JR $98D8      ; Jump to #R$98D8.

; Graphics: Print Left Image Width - #N$0F
;
; Used by the routine at #R$CC0C.
;
; HL Pointer to #R$98E5 for referencing the graphic data
@label=Graphics_Width0F_Left
c$9899 LD C,$38      ; #REGc=#N$38 (height).
 $989B LD B,$0F      ; #REGb=#N$0F (width).
 $989D LD DE,$4084   ; #REGde=#N$4084 (screen buffer location).
 $98A0 LD IX,$5884   ; #REGix=#N$5884 (attribute buffer location).
 $98A4 JR $98D8      ; Jump to #R$98D8.

; Graphics: Print Right Image Width - #N$09
;
; Used by the routine at #R$DC1D.
;
; HL Pointer to #R$98E5 for referencing the graphic data
@label=Graphics_Width09_Right
c$98A6 LD C,$30      ; #REGc=#N$30 (height).
 $98A8 LD B,$09      ; #REGb=#N$09 (width).
 $98AA LD DE,$40A8   ; #REGde=#N$40A8 (screen buffer location).
 $98AD LD IX,$58A8   ; #REGix=#N$58A8 (attribute buffer location).
 $98B1 JR $98D8      ; Jump to #R$98D8.

; Graphics: Print Image Width - #N$08
;
; Used by the routine at #R$DE03.
;
; HL Pointer to #R$98E5 for referencing the graphic data
@label=Graphics_Width08
c$98B3 LD C,$38      ; #REGc=#N$38 (height).
 $98B5 LD B,$08      ; #REGb=#N$08 (width).
 $98B7 LD DE,$4081   ; #REGde=#N$4081 (screen buffer location).
 $98BA LD IX,$5881   ; #REGix=#N$5881 (attribute buffer location).
 $98BE JR $98D8      ; Jump to #R$98D8.

; Graphics: Print Image Width - #N$0A
;
; Used by the routine at #R$DFFB.
;
; HL Pointer to #R$98E5 for referencing the graphic data
@label=Graphics_Width0A
c$98C0 LD C,$30      ; #REGc=#N$30 (height).
 $98C2 LD B,$0A      ; #REGb=#N$0A (width).
 $98C4 LD DE,$40A7   ; #REGde=#N$40A7 (screen buffer location).
 $98C7 LD IX,$58A7   ; #REGix=#N$58A7 (attribute buffer location).
 $98CB JR $98D8      ; Jump to #R$98D8.

; Graphics: Print Image Width - #N$04
;
; Used by the routine at #R$E217.
;
; HL Pointer to #R$98E5 for referencing the graphic data
@label=Graphics_Width04
c$98CD LD C,$38      ; #REGc=#N$38 (height).
 $98CF LD B,$04      ; #REGb=#N$04 (width).
 $98D1 LD DE,$4084   ; #REGde=#N$4084 (screen buffer location).
 $98D4 LD IX,$5884   ; #REGix=#N$5884 (attribute buffer location).
; This entry point is used by the routines at #R$985E, #R$9872, #R$987F,
; #R$988C, #R$9899, #R$98A6, #R$98B3 and #R$98C0.
*$98D8 INC HL        ; {#HTML(Increment #REGhl by three to move the pointer
 $98D9 INC HL        ; past the <code>JP</code> command.)
 $98DA INC HL        ; }
 $98DB PUSH DE       ; Stash the screen buffer pointer on the stack.
 $98DC LD E,(HL)     ; {Store a pointer to the stage data in #REGde.
 $98DD INC HL        ;
 $98DE LD D,(HL)     ; }
 $98DF POP HL        ; Restore the screen buffer pointer from the stack.
 $98E0 JP $9838      ; Jump to #R$9838.

; Current Stage
@label=CurrentStage
g$98E3 DEFB $00

; Current Girl
@label=CurrentGirl
g$98E4 DEFB $00

; Jump Table: Stage Data
;
; .
;
; .
;
; Stage #N($01+((#PC-$98E5)/$05)).
@label=JumpTable_StageData
w$98E5 JP $985E      ; Jump command to stage #N($01+((#PC-$98E5)/$05)).
 $98E8 DEFW $9975    ; Stage data.
; Stage #N($01+((#PC-$98E5)/$05)).
 $98EA JP $9872      ; Jump command to stage #N($01+((#PC-$98E5)/$05)).
 $98ED DEFW $A5D5    ; Stage data.
; Stage #N($01+((#PC-$98E5)/$05)).
 $98EF JP $9872      ; Jump command to stage #N($01+((#PC-$98E5)/$05)).
 $98F2 DEFW $A8C9    ; Stage data.
; Stage #N($01+((#PC-$98E5)/$05)).
 $98F4 JP $9872      ; Jump command to stage #N($01+((#PC-$98E5)/$05)).
 $98F7 DEFW $ABBD    ; Stage data.
; Stage #N($01+((#PC-$98E5)/$05)).
 $98F9 JP $987F      ; Jump command to stage #N($01+((#PC-$98E5)/$05)).
 $98FC DEFW $AEB1    ; Stage data.
; Stage #N($01+((#PC-$98E5)/$05)).
 $98FE JP $9872      ; Jump command to stage #N($01+((#PC-$98E5)/$05)).
 $9901 DEFW $B0E8    ; Stage data.
; Stage #N($01+((#PC-$98E5)/$05)).
 $9903 JP $987F      ; Jump command to stage #N($01+((#PC-$98E5)/$05)).
 $9906 DEFW $B3DC    ; Stage data.
; Stage #N($01+((#PC-$98E5)/$05)).
 $9908 JP $985E      ; Jump command to stage #N($01+((#PC-$98E5)/$05)).
 $990B DEFW $B613    ; Stage data.
; Stage #N($01+((#PC-$98E5)/$05)).
 $990D JP $988C      ; Jump command to stage #N($01+((#PC-$98E5)/$05)).
 $9910 DEFW $C273    ; Stage data.
; Stage #N($01+((#PC-$98E5)/$05)).
 $9912 JP $988C      ; Jump command to stage #N($01+((#PC-$98E5)/$05)).
 $9915 DEFW $C624    ; Stage data.
; Stage #N($01+((#PC-$98E5)/$05)).
 $9917 JP $987F      ; Jump command to stage #N($01+((#PC-$98E5)/$05)).
 $991A DEFW $C9D5    ; Stage data.
; Stage #N($01+((#PC-$98E5)/$05)).
 $991C JP $9899      ; Jump command to stage #N($01+((#PC-$98E5)/$05)).
 $991F DEFW $CC0C    ; Stage data.
; Stage #N($01+((#PC-$98E5)/$05)).
 $9921 JP $985E      ; Jump command to stage #N($01+((#PC-$98E5)/$05)).
 $9924 DEFW $CFBD    ; Stage data.
; Stage #N($01+((#PC-$98E5)/$05)).
 $9926 JP $98A6      ; Jump command to stage #N($01+((#PC-$98E5)/$05)).
 $9929 DEFW $DC1D    ; Stage data.
; Stage #N($01+((#PC-$98E5)/$05)).
 $992B JP $98B3      ; Jump command to stage #N($01+((#PC-$98E5)/$05)).
 $992E DEFW $DE03    ; Stage data.
; Stage #N($01+((#PC-$98E5)/$05)).
 $9930 JP $98C0      ; Jump command to stage #N($01+((#PC-$98E5)/$05)).
 $9933 DEFW $DFFB    ; Stage data.
; Stage #N($01+((#PC-$98E5)/$05)).
 $9935 JP $98CD      ; Jump command to stage #N($01+((#PC-$98E5)/$05)).
 $9938 DEFW $E217    ; Stage data.

; Print Graphic
;
; Used by the routines at #R$784B, #R$7E6B and #R$9838.
@label=PrintGraphic
c$993A LD A,$08      ; #REGa=#N$08.
*$993C PUSH HL       ;
 $993D PUSH BC       ;
 $993E PUSH AF       ;
*$993F LD A,(DE)     ;
 $9940 LD (HL),A     ;
 $9941 INC HL        ;
 $9942 INC DE        ;
 $9943 DJNZ $993F    ;
 $9945 POP AF        ;
 $9946 POP BC        ;
 $9947 POP HL        ;
 $9948 PUSH AF       ;
 $9949 LD A,H        ;
 $994A RES 3,A       ;
 $994C CP $47        ;
 $994E JR NZ,$9960   ;
 $9950 LD A,L        ;
 $9951 CP $E0        ;
 $9953 JR C,$9960    ;
 $9955 PUSH DE       ;
 $9956 LD DE,$0020   ;
 $9959 ADD HL,DE     ;
 $995A POP DE        ;
 $995B POP AF        ;
 $995C LD A,$08      ;
 $995E JR $9966      ;
*$9960 POP AF        ;
 $9961 DEC A         ;
 $9962 CALL Z,$996A  ;
 $9965 INC H         ;
*$9966 DEC C         ;
 $9967 JR NZ,$993C   ;
 $9969 RET           ; Return.
*$996A PUSH DE       ;
 $996B LD DE,$07E0   ;
 $996E XOR A         ;
 $996F SBC HL,DE     ;
 $9971 POP DE        ;
 $9972 LD A,$08      ;
 $9974 RET           ; Return.

; Girl 1 Frame 1
;
; #PUSHS
; #UDGTABLE
; {
; #UDGARRAY$20,scale=$04,step=$20($9975-$A455-$01-$100)@$A475-$A5D5(girl-1-frame-1)
; }
; UDGTABLE#
; #POPS
@label=Girl1_Frame1
b$9975 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; {Pixels.
 $9995 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $99B5 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $99D5 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $99F5 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$E0,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $9A15 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FE,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $9A35 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF,$C0,$00,$00,$00,$00,$00,$00,$00 ;
 $9A55 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$FF,$F8,$00,$00,$00,$00,$00,$00,$00 ;
 $9A75 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$FF,$FE,$00,$00,$00,$00,$00,$00,$00 ;
 $9A95 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00 ;
 $9AB5 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00 ;
 $9AD5 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00 ;
 $9AF5 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$87,$FF,$FF,$C0,$00,$00,$00,$00,$00,$00 ;
 $9B15 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$38,$7F,$FF,$E0,$00,$00,$00,$00,$00,$00 ;
 $9B35 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$6F,$00,$00,$00,$00,$00,$00,$01,$FF,$F0,$03,$0C,$3F,$FF,$F0,$FE,$00,$00,$00,$00,$00 ;
 $9B55 DEFB $00,$07,$FE,$00,$00,$00,$07,$F8,$00,$00,$00,$FF,$00,$00,$00,$0F,$FF,$C0,$7E,$AA,$AF,$C6,$06,$3F,$FF,$FF,$55,$F8,$00,$00,$00,$00 ;
 $9B75 DEFB $C3,$FA,$AB,$FF,$00,$01,$FA,$AF,$FC,$01,$FF,$12,$FF,$00,$FF,$FA,$AA,$FF,$D5,$55,$55,$7F,$06,$3F,$FF,$FA,$DA,$AF,$F0,$00,$00,$00 ;
 $9B95 DEFB $BD,$55,$55,$55,$F8,$FF,$55,$55,$57,$F6,$AB,$48,$D5,$FF,$D5,$55,$55,$5A,$AA,$AA,$AF,$F7,$02,$3F,$FF,$FD,$55,$55,$7F,$C0,$00,$00 ;
 $9BB5 DEFB $6A,$AA,$AA,$AA,$AF,$AA,$AA,$AA,$AA,$AD,$55,$05,$AA,$AD,$AA,$AA,$AA,$AB,$55,$55,$50,$06,$80,$7F,$FF,$FE,$DA,$AF,$D5,$78,$00,$00 ;
 $9BD5 DEFB $AD,$55,$55,$55,$55,$55,$55,$55,$55,$6A,$AA,$B4,$D5,$55,$55,$55,$55,$5A,$AA,$AA,$B6,$0F,$C0,$7F,$FF,$FF,$A5,$5A,$AA,$AE,$00,$00 ;
 $9BF5 DEFB $6A,$AA,$AA,$AA,$AD,$AA,$AA,$AA,$AA,$AD,$55,$82,$6A,$AC,$AA,$AA,$AA,$AB,$55,$55,$52,$00,$00,$7F,$FF,$FE,$AA,$F5,$55,$55,$80,$00 ;
 $9C15 DEFB $AD,$55,$55,$55,$55,$55,$55,$55,$55,$6A,$AA,$CA,$55,$56,$D5,$55,$55,$59,$AA,$AA,$A8,$00,$00,$FF,$FF,$FF,$B5,$AA,$AA,$AA,$E0,$00 ;
 $9C35 DEFB $6A,$AA,$AA,$AA,$AD,$AA,$AA,$AA,$AA,$AD,$55,$41,$6A,$AA,$AA,$AA,$AA,$AD,$55,$55,$50,$00,$01,$FF,$FF,$FF,$AF,$55,$7F,$55,$50,$00 ;
 $9C55 DEFB $AD,$55,$55,$55,$55,$55,$55,$55,$55,$6A,$AA,$A1,$55,$56,$D5,$55,$55,$55,$AA,$AA,$B0,$00,$01,$FF,$FF,$FF,$FA,$AB,$C0,$EA,$A8,$00 ;
 $9C75 DEFB $6A,$AA,$AA,$AA,$AD,$AA,$AA,$AA,$AA,$AD,$55,$7F,$EA,$AA,$AA,$AA,$AA,$AD,$55,$55,$70,$00,$01,$FF,$FF,$FF,$F5,$56,$3F,$1D,$54,$00 ;
 $9C95 DEFB $AD,$55,$55,$55,$55,$55,$55,$55,$55,$6A,$AA,$C6,$55,$56,$D5,$55,$55,$55,$AA,$AA,$B0,$00,$07,$FF,$FF,$FF,$EA,$B9,$EA,$E6,$AA,$00 ;
 $9CB5 DEFB $6A,$AA,$AA,$AA,$AD,$AA,$AA,$AA,$AA,$AD,$55,$87,$2A,$AA,$6A,$AA,$AA,$AD,$55,$55,$F0,$00,$1F,$FF,$FF,$FF,$D5,$67,$FF,$F9,$56,$00 ;
 $9CD5 DEFB $A5,$55,$55,$55,$59,$55,$55,$55,$55,$6A,$AB,$1A,$35,$55,$55,$55,$55,$55,$AA,$AB,$00,$00,$3F,$FF,$FF,$FF,$EA,$DA,$AA,$AE,$AB,$00 ;
 $9CF5 DEFB $56,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AD,$56,$9E,$6A,$AB,$6A,$AA,$AA,$AD,$55,$54,$00,$00,$7F,$FF,$FF,$FF,$D5,$7F,$FF,$FF,$55,$00 ;
 $9D15 DEFB $B5,$55,$55,$55,$5B,$55,$55,$55,$55,$6A,$AD,$14,$75,$55,$55,$55,$55,$55,$AA,$AC,$00,$00,$7F,$FF,$FF,$FF,$AA,$AA,$AA,$AA,$AB,$00 ;
 $9D35 DEFB $56,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$CD,$55,$1C,$6A,$AB,$6A,$AA,$AA,$AC,$D5,$54,$00,$00,$FF,$FF,$FF,$FF,$56,$FF,$FF,$FF,$B5,$80 ;
 $9D55 DEFB $B5,$55,$55,$55,$5B,$55,$55,$55,$55,$5A,$AD,$18,$B5,$55,$55,$55,$55,$56,$AA,$AB,$00,$00,$FF,$FF,$FF,$FE,$AD,$AA,$AA,$AA,$DA,$80 ;
 $9D75 DEFB $56,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$D5,$55,$00,$AA,$AB,$6A,$AA,$AA,$AA,$D5,$55,$80,$00,$FF,$FF,$FF,$FD,$55,$FF,$FF,$FF,$D5,$80 ;
 $9D95 DEFB $B5,$55,$55,$55,$5B,$55,$55,$55,$55,$5A,$AD,$01,$35,$55,$55,$55,$55,$56,$AA,$AA,$C0,$01,$FF,$FF,$FF,$FE,$AA,$AA,$AA,$AA,$DA,$80 ;
 $9DB5 DEFB $56,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$D5,$54,$01,$2A,$AB,$2A,$AA,$AA,$AA,$D5,$55,$40,$03,$FF,$FF,$FF,$FD,$5B,$FF,$FF,$FF,$ED,$40 ;
 $9DD5 DEFB $B5,$55,$55,$55,$5B,$5F,$D5,$55,$55,$5A,$AC,$01,$55,$55,$B5,$55,$55,$56,$AA,$AA,$A0,$03,$FF,$FF,$FF,$FA,$B6,$AA,$AA,$AA,$AA,$C0 ;
 $9DF5 DEFB $56,$AA,$AA,$AA,$AF,$FF,$FE,$AA,$AA,$D5,$54,$01,$6A,$AA,$AA,$AA,$AA,$AA,$D5,$55,$60,$07,$FF,$FF,$FF,$F5,$6F,$FF,$FF,$FF,$ED,$40 ;
 $9E15 DEFB $B5,$55,$55,$55,$FF,$FF,$FF,$F5,$55,$5A,$AA,$01,$55,$55,$B5,$55,$55,$56,$AA,$AA,$A0,$07,$FF,$FF,$FF,$FA,$AA,$AA,$AA,$AA,$AA,$C0 ;
 $9E35 DEFB $56,$AA,$AA,$AB,$FF,$FF,$FF,$FE,$AA,$D5,$56,$02,$6A,$AA,$AA,$AA,$AA,$AA,$D5,$55,$60,$07,$FF,$FF,$FF,$F5,$5F,$FF,$FF,$FF,$F5,$60 ;
 $9E55 DEFB $B5,$55,$55,$57,$FF,$FF,$FF,$FF,$55,$5A,$AA,$02,$55,$55,$B5,$55,$55,$56,$AA,$AA,$A0,$0F,$FF,$FF,$FF,$EA,$DA,$AA,$AA,$AA,$B6,$A0 ;
 $9E75 DEFB $56,$AA,$AA,$FF,$FF,$80,$01,$87,$EA,$D5,$56,$02,$6A,$AA,$9A,$BA,$AA,$AA,$D5,$55,$60,$0F,$FF,$FF,$FF,$D5,$BF,$FF,$FF,$FF,$F5,$60 ;
 $9E95 DEFB $B5,$55,$55,$FF,$F8,$00,$01,$87,$F5,$5A,$AB,$02,$55,$55,$3F,$C7,$D5,$56,$6A,$AA,$A0,$0F,$FF,$FF,$FF,$EA,$AA,$AA,$AA,$AA,$B6,$A0 ;
 $9EB5 DEFB $52,$AA,$AB,$FF,$E0,$00,$01,$86,$FE,$D5,$55,$02,$6A,$AA,$EB,$41,$7A,$AB,$55,$55,$60,$0F,$FF,$FF,$FF,$D5,$BF,$FF,$FF,$FF,$FB,$50 ;
 $9ED5 DEFB $AB,$55,$5F,$FF,$00,$00,$01,$86,$FF,$FA,$AB,$02,$55,$57,$56,$82,$D7,$55,$6A,$AA,$C0,$1F,$FF,$FF,$FF,$AB,$6A,$AA,$AA,$AA,$AA,$B0 ;
 $9EF5 DEFB $5A,$AA,$BF,$FC,$00,$00,$00,$C6,$FF,$0D,$55,$82,$2A,$AE,$AD,$05,$AB,$AB,$55,$55,$40,$1F,$FF,$FF,$FF,$D5,$7F,$FF,$FF,$FF,$FB,$50 ;
 $9F15 DEFB $AB,$57,$FF,$F0,$00,$00,$00,$C6,$F5,$07,$AA,$82,$35,$5D,$5A,$0B,$56,$D5,$7F,$FF,$80,$3F,$FF,$FF,$FF,$AB,$6A,$AA,$AA,$AA,$AA,$B0 ;
 $9F35 DEFB $5B,$FF,$FF,$C0,$00,$00,$00,$C3,$FB,$0B,$75,$82,$2A,$FA,$B4,$16,$AD,$7B,$60,$00,$80,$3F,$FF,$FF,$FF,$56,$FF,$FF,$FF,$FF,$FB,$50 ;
 $9F55 DEFB $FF,$FF,$FF,$00,$00,$00,$00,$63,$F5,$16,$AF,$8F,$37,$35,$68,$2D,$5B,$0D,$80,$00,$80,$3F,$FF,$FF,$FF,$AA,$AA,$AA,$AA,$AA,$AA,$B0 ;
 $9F75 DEFB $FF,$FF,$E0,$00,$00,$00,$00,$63,$FB,$2D,$56,$F3,$F8,$6A,$D0,$5A,$B4,$03,$C0,$01,$00,$3F,$FF,$FF,$FF,$56,$FF,$FF,$FF,$FF,$FB,$50 ;
 $9F95 DEFB $FF,$C0,$00,$00,$00,$00,$00,$33,$F5,$5A,$AD,$55,$00,$D5,$A0,$B5,$54,$00,$40,$02,$00,$7F,$FF,$FF,$FE,$AD,$AA,$AA,$AA,$AA,$AD,$A8 ;
 $9FB5 DEFB $00,$00,$00,$00,$00,$00,$00,$1B,$FA,$B5,$5A,$6F,$01,$AB,$41,$6A,$B4,$00,$80,$3C,$00,$FF,$FF,$FF,$FF,$55,$FF,$FF,$FF,$FF,$FD,$58 ;
 $9FD5 DEFB $00,$00,$00,$00,$00,$00,$00,$0F,$EB,$6A,$AA,$75,$03,$56,$82,$D5,$5A,$00,$43,$C0,$00,$FF,$FF,$FF,$FE,$AD,$AA,$AA,$AA,$AA,$AD,$A8 ;
 $9FF5 DEFB $00,$00,$00,$00,$00,$00,$00,$07,$F6,$D5,$5A,$6A,$86,$AD,$05,$AA,$AD,$00,$BC,$01,$FF,$FF,$FF,$FF,$FD,$5B,$FF,$FF,$FF,$FF,$FD,$58 ;
 $A015 DEFB $00,$00,$00,$00,$00,$00,$00,$01,$EB,$AA,$AA,$75,$8D,$56,$8B,$55,$56,$81,$00,$0E,$00,$FF,$FF,$FF,$FE,$AA,$AA,$AA,$AA,$AA,$AD,$A8 ;
 $A035 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$F7,$55,$5A,$5A,$DA,$AA,$56,$AA,$AB,$41,$00,$70,$00,$7F,$FF,$FF,$FD,$5B,$FF,$FF,$FF,$FF,$FD,$58 ;
 $A055 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$EA,$AA,$AD,$6D,$75,$55,$FD,$55,$55,$A0,$DF,$80,$00,$7F,$FF,$FF,$FE,$AA,$AA,$AA,$AA,$AA,$AD,$A8 ;
 $A075 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$F5,$55,$56,$B6,$AA,$AA,$AA,$BF,$AA,$D0,$34,$00,$00,$7F,$FF,$FF,$FD,$57,$FF,$FF,$FF,$FF,$FD,$58 ;
 $A095 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$D6,$AA,$AB,$6B,$75,$55,$55,$60,$D5,$68,$08,$00,$00,$FF,$FF,$FF,$FA,$B6,$AA,$AA,$AA,$AA,$AD,$A8 ;
 $A0B5 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$ED,$5F,$55,$A5,$BA,$AA,$AA,$DF,$6A,$B4,$08,$00,$00,$FF,$FF,$FF,$FD,$57,$FF,$FF,$FF,$FF,$FD,$58 ;
 $A0D5 DEFB $00,$00,$00,$00,$00,$00,$08,$00,$D6,$B1,$AA,$E2,$D5,$55,$55,$A0,$B5,$5A,$10,$00,$0F,$FF,$FF,$FF,$FA,$B6,$AA,$AA,$AA,$AA,$AD,$A8 ;
 $A0F5 DEFB $00,$00,$00,$00,$00,$00,$30,$00,$ED,$6E,$D5,$61,$7A,$BF,$AA,$A0,$5A,$AD,$10,$01,$FB,$FF,$FF,$FF,$FD,$57,$FF,$FF,$FF,$FF,$FE,$D4 ;
 $A115 DEFB $00,$00,$00,$00,$00,$00,$60,$00,$D6,$D1,$6A,$A0,$BD,$60,$D5,$A0,$2D,$56,$A0,$3E,$D5,$FF,$FF,$FF,$FA,$AA,$AA,$AA,$AA,$AA,$AA,$AC ;
 $A135 DEFB $00,$00,$00,$00,$00,$01,$C0,$01,$ED,$A0,$B5,$60,$4A,$DF,$6A,$D0,$16,$AB,$67,$C1,$6B,$FF,$FF,$FF,$F5,$6F,$FF,$FF,$FF,$FF,$FE,$D4 ;
 $A155 DEFB $00,$00,$00,$00,$00,$03,$80,$7F,$AB,$40,$5A,$B0,$25,$A0,$B5,$68,$0B,$55,$B8,$00,$B5,$FF,$FF,$FF,$FA,$AA,$AA,$AA,$AA,$AA,$AA,$AC ;
 $A175 DEFB $00,$00,$00,$00,$00,$0E,$1F,$FF,$DE,$80,$2D,$50,$17,$40,$5A,$B4,$05,$AA,$FF,$E0,$5B,$FF,$FF,$FF,$F5,$6F,$FF,$FF,$FF,$FF,$FE,$D4 ;
 $A195 DEFB $00,$00,$00,$00,$00,$3F,$FF,$81,$AD,$00,$16,$B0,$0A,$80,$2D,$5A,$02,$D5,$60,$1C,$2D,$FF,$FF,$FF,$FA,$AA,$AA,$AA,$AA,$AA,$AA,$AC ;
 $A1B5 DEFB $00,$00,$00,$00,$01,$FF,$E0,$01,$DA,$00,$15,$50,$03,$00,$16,$AD,$01,$6A,$BF,$E2,$17,$FF,$FF,$FF,$F5,$5F,$FF,$FF,$FF,$FF,$FE,$D4 ;
 $A1D5 DEFB $00,$00,$00,$00,$FF,$C0,$00,$1F,$AC,$00,$16,$BF,$C1,$00,$0B,$56,$80,$B5,$6A,$BD,$0B,$FF,$FF,$FF,$EA,$DA,$AA,$AA,$AA,$AA,$AA,$AC ;
 $A1F5 DEFB $00,$00,$01,$FF,$FC,$00,$03,$FF,$D8,$00,$15,$50,$3F,$0F,$85,$AB,$40,$5A,$FF,$56,$84,$FF,$FF,$FF,$F5,$5F,$FF,$FF,$FF,$FF,$FE,$D4 ;
 $A215 DEFB $00,$1F,$FF,$FF,$F8,$01,$FF,$E1,$A8,$00,$16,$AF,$C2,$90,$42,$D5,$A0,$2D,$01,$AB,$43,$7F,$FF,$FF,$EA,$DA,$AA,$AA,$AA,$AA,$AA,$AC ;
 $A235 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FC,$03,$D0,$00,$2D,$5D,$7F,$AF,$A1,$6A,$D0,$14,$FE,$D5,$BF,$BF,$FF,$FF,$F5,$5F,$FF,$FF,$FF,$FF,$FE,$D4 ;
 $A255 DEFB $FF,$E0,$00,$0F,$FF,$FE,$00,$03,$50,$00,$5A,$AA,$AE,$DA,$D0,$B5,$68,$E0,$01,$6A,$C0,$7F,$FF,$FF,$EA,$DA,$AA,$AA,$AA,$AA,$AA,$AC ;
 $A275 DEFB $00,$00,$00,$00,$F0,$00,$00,$03,$B0,$00,$B5,$5D,$55,$75,$68,$5A,$B7,$00,$00,$B5,$7F,$BF,$FF,$FF,$D5,$BF,$FF,$FF,$FF,$FF,$FE,$D4 ;
 $A295 DEFB $00,$00,$00,$00,$3C,$00,$00,$03,$50,$01,$6A,$AE,$AA,$AA,$B4,$2D,$78,$00,$00,$5A,$AA,$DF,$FF,$FF,$EA,$AA,$AA,$AA,$AA,$AA,$AB,$6A ;
 $A2B5 DEFB $00,$00,$00,$00,$0E,$00,$00,$03,$B0,$02,$D5,$5F,$D5,$75,$5A,$1F,$8E,$00,$00,$2D,$55,$7F,$FF,$FF,$D5,$BF,$FF,$FF,$FF,$FF,$FF,$56 ;
 $A2D5 DEFB $00,$00,$00,$00,$07,$00,$00,$0F,$50,$05,$AA,$B4,$7A,$BA,$AD,$FA,$F1,$C0,$00,$16,$AA,$BF,$FF,$FF,$EA,$AA,$AA,$AA,$AA,$AA,$AB,$6A ;
 $A2F5 DEFB $00,$00,$00,$00,$03,$00,$00,$3F,$B0,$0B,$55,$6B,$8D,$5D,$7F,$D5,$5E,$38,$00,$0B,$55,$5F,$FF,$FF,$D5,$BF,$FF,$FF,$FF,$FF,$FF,$56 ;
 $A315 DEFB $00,$00,$00,$00,$01,$80,$00,$73,$50,$16,$AA,$D2,$6A,$AF,$E1,$7A,$AB,$C7,$00,$05,$FE,$BF,$FF,$FF,$EA,$AA,$AA,$AA,$AA,$AA,$AB,$6A ;
 $A335 DEFB $00,$00,$00,$00,$00,$80,$00,$C1,$D8,$2D,$55,$A2,$2D,$55,$00,$8F,$55,$78,$E0,$02,$03,$5F,$FF,$FF,$D5,$BF,$FF,$FF,$FF,$FF,$FF,$56 ;
 $A355 DEFB $00,$00,$00,$00,$00,$40,$01,$81,$A8,$5A,$AB,$41,$2A,$AD,$00,$71,$EA,$AF,$1C,$01,$FD,$BF,$FF,$FF,$EA,$AA,$AA,$AA,$AA,$AA,$AB,$6A ;
 $A375 DEFB $00,$00,$00,$00,$00,$40,$01,$81,$D8,$B5,$56,$81,$2D,$5A,$00,$0E,$35,$55,$E3,$80,$02,$FF,$FF,$FF,$D5,$7F,$FF,$FF,$FF,$FF,$FF,$56 ;
 $A395 DEFB $00,$00,$00,$00,$00,$20,$03,$01,$A9,$6A,$AD,$00,$DA,$AA,$00,$01,$6A,$AA,$BC,$70,$01,$7F,$FF,$FF,$AB,$6A,$AA,$AA,$AA,$AA,$AB,$6A ;
 $A3B5 DEFB $00,$00,$00,$00,$00,$20,$03,$01,$DA,$D5,$5A,$00,$55,$5A,$00,$02,$D5,$75,$57,$8F,$00,$DF,$FF,$FF,$D5,$7F,$FF,$FF,$FF,$FF,$FF,$56 ;
 $A3D5 DEFB $00,$00,$00,$00,$00,$00,$03,$01,$AD,$AA,$B4,$00,$5A,$AA,$00,$05,$AA,$DE,$AA,$F0,$87,$BF,$FF,$FF,$AB,$6A,$AA,$AA,$AA,$AA,$AB,$6A ;
 $A3F5 DEFB $00,$00,$00,$00,$00,$00,$06,$01,$DB,$55,$68,$00,$35,$5A,$00,$0B,$55,$A3,$D5,$4F,$7D,$5F,$FF,$FF,$D5,$FF,$FF,$FF,$FF,$FF,$FF,$56 ;
 $A415 DEFB $00,$00,$00,$00,$00,$00,$06,$01,$AE,$BF,$FE,$00,$2A,$B4,$00,$16,$AB,$40,$7A,$BF,$AA,$AF,$FF,$FF,$AA,$AA,$AA,$AA,$AA,$AA,$AB,$6A ;
 $A435 DEFB $00,$00,$00,$00,$01,$FF,$FF,$FF,$FF,$F5,$55,$C0,$15,$54,$00,$2D,$56,$80,$3F,$F5,$55,$57,$FF,$FF,$57,$FF,$FF,$FF,$FF,$FF,$FF,$56 ;
 $A455 DEFB $00,$00,$00,$7F,$FE,$AA,$AA,$AA,$AA,$AA,$AA,$BF,$0E,$A8,$00,$5A,$AD,$0F,$EA,$AA,$AA,$AB,$FF,$FF,$AA,$AA,$AA,$AA,$AA,$AA,$AB,$6A ; }
 $A475 DEFB $70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70 ; {Attributes.
 $A495 DEFB $70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$77,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$38,$38,$70,$70,$70,$70,$70,$70,$70,$70 ;
 $A4B5 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$78,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$70,$70,$70 ;
 $A4D5 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$3A,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$70 ;
 $A4F5 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$70 ;
 $A515 DEFB $38,$38,$38,$48,$48,$48,$48,$48,$68,$68,$38,$38,$38,$38,$68,$68,$68,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$70 ;
 $A535 DEFB $48,$48,$48,$48,$48,$48,$48,$48,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$70 ;
 $A555 DEFB $48,$48,$48,$48,$48,$48,$48,$48,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$70 ;
 $A575 DEFB $48,$48,$48,$48,$48,$48,$48,$48,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$28,$28,$38,$38,$38,$38,$38,$38,$38,$38,$70 ;
 $A595 DEFB $48,$48,$48,$48,$48,$48,$48,$48,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$28,$38,$38,$38,$38,$38,$38,$38,$38,$38,$70 ;
 $A5B5 DEFB $48,$48,$48,$48,$48,$48,$48,$48,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$70 ; }

; Girl 1 Frame 2
;
; #PUSHS
; #UDGTABLE
; {
; #UDGARRAY$0E,scale=$04,step=$0E($A5D5-$A867-$01-$70)@$A875-$A8C9(girl-1-frame-2)
; }
; UDGTABLE#
; #POPS
@label=Girl1_Frame2
b$A5D5 DEFB $EA,$D5,$56,$02,$6A,$AA,$9A,$BA,$AA,$AA,$D5,$55,$60,$0F ; {Pixels.
 $A5E3 DEFB $F5,$5A,$AB,$02,$55,$55,$3F,$C7,$D5,$56,$6A,$AA,$A0,$0F ;
 $A5F1 DEFB $FE,$D5,$55,$02,$6A,$AA,$C0,$00,$3A,$AB,$55,$55,$60,$0F ;
 $A5FF DEFB $FF,$FA,$AB,$02,$55,$57,$00,$00,$07,$55,$6A,$AA,$C0,$1F ;
 $A60D DEFB $FF,$0D,$55,$82,$2A,$A8,$00,$00,$00,$AB,$55,$55,$40,$1F ;
 $A61B DEFB $F1,$03,$AA,$82,$35,$50,$00,$00,$00,$55,$7F,$FF,$80,$3F ;
 $A629 DEFB $FF,$00,$75,$82,$2A,$E0,$00,$00,$00,$3B,$60,$00,$80,$3F ;
 $A637 DEFB $F1,$00,$0F,$81,$37,$00,$00,$00,$00,$05,$80,$00,$80,$3F ;
 $A645 DEFB $FF,$00,$05,$81,$F8,$10,$00,$00,$00,$03,$C0,$01,$00,$3F ;
 $A653 DEFB $F1,$00,$02,$41,$00,$00,$00,$00,$00,$00,$40,$02,$00,$7F ;
 $A661 DEFB $FE,$00,$01,$41,$00,$44,$00,$00,$00,$01,$80,$3C,$00,$FF ;
 $A66F DEFB $E2,$00,$00,$C1,$00,$01,$00,$00,$00,$02,$43,$C0,$00,$FF ;
 $A67D DEFB $FE,$00,$01,$40,$80,$00,$00,$00,$00,$0D,$BC,$01,$FF,$FF ;
 $A68B DEFB $E2,$00,$00,$C0,$81,$00,$00,$00,$00,$12,$00,$0E,$00,$FF ;
 $A699 DEFB $FE,$00,$01,$40,$40,$00,$00,$00,$00,$6C,$00,$70,$00,$7F ;
 $A6A7 DEFB $E2,$00,$00,$C0,$40,$00,$00,$00,$00,$90,$DF,$80,$00,$7F ;
 $A6B5 DEFB $FC,$00,$01,$60,$3F,$00,$00,$00,$03,$63,$34,$00,$00,$7F ;
 $A6C3 DEFB $C4,$00,$80,$A0,$3F,$00,$00,$00,$04,$8C,$C8,$00,$00,$FF ;
 $A6D1 DEFB $FC,$00,$00,$60,$1F,$00,$08,$00,$19,$F3,$08,$00,$00,$FF ;
 $A6DF DEFB $C4,$02,$00,$A0,$1F,$00,$00,$00,$20,$0C,$10,$00,$0F,$FF ;
 $A6ED DEFB $FC,$00,$00,$60,$1F,$02,$20,$00,$1F,$F0,$10,$01,$F1,$FF ;
 $A6FB DEFB $C4,$04,$00,$A0,$0F,$00,$00,$00,$00,$00,$20,$3E,$01,$FF ;
 $A709 DEFB $F8,$00,$00,$60,$0F,$04,$00,$00,$00,$00,$27,$C0,$01,$FF ;
 $A717 DEFB $88,$08,$00,$B0,$07,$00,$00,$00,$00,$00,$38,$00,$01,$FF ;
 $A725 DEFB $F8,$00,$00,$50,$07,$00,$00,$00,$40,$00,$00,$00,$01,$FF ;
 $A733 DEFB $88,$00,$00,$30,$03,$02,$00,$00,$A0,$00,$00,$00,$01,$FF ;
 $A741 DEFB $F8,$00,$00,$50,$03,$40,$00,$01,$50,$00,$05,$00,$07,$FF ;
 $A74F DEFB $88,$00,$80,$30,$01,$A8,$00,$01,$50,$00,$28,$00,$01,$FF ;
 $A75D DEFB $F8,$02,$00,$50,$01,$90,$00,$00,$B0,$00,$40,$00,$00,$FF ;
 $A76B DEFB $88,$00,$40,$28,$00,$A0,$00,$00,$60,$01,$00,$00,$00,$7F ;
 $A779 DEFB $F0,$04,$00,$58,$00,$D4,$40,$00,$00,$14,$00,$00,$00,$3F ;
 $A787 DEFB $10,$00,$20,$28,$00,$68,$08,$00,$00,$F0,$00,$00,$00,$3F ;
 $A795 DEFB $F0,$0A,$00,$18,$00,$7F,$FF,$FF,$8F,$90,$00,$00,$00,$3F ;
 $A7A3 DEFB $10,$00,$10,$2C,$00,$3F,$FF,$FF,$B3,$90,$00,$00,$00,$1F ;
 $A7B1 DEFB $F0,$04,$00,$54,$00,$3F,$FF,$FF,$82,$48,$00,$00,$00,$1F ;
 $A7BF DEFB $10,$00,$00,$2C,$00,$1F,$FF,$F8,$01,$C8,$00,$00,$00,$1F ;
 $A7CD DEFB $F0,$08,$00,$46,$00,$0F,$FF,$00,$01,$24,$00,$00,$00,$1F ;
 $A7DB DEFB $10,$00,$00,$2A,$00,$07,$E0,$00,$00,$E4,$00,$00,$00,$1F ;
 $A7E9 DEFB $F8,$00,$00,$12,$00,$00,$00,$00,$00,$A4,$00,$00,$00,$1F ;
 $A7F7 DEFB $88,$00,$00,$0B,$00,$00,$00,$00,$00,$F6,$00,$00,$00,$3F ;
 $A805 DEFB $F8,$00,$00,$05,$00,$00,$00,$00,$00,$52,$00,$00,$00,$3F ;
 $A813 DEFB $88,$00,$00,$02,$80,$00,$00,$00,$00,$72,$00,$00,$00,$7F ;
 $A821 DEFB $F8,$00,$00,$01,$40,$00,$00,$00,$00,$49,$00,$00,$00,$DF ;
 $A82F DEFB $88,$00,$00,$00,$C0,$00,$00,$00,$00,$39,$00,$00,$07,$BF ;
 $A83D DEFB $F8,$00,$00,$01,$60,$00,$00,$00,$00,$29,$00,$00,$7D,$5F ;
 $A84B DEFB $88,$1F,$FE,$00,$A0,$00,$00,$00,$00,$35,$80,$1F,$AA,$AF ;
 $A859 DEFB $FF,$F5,$55,$C0,$50,$00,$00,$00,$00,$14,$BF,$F5,$55,$57 ;
 $A867 DEFB $AA,$AA,$AA,$BF,$2C,$00,$00,$00,$00,$0F,$EA,$AA,$AA,$AB ; }
 $A875 DEFB $38,$38,$38,$38,$38,$38,$70,$70,$70,$38,$38,$38,$38,$38 ; {Attributes.
 $A883 DEFB $30,$30,$30,$38,$30,$30,$70,$70,$70,$70,$38,$38,$38,$38 ;
 $A891 DEFB $30,$30,$30,$38,$3E,$30,$30,$70,$70,$70,$70,$70,$70,$38 ;
 $A89F DEFB $30,$30,$30,$38,$3E,$30,$30,$30,$30,$70,$70,$70,$70,$38 ;
 $A8AD DEFB $30,$30,$30,$38,$38,$3E,$3E,$3E,$38,$30,$30,$70,$70,$70 ;
 $A8BB DEFB $30,$30,$30,$30,$38,$38,$38,$38,$38,$38,$30,$30,$30,$30 ; }

; Girl 1 Frame 3
;
; #PUSHS
; #UDGTABLE
; {
; #UDGARRAY$0E,scale=$04,step=$0E($A8C9-$AB5B-$01-$70)@$AB69-$ABBD(girl-1-frame-3)
; }
; UDGTABLE#
; #POPS
@label=Girl1_Frame3
b$A8C9 DEFB $EA,$D5,$56,$02,$6A,$AA,$9A,$BA,$AA,$AA,$D5,$55,$60,$0F ; {Pixels.
 $A8D7 DEFB $F5,$5A,$AB,$02,$55,$55,$7F,$FF,$D5,$56,$6A,$AA,$A0,$0F ;
 $A8E5 DEFB $FE,$D5,$55,$02,$6A,$AA,$FF,$CF,$FA,$AB,$55,$55,$60,$0F ;
 $A8F3 DEFB $FF,$5A,$AB,$02,$55,$57,$C0,$00,$3F,$55,$6A,$AA,$C0,$1F ;
 $A901 DEFB $F3,$FD,$55,$82,$2A,$AF,$00,$00,$07,$AB,$55,$55,$40,$1F ;
 $A90F DEFB $FF,$3F,$AA,$82,$35,$5C,$00,$00,$01,$D5,$6A,$AA,$80,$3F ;
 $A91D DEFB $FF,$63,$F5,$82,$2A,$F8,$00,$00,$00,$7B,$55,$55,$80,$3F ;
 $A92B DEFB $F3,$60,$7E,$81,$37,$E0,$00,$00,$00,$6D,$6A,$AB,$00,$3F ;
 $A939 DEFB $F3,$60,$0F,$81,$3F,$00,$00,$00,$00,$3F,$55,$55,$00,$3F ;
 $A947 DEFB $F3,$60,$01,$C1,$F8,$0C,$00,$00,$00,$01,$EA,$AA,$00,$7F ;
 $A955 DEFB $E6,$C0,$00,$C1,$E0,$00,$00,$00,$00,$3C,$7D,$5C,$00,$FF ;
 $A963 DEFB $E6,$C0,$00,$41,$00,$80,$80,$00,$00,$FF,$86,$B0,$00,$FF ;
 $A971 DEFB $E6,$C8,$00,$40,$82,$10,$00,$50,$00,$C3,$FF,$C0,$00,$FF ;
 $A97F DEFB $FE,$C5,$00,$40,$89,$00,$01,$20,$00,$C0,$7F,$00,$00,$FF ;
 $A98D DEFB $FE,$C0,$80,$40,$40,$20,$04,$00,$00,$C0,$00,$00,$00,$7F ;
 $A99B DEFB $E6,$C0,$20,$40,$44,$00,$50,$40,$01,$80,$00,$00,$00,$7F ;
 $A9A9 DEFB $CD,$80,$00,$20,$20,$42,$81,$00,$01,$80,$00,$00,$00,$7F ;
 $A9B7 DEFB $CD,$80,$A8,$20,$28,$08,$18,$00,$01,$80,$00,$00,$00,$FF ;
 $A9C5 DEFB $CD,$80,$02,$20,$10,$80,$00,$00,$01,$80,$00,$00,$00,$FF ;
 $A9D3 DEFB $CD,$84,$10,$20,$10,$00,$80,$00,$01,$80,$00,$00,$01,$FF ;
 $A9E1 DEFB $CD,$80,$40,$20,$10,$00,$00,$00,$00,$C0,$00,$00,$01,$FF ;
 $A9EF DEFB $CD,$85,$00,$A0,$08,$02,$00,$00,$00,$C0,$0F,$FF,$01,$FF ;
 $A9FD DEFB $9B,$00,$00,$20,$08,$00,$00,$00,$00,$C0,$7F,$FF,$E1,$FF ;
 $AA0B DEFB $9B,$10,$00,$90,$04,$04,$00,$00,$00,$C7,$F0,$00,$F1,$FF ;
 $AA19 DEFB $FB,$00,$04,$10,$04,$00,$00,$00,$00,$7F,$8F,$FF,$99,$FF ;
 $AA27 DEFB $FB,$00,$01,$10,$02,$08,$00,$00,$00,$78,$78,$00,$7D,$FF ;
 $AA35 DEFB $DB,$00,$08,$10,$02,$00,$00,$00,$00,$07,$D7,$00,$07,$FF ;
 $AA43 DEFB $9F,$00,$11,$10,$01,$10,$00,$40,$00,$1C,$38,$00,$01,$FF ;
 $AA51 DEFB $9B,$00,$00,$10,$01,$00,$02,$00,$00,$30,$C0,$00,$00,$FF ;
 $AA5F DEFB $9B,$00,$11,$08,$00,$88,$08,$00,$00,$1B,$00,$00,$00,$7F ;
 $AA6D DEFB $36,$00,$40,$08,$00,$80,$A0,$40,$00,$1C,$00,$00,$00,$3F ;
 $AA7B DEFB $36,$01,$02,$88,$00,$48,$01,$00,$00,$E0,$00,$00,$00,$3F ;
 $AA89 DEFB $36,$00,$00,$08,$00,$40,$00,$00,$07,$00,$00,$00,$00,$3F ;
 $AA97 DEFB $F6,$02,$08,$84,$00,$24,$04,$00,$78,$00,$00,$00,$00,$1F ;
 $AAA5 DEFB $F6,$00,$00,$04,$00,$20,$00,$07,$80,$00,$00,$00,$00,$1F ;
 $AAB3 DEFB $36,$08,$12,$04,$00,$10,$C0,$F8,$00,$00,$00,$00,$00,$1F ;
 $AAC1 DEFB $36,$00,$00,$02,$00,$08,$3F,$00,$00,$00,$00,$00,$00,$1F ;
 $AACF DEFB $36,$08,$42,$02,$00,$07,$E0,$00,$00,$00,$00,$00,$00,$1F ;
 $AADD DEFB $9B,$00,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F ;
 $AAEB DEFB $9B,$10,$84,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F ;
 $AAF9 DEFB $FB,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F ;
 $AB07 DEFB $FB,$21,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$7F ;
 $AB15 DEFB $9B,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00,$00,$00,$DF ;
 $AB23 DEFB $9B,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00,$00,$07,$BF ;
 $AB31 DEFB $9B,$00,$00,$00,$20,$00,$00,$00,$00,$00,$00,$00,$7D,$5F ;
 $AB3F DEFB $9B,$1F,$FE,$00,$20,$00,$00,$00,$00,$00,$00,$1F,$AA,$AF ;
 $AB4D DEFB $FF,$F5,$55,$C0,$10,$00,$00,$00,$00,$00,$1F,$F5,$55,$57 ;
 $AB5B DEFB $AA,$AA,$AA,$BF,$0C,$00,$00,$00,$00,$0F,$EA,$AA,$AA,$AB ; }
 $AB69 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ; {Attributes.
 $AB77 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $AB85 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $AB93 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $ABA1 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $ABAF DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ; }

; Girl 1 Frame 4
;
; #PUSHS
; #UDGTABLE
; {
; #UDGARRAY$0E,scale=$04,step=$0E($ABBD-$AE4F-$01-$70)@$AE5D-$AEB1(girl-1-frame-4)
; }
; UDGTABLE#
; #POPS
@label=Girl1_Frame4
b$ABBD DEFB $EA,$D5,$56,$02,$6A,$AA,$9A,$BA,$AA,$AA,$D5,$55,$60,$0F ; {Pixels.
 $ABCB DEFB $F5,$5A,$AB,$02,$55,$55,$57,$CF,$D5,$56,$6A,$AA,$A0,$0F ;
 $ABD9 DEFB $FE,$D5,$55,$02,$6A,$AA,$DD,$5C,$3A,$AB,$55,$55,$60,$0F ;
 $ABE7 DEFB $FF,$5A,$AB,$02,$55,$55,$6A,$D0,$07,$55,$6A,$AA,$C0,$1F ;
 $ABF5 DEFB $F3,$D5,$55,$82,$2A,$AA,$D5,$50,$01,$AB,$55,$55,$40,$1F ;
 $AC03 DEFB $FF,$3A,$AA,$82,$35,$56,$AA,$90,$00,$55,$6A,$AA,$80,$3F ;
 $AC11 DEFB $FF,$07,$55,$82,$2A,$AD,$55,$50,$00,$3B,$55,$55,$80,$3F ;
 $AC1F DEFB $F3,$00,$EA,$81,$35,$52,$AA,$A8,$00,$0D,$6A,$AB,$00,$3F ;
 $AC2D DEFB $F3,$00,$3D,$81,$2A,$B5,$55,$68,$00,$07,$55,$55,$00,$3F ;
 $AC3B DEFB $F3,$00,$03,$C1,$15,$CA,$AA,$A8,$00,$01,$EA,$AA,$00,$7F ;
 $AC49 DEFB $E6,$00,$00,$41,$FF,$05,$55,$54,$00,$00,$75,$5C,$00,$FF ;
 $AC57 DEFB $E6,$00,$00,$41,$00,$02,$2A,$B4,$00,$00,$1A,$B0,$00,$FF ;
 $AC65 DEFB $E6,$00,$00,$40,$80,$01,$95,$74,$00,$00,$07,$C0,$00,$FF ;
 $AC73 DEFB $FE,$00,$00,$40,$80,$00,$66,$E4,$00,$00,$00,$00,$00,$FF ;
 $AC81 DEFB $FE,$00,$00,$40,$40,$00,$1B,$C4,$00,$00,$00,$00,$00,$7F ;
 $AC8F DEFB $E6,$00,$00,$40,$40,$00,$04,$34,$00,$00,$00,$00,$00,$7F ;
 $AC9D DEFB $CD,$00,$00,$20,$20,$00,$05,$BA,$00,$00,$00,$00,$00,$7F ;
 $ACAB DEFB $CD,$00,$00,$20,$20,$00,$1B,$5A,$00,$00,$00,$00,$00,$FF ;
 $ACB9 DEFB $CD,$00,$00,$20,$10,$00,$66,$A4,$00,$00,$00,$00,$00,$FF ;
 $ACC7 DEFB $CD,$00,$00,$20,$10,$00,$9D,$54,$00,$00,$00,$00,$01,$FF ;
 $ACD5 DEFB $CD,$00,$00,$20,$10,$01,$6A,$B4,$00,$00,$00,$00,$01,$FF ;
 $ACE3 DEFB $CD,$00,$00,$20,$08,$02,$D5,$48,$00,$00,$00,$00,$01,$FF ;
 $ACF1 DEFB $9B,$00,$00,$20,$08,$05,$AA,$A8,$00,$00,$00,$00,$01,$FF ;
 $ACFF DEFB $9B,$00,$00,$10,$04,$05,$55,$4C,$00,$00,$00,$00,$01,$FF ;
 $AD0D DEFB $FB,$00,$00,$10,$04,$0A,$AA,$AC,$00,$00,$10,$00,$01,$FF ;
 $AD1B DEFB $FB,$00,$00,$10,$02,$09,$55,$48,$00,$00,$10,$00,$79,$FF ;
 $AD29 DEFB $DB,$00,$00,$10,$02,$16,$AA,$A8,$00,$00,$17,$00,$07,$FF ;
 $AD37 DEFB $9F,$00,$00,$10,$01,$15,$55,$68,$00,$00,$38,$00,$01,$FF ;
 $AD45 DEFB $9B,$00,$00,$10,$01,$16,$AA,$B4,$00,$00,$C0,$00,$00,$FF ;
 $AD53 DEFB $9B,$00,$00,$08,$00,$8B,$55,$54,$00,$03,$00,$00,$00,$7F ;
 $AD61 DEFB $36,$00,$00,$08,$00,$8A,$AA,$AA,$00,$1C,$00,$00,$00,$3F ;
 $AD6F DEFB $36,$00,$00,$08,$00,$4B,$55,$52,$00,$E0,$00,$00,$00,$3F ;
 $AD7D DEFB $36,$00,$00,$08,$00,$45,$AA,$A9,$07,$00,$00,$00,$00,$3F ;
 $AD8B DEFB $F6,$00,$00,$04,$00,$24,$D5,$55,$78,$00,$00,$00,$00,$1F ;
 $AD99 DEFB $F6,$00,$00,$04,$00,$23,$2A,$AF,$80,$00,$00,$00,$00,$1F ;
 $ADA7 DEFB $36,$00,$00,$04,$00,$10,$CD,$F8,$00,$00,$00,$00,$00,$1F ;
 $ADB5 DEFB $36,$00,$00,$02,$00,$08,$3F,$00,$00,$00,$00,$00,$00,$1F ;
 $ADC3 DEFB $36,$00,$00,$02,$00,$07,$E0,$00,$00,$00,$00,$00,$00,$1F ;
 $ADD1 DEFB $9B,$00,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F ;
 $ADDF DEFB $9B,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F ;
 $ADED DEFB $FB,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F ;
 $ADFB DEFB $FB,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$7F ;
 $AE09 DEFB $9B,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00,$00,$00,$DF ;
 $AE17 DEFB $9B,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00,$00,$07,$BF ;
 $AE25 DEFB $9B,$00,$00,$00,$20,$00,$00,$00,$00,$00,$00,$00,$7D,$5F ;
 $AE33 DEFB $9B,$1F,$FE,$00,$20,$00,$00,$00,$00,$00,$00,$1F,$AA,$AF ;
 $AE41 DEFB $FF,$F5,$55,$C0,$10,$00,$00,$00,$00,$00,$1F,$F5,$55,$57 ;
 $AE4F DEFB $AA,$AA,$AA,$BF,$0C,$00,$00,$00,$00,$0F,$EA,$AA,$AA,$AB ; }
 $AE5D DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ; {Attributes.
 $AE6B DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $AE79 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $AE87 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $AE95 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $AEA3 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ; }

; Girl 1 Frame 5
;
; #PUSHS
; #UDGTABLE
; {
; #UDGARRAY$09,scale=$04,step=$09($AEB1-$B0A0-$01-$48)@$B0A9-$B0E8(girl-1-frame-5)
; }
; UDGTABLE#
; #POPS
@label=Girl1_Frame5
b$AEB1 DEFB $56,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA ; {Pixels.
 $AEBA DEFB $B5,$55,$55,$55,$5B,$55,$55,$55,$55 ;
 $AEC3 DEFB $56,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA ;
 $AECC DEFB $B5,$55,$55,$55,$5B,$55,$55,$55,$55 ;
 $AED5 DEFB $56,$AA,$AA,$AA,$AA,$BF,$AA,$AA,$AA ;
 $AEDE DEFB $B5,$55,$55,$55,$5F,$E0,$7F,$55,$55 ;
 $AEE7 DEFB $56,$AA,$AA,$AA,$F0,$00,$01,$EA,$AA ;
 $AEF0 DEFB $B5,$55,$55,$57,$00,$00,$00,$1D,$55 ;
 $AEF9 DEFB $56,$AA,$AA,$AC,$00,$00,$00,$03,$AA ;
 $AF02 DEFB $B5,$55,$55,$58,$00,$00,$00,$04,$D5 ;
 $AF0B DEFB $52,$AA,$AA,$E0,$00,$00,$00,$04,$7A ;
 $AF14 DEFB $AB,$55,$55,$80,$00,$00,$00,$0A,$8F ;
 $AF1D DEFB $5A,$AA,$AE,$00,$00,$00,$00,$0A,$81 ;
 $AF26 DEFB $AB,$55,$78,$00,$00,$00,$00,$15,$00 ;
 $AF2F DEFB $5A,$AB,$80,$00,$00,$00,$00,$15,$00 ;
 $AF38 DEFB $AB,$FC,$00,$00,$00,$00,$00,$2A,$00 ;
 $AF41 DEFB $FC,$00,$00,$00,$00,$00,$00,$2A,$00 ;
 $AF4A DEFB $00,$00,$00,$00,$00,$00,$00,$54,$00 ;
 $AF53 DEFB $00,$00,$00,$00,$00,$00,$00,$54,$00 ;
 $AF5C DEFB $00,$00,$00,$00,$00,$00,$00,$A8,$00 ;
 $AF65 DEFB $00,$00,$00,$00,$00,$00,$00,$A8,$00 ;
 $AF6E DEFB $00,$00,$00,$00,$00,$00,$01,$50,$00 ;
 $AF77 DEFB $00,$00,$00,$00,$00,$00,$01,$50,$00 ;
 $AF80 DEFB $00,$00,$00,$00,$00,$00,$02,$50,$00 ;
 $AF89 DEFB $00,$00,$00,$00,$00,$00,$02,$A0,$00 ;
 $AF92 DEFB $00,$00,$00,$00,$00,$00,$05,$20,$00 ;
 $AF9B DEFB $00,$00,$00,$00,$00,$00,$06,$A0,$00 ;
 $AFA4 DEFB $00,$00,$00,$00,$00,$00,$0D,$40,$00 ;
 $AFAD DEFB $00,$00,$00,$00,$00,$00,$1A,$40,$00 ;
 $AFB6 DEFB $00,$00,$00,$00,$00,$00,$35,$40,$00 ;
 $AFBF DEFB $00,$00,$00,$00,$00,$00,$6A,$80,$00 ;
 $AFC8 DEFB $00,$00,$00,$00,$00,$01,$D5,$80,$00 ;
 $AFD1 DEFB $00,$00,$00,$00,$00,$02,$AB,$80,$00 ;
 $AFDA DEFB $00,$00,$00,$00,$00,$0D,$57,$00,$00 ;
 $AFE3 DEFB $00,$00,$00,$00,$00,$3A,$AB,$00,$18 ;
 $AFEC DEFB $00,$00,$00,$00,$01,$F5,$57,$00,$3C ;
 $AFF5 DEFB $00,$00,$00,$00,$FF,$AA,$AB,$00,$18 ;
 $AFFE DEFB $00,$00,$01,$FF,$D5,$55,$55,$00,$00 ;
 $B007 DEFB $00,$1F,$FF,$FF,$AA,$AA,$A9,$00,$00 ;
 $B010 DEFB $FF,$E0,$00,$0F,$D5,$55,$55,$00,$00 ;
 $B019 DEFB $00,$00,$00,$00,$F8,$EA,$A9,$00,$00 ;
 $B022 DEFB $00,$00,$00,$00,$3F,$15,$55,$00,$00 ;
 $B02B DEFB $00,$00,$00,$00,$0F,$E2,$A9,$00,$00 ;
 $B034 DEFB $00,$00,$00,$00,$07,$99,$D5,$00,$00 ;
 $B03D DEFB $00,$00,$00,$00,$03,$06,$69,$00,$00 ;
 $B046 DEFB $00,$00,$00,$00,$01,$81,$B4,$80,$00 ;
 $B04F DEFB $00,$00,$00,$00,$00,$80,$4A,$80,$00 ;
 $B058 DEFB $00,$00,$00,$00,$00,$40,$24,$80,$00 ;
 $B061 DEFB $00,$00,$00,$00,$00,$40,$12,$80,$00 ;
 $B06A DEFB $00,$00,$00,$00,$00,$20,$12,$80,$00 ;
 $B073 DEFB $00,$00,$00,$00,$00,$20,$0A,$80,$00 ;
 $B07C DEFB $00,$00,$00,$00,$00,$00,$0A,$80,$00 ;
 $B085 DEFB $00,$00,$00,$00,$00,$00,$05,$40,$00 ;
 $B08E DEFB $00,$00,$00,$00,$00,$00,$05,$40,$00 ;
 $B097 DEFB $00,$00,$00,$00,$01,$FF,$FF,$FF,$FF ;
 $B0A0 DEFB $00,$00,$00,$7F,$FE,$AA,$AA,$AA,$AA ; }
 $B0A9 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38 ; {Attributes.
 $B0B2 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $B0BB DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $B0C4 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $B0CD DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $B0D6 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $B0DF DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38 ; }

; Girl 1 Frame 6
;
; #PUSHS
; #UDGTABLE
; {
; #UDGARRAY$0E,scale=$04,step=$0E($B0E8-$B37A-$01-$70)@$B388-$B3DC(girl-1-frame-6)
; }
; UDGTABLE#
; #POPS
@label=Girl1_Frame6
b$B0E8 DEFB $AA,$D5,$56,$02,$6A,$AA,$9A,$BA,$AA,$AA,$D5,$55,$60,$0F ; {Pixels.
 $B0F6 DEFB $D5,$5A,$AB,$02,$55,$55,$57,$FF,$D5,$56,$6A,$AA,$A0,$0F ;
 $B104 DEFB $7A,$D5,$55,$02,$6A,$AA,$DC,$38,$3A,$AB,$55,$55,$60,$0F ;
 $B112 DEFB $8F,$5A,$AB,$02,$55,$55,$60,$00,$07,$55,$6A,$AA,$C0,$1F ;
 $B120 DEFB $81,$D5,$55,$82,$2A,$AA,$80,$00,$01,$AB,$55,$55,$40,$1F ;
 $B12E DEFB $00,$3A,$AA,$82,$35,$57,$00,$00,$00,$55,$6A,$AA,$80,$3F ;
 $B13C DEFB $00,$07,$55,$82,$2A,$AC,$00,$00,$00,$3B,$55,$55,$80,$3F ;
 $B14A DEFB $00,$00,$EA,$81,$35,$58,$00,$00,$00,$0D,$6A,$AB,$00,$3F ;
 $B158 DEFB $00,$00,$3D,$81,$2A,$B0,$00,$00,$00,$07,$55,$55,$00,$3F ;
 $B166 DEFB $00,$00,$03,$C1,$15,$C0,$00,$00,$00,$01,$EA,$AA,$00,$7F ;
 $B174 DEFB $00,$00,$00,$41,$FF,$00,$00,$00,$00,$00,$75,$5C,$00,$FF ;
 $B182 DEFB $00,$00,$00,$41,$00,$00,$00,$00,$00,$00,$1A,$B0,$00,$FF ;
 $B190 DEFB $00,$00,$00,$40,$80,$00,$00,$00,$00,$00,$07,$C0,$00,$FF ;
 $B19E DEFB $00,$00,$00,$40,$80,$00,$00,$00,$00,$00,$00,$00,$00,$FF ;
 $B1AC DEFB $00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$7F ;
 $B1BA DEFB $00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$7F ;
 $B1C8 DEFB $00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$7F ;
 $B1D6 DEFB $00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$FF ;
 $B1E4 DEFB $00,$00,$00,$20,$10,$00,$00,$00,$00,$00,$00,$00,$00,$FF ;
 $B1F2 DEFB $00,$00,$00,$20,$10,$00,$80,$00,$00,$00,$00,$00,$01,$FF ;
 $B200 DEFB $00,$00,$00,$20,$10,$01,$00,$00,$00,$00,$00,$00,$01,$FF ;
 $B20E DEFB $00,$00,$00,$20,$08,$02,$00,$00,$00,$00,$00,$00,$01,$FF ;
 $B21C DEFB $00,$00,$00,$20,$08,$04,$00,$38,$00,$00,$00,$00,$01,$FF ;
 $B22A DEFB $00,$00,$00,$10,$04,$04,$00,$6C,$00,$00,$00,$00,$01,$FF ;
 $B238 DEFB $00,$00,$00,$10,$04,$08,$00,$7C,$00,$00,$10,$00,$01,$FF ;
 $B246 DEFB $00,$00,$00,$10,$02,$08,$00,$38,$00,$00,$10,$00,$79,$FF ;
 $B254 DEFB $18,$00,$00,$10,$02,$10,$00,$00,$00,$00,$17,$00,$07,$FF ;
 $B262 DEFB $3C,$00,$00,$10,$01,$10,$00,$00,$00,$00,$38,$00,$01,$FF ;
 $B270 DEFB $18,$00,$00,$10,$01,$10,$00,$00,$00,$00,$C0,$00,$00,$FF ;
 $B27E DEFB $00,$00,$00,$08,$00,$88,$00,$00,$00,$03,$00,$00,$00,$7F ;
 $B28C DEFB $00,$00,$00,$08,$00,$88,$00,$00,$00,$1C,$00,$00,$00,$3F ;
 $B29A DEFB $00,$00,$00,$08,$00,$48,$00,$00,$00,$E0,$00,$00,$00,$3F ;
 $B2A8 DEFB $00,$00,$00,$08,$00,$44,$00,$00,$07,$00,$00,$00,$00,$3F ;
 $B2B6 DEFB $00,$00,$00,$04,$00,$24,$00,$00,$78,$00,$00,$00,$00,$1F ;
 $B2C4 DEFB $00,$00,$00,$04,$00,$23,$00,$07,$80,$00,$00,$00,$00,$1F ;
 $B2D2 DEFB $00,$00,$00,$04,$00,$10,$C0,$F8,$00,$00,$00,$00,$00,$1F ;
 $B2E0 DEFB $00,$00,$00,$02,$00,$08,$1F,$00,$00,$00,$00,$00,$00,$1F ;
 $B2EE DEFB $00,$00,$00,$02,$00,$07,$E0,$00,$00,$00,$00,$00,$00,$1F ;
 $B2FC DEFB $00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F ;
 $B30A DEFB $00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F ;
 $B318 DEFB $00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F ;
 $B326 DEFB $00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$7F ;
 $B334 DEFB $00,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00,$00,$00,$DF ;
 $B342 DEFB $00,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00,$00,$07,$BF ;
 $B350 DEFB $00,$00,$00,$00,$20,$00,$00,$00,$00,$00,$00,$00,$7D,$5F ;
 $B35E DEFB $00,$1F,$FE,$00,$20,$00,$00,$00,$00,$00,$00,$1F,$AA,$AF ;
 $B36C DEFB $FF,$F5,$55,$C0,$10,$00,$00,$00,$00,$00,$1F,$F5,$55,$57 ;
 $B37A DEFB $AA,$AA,$AA,$BF,$0C,$00,$00,$00,$00,$0F,$EA,$AA,$AA,$AB ; }
 $B388 DEFB $38,$38,$38,$38,$38,$38,$38,$3A,$38,$38,$38,$38,$38,$38 ; {Attributes.
 $B396 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $B3A4 DEFB $38,$38,$38,$38,$38,$38,$38,$3A,$3A,$38,$38,$38,$38,$38 ;
 $B3B2 DEFB $38,$38,$38,$38,$38,$38,$38,$3A,$38,$38,$38,$38,$38,$38 ;
 $B3C0 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $B3CE DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ; }

; Girl 1 Frame 7
;
; #PUSHS
; #UDGTABLE
; {
; #UDGARRAY$09,scale=$04,step=$09($B3DC-$B5CB-$01-$48)@$B5D4-$B613(girl-1-frame-7)
; }
; UDGTABLE#
; #POPS
@label=Girl1_Frame7
b$B3DC DEFB $56,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA ; {Pixels.
 $B3E5 DEFB $B5,$55,$55,$55,$5B,$55,$55,$55,$55 ;
 $B3EE DEFB $56,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA ;
 $B3F7 DEFB $B5,$55,$55,$55,$5B,$55,$55,$55,$55 ;
 $B400 DEFB $56,$AA,$AA,$AA,$AA,$BF,$AA,$AA,$AA ;
 $B409 DEFB $B5,$55,$55,$55,$5F,$E0,$7F,$55,$55 ;
 $B412 DEFB $56,$AA,$AA,$AA,$F0,$00,$01,$EA,$AA ;
 $B41B DEFB $B5,$55,$55,$57,$00,$00,$00,$1D,$55 ;
 $B424 DEFB $56,$AA,$AA,$AC,$00,$00,$00,$03,$AA ;
 $B42D DEFB $B5,$55,$55,$58,$00,$00,$00,$00,$D5 ;
 $B436 DEFB $52,$AA,$AA,$E0,$00,$00,$00,$00,$3A ;
 $B43F DEFB $AB,$55,$55,$80,$00,$00,$00,$00,$0F ;
 $B448 DEFB $5A,$AA,$AE,$00,$00,$00,$00,$00,$01 ;
 $B451 DEFB $AB,$55,$78,$00,$00,$00,$00,$00,$00 ;
 $B45A DEFB $5A,$AB,$80,$00,$00,$00,$00,$00,$00 ;
 $B463 DEFB $AB,$FC,$00,$00,$00,$00,$00,$00,$00 ;
 $B46C DEFB $FC,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $B475 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $B47E DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $B487 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $B490 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $B499 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $B4A2 DEFB $00,$00,$00,$00,$00,$00,$01,$00,$00 ;
 $B4AB DEFB $00,$00,$00,$00,$00,$00,$02,$00,$00 ;
 $B4B4 DEFB $4C,$00,$00,$00,$00,$00,$02,$00,$00 ;
 $B4BD DEFB $00,$00,$00,$00,$00,$00,$04,$00,$00 ;
 $B4C6 DEFB $00,$00,$00,$00,$00,$00,$08,$00,$00 ;
 $B4CF DEFB $00,$00,$00,$00,$00,$00,$10,$00,$00 ;
 $B4D8 DEFB $00,$00,$00,$00,$00,$00,$20,$00,$00 ;
 $B4E1 DEFB $00,$00,$00,$00,$00,$00,$40,$00,$00 ;
 $B4EA DEFB $00,$00,$00,$00,$00,$01,$80,$00,$00 ;
 $B4F3 DEFB $00,$00,$00,$00,$00,$02,$00,$00,$00 ;
 $B4FC DEFB $00,$00,$00,$00,$00,$04,$00,$00,$00 ;
 $B505 DEFB $00,$00,$00,$00,$00,$38,$00,$00,$00 ;
 $B50E DEFB $00,$00,$00,$00,$00,$60,$00,$00,$18 ;
 $B517 DEFB $00,$00,$00,$00,$00,$40,$00,$00,$3C ;
 $B520 DEFB $00,$00,$00,$00,$FF,$80,$00,$00,$18 ;
 $B529 DEFB $00,$00,$01,$FF,$FF,$80,$00,$00,$00 ;
 $B532 DEFB $00,$1F,$FF,$FF,$FF,$00,$00,$00,$00 ;
 $B53B DEFB $FF,$E0,$00,$0F,$FF,$00,$00,$00,$00 ;
 $B544 DEFB $00,$00,$00,$00,$FF,$00,$00,$00,$00 ;
 $B54D DEFB $00,$00,$00,$00,$3E,$00,$00,$00,$00 ;
 $B556 DEFB $00,$00,$00,$00,$0F,$00,$00,$00,$00 ;
 $B55F DEFB $00,$00,$00,$00,$07,$00,$00,$00,$00 ;
 $B568 DEFB $00,$00,$00,$00,$03,$00,$00,$00,$00 ;
 $B571 DEFB $00,$00,$00,$00,$01,$80,$00,$00,$00 ;
 $B57A DEFB $00,$00,$00,$00,$00,$80,$00,$00,$00 ;
 $B583 DEFB $00,$00,$00,$00,$00,$40,$00,$00,$00 ;
 $B58C DEFB $00,$00,$00,$00,$00,$40,$00,$00,$00 ;
 $B595 DEFB $00,$00,$00,$00,$00,$20,$00,$00,$00 ;
 $B59E DEFB $00,$00,$00,$00,$00,$20,$00,$00,$00 ;
 $B5A7 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $B5B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $B5B9 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $B5C2 DEFB $00,$00,$00,$00,$01,$FF,$FF,$FF,$FF ;
 $B5CB DEFB $00,$00,$00,$7F,$FE,$AA,$AA,$AA,$AA ; }
 $B5D4 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38 ; {Attributes.
 $B5DD DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $B5E6 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $B5EF DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $B5F8 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $B601 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $B60A DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38 ; }

; Girl 2 Frame 1
;
; #PUSHS
; #UDGTABLE
; {
; #UDGARRAY$20,scale=$04,step=$20($B613-$C0F3-$01-$100)@$C113-$C273(girl-2-frame-1)
; }
; UDGTABLE#
; #POPS
@label=Girl2_Frame1
b$B613 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; {Pixels.
 $B633 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $B653 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $B673 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $B693 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $B6B3 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $B6D3 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $B6F3 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$E0,$01,$F8,$00,$00,$00,$00,$00,$00,$00 ;
 $B713 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$80,$00,$0E,$00,$00,$00,$00,$00,$00,$00 ;
 $B733 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$00,$00,$03,$00,$00,$00,$00,$00,$00,$00 ;
 $B753 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$00,$08,$01,$00,$00,$00,$00,$00,$00,$00 ;
 $B773 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$00,$1E,$01,$80,$00,$00,$00,$00,$00,$00 ;
 $B793 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$00,$1F,$C0,$80,$00,$00,$00,$00,$00,$00 ;
 $B7B3 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$0D,$C0,$E0,$00,$00,$00,$00,$00,$00 ;
 $B7D3 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$6F,$00,$00,$00,$00,$00,$00,$01,$FF,$F0,$03,$00,$3A,$80,$B8,$FE,$00,$00,$00,$00,$00 ;
 $B7F3 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$EF,$00,$00,$00,$0F,$FF,$C0,$7E,$AA,$AF,$C6,$C0,$3E,$80,$57,$55,$F8,$00,$00,$00,$00 ;
 $B813 DEFB $00,$07,$F0,$00,$00,$00,$07,$F8,$00,$01,$FF,$09,$FF,$00,$FF,$FA,$AA,$FF,$D5,$55,$55,$7F,$BC,$33,$C0,$2A,$DA,$AF,$F0,$00,$00,$00 ;
 $B833 DEFB $03,$FD,$5F,$E0,$00,$01,$FD,$57,$FC,$16,$AB,$09,$55,$FF,$D5,$55,$55,$5A,$AA,$AA,$AF,$F7,$56,$02,$C0,$15,$55,$55,$7F,$C0,$00,$00 ;
 $B853 DEFB $FE,$AA,$AA,$BF,$F0,$7E,$AA,$AA,$AB,$ED,$55,$04,$AA,$AD,$AA,$AA,$AA,$AB,$55,$55,$50,$05,$AB,$00,$00,$1A,$DA,$AF,$D5,$78,$00,$00 ;
 $B873 DEFB $AD,$55,$55,$55,$5F,$D5,$55,$55,$55,$6A,$AA,$84,$D5,$55,$55,$55,$55,$5A,$AA,$AA,$B4,$0F,$C5,$80,$00,$0D,$A5,$5A,$AA,$AE,$00,$00 ;
 $B893 DEFB $6A,$AA,$AA,$AA,$AD,$AA,$AA,$AA,$AA,$AD,$55,$82,$AA,$AC,$AA,$AA,$AA,$AB,$55,$55,$52,$00,$02,$80,$00,$06,$AA,$F5,$55,$55,$80,$00 ;
 $B8B3 DEFB $AD,$55,$55,$55,$55,$55,$55,$55,$55,$6A,$AA,$C2,$55,$56,$D5,$55,$55,$59,$AA,$AA,$A8,$00,$05,$80,$00,$05,$B5,$AA,$AA,$AA,$E0,$00 ;
 $B8D3 DEFB $6A,$AA,$AA,$AA,$AD,$AA,$AA,$AA,$AA,$AD,$55,$41,$6A,$AA,$AA,$AA,$AA,$AD,$55,$55,$50,$00,$0B,$C0,$00,$02,$AF,$55,$7F,$55,$50,$00 ;
 $B8F3 DEFB $AD,$55,$55,$55,$55,$55,$55,$55,$55,$6A,$AA,$A1,$55,$56,$D5,$55,$55,$55,$AA,$AA,$B0,$00,$16,$00,$00,$02,$FA,$AB,$C0,$EA,$A8,$00 ;
 $B913 DEFB $6A,$AA,$AA,$AA,$AD,$AA,$AA,$AA,$AA,$AD,$55,$7F,$EA,$AA,$AA,$AA,$AA,$AD,$55,$55,$70,$00,$AE,$00,$00,$01,$B5,$56,$3F,$1D,$54,$00 ;
 $B933 DEFB $AD,$55,$55,$55,$55,$55,$55,$55,$55,$6A,$AA,$C6,$55,$56,$D5,$55,$55,$55,$AA,$AA,$B0,$01,$58,$00,$00,$01,$2A,$B9,$EA,$E6,$AA,$00 ;
 $B953 DEFB $6A,$AA,$AA,$AA,$AD,$AA,$AA,$AA,$AA,$AD,$55,$87,$2A,$AA,$6A,$AA,$AA,$AD,$55,$55,$F0,$02,$B8,$00,$00,$01,$55,$67,$FF,$F9,$56,$00 ;
 $B973 DEFB $A5,$55,$55,$55,$59,$55,$55,$55,$55,$6A,$AB,$1A,$35,$55,$55,$55,$55,$55,$AA,$AB,$00,$05,$50,$00,$00,$01,$6A,$DA,$AA,$AE,$AB,$00 ;
 $B993 DEFB $56,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AD,$56,$9E,$6A,$AB,$6A,$AA,$AA,$AD,$55,$54,$00,$02,$B0,$00,$00,$01,$D5,$7F,$FF,$FF,$55,$00 ;
 $B9B3 DEFB $B5,$55,$55,$55,$5B,$55,$55,$55,$55,$6A,$AD,$14,$75,$55,$55,$55,$55,$55,$AA,$AC,$00,$05,$50,$00,$00,$03,$AA,$AA,$AA,$AA,$AB,$00 ;
 $B9D3 DEFB $56,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$CD,$55,$1C,$6A,$AB,$6A,$AA,$AA,$AC,$D5,$54,$00,$02,$B0,$00,$00,$03,$56,$FF,$FF,$FF,$B5,$80 ;
 $B9F3 DEFB $B5,$55,$55,$55,$5B,$55,$55,$55,$55,$5A,$AD,$18,$B5,$55,$55,$55,$55,$56,$AA,$AB,$00,$01,$70,$00,$00,$06,$AD,$AA,$AA,$AA,$DA,$80 ;
 $BA13 DEFB $56,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$D5,$55,$00,$AA,$AB,$6A,$AA,$AA,$AA,$D5,$55,$80,$00,$A0,$00,$00,$05,$55,$FF,$FF,$FF,$D5,$80 ;
 $BA33 DEFB $B5,$55,$55,$55,$5B,$55,$55,$55,$55,$5A,$AD,$01,$35,$55,$55,$55,$55,$56,$AA,$AA,$C0,$00,$60,$00,$00,$06,$AA,$AA,$AA,$AA,$DA,$80 ;
 $BA53 DEFB $56,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$D5,$54,$01,$2A,$AB,$2A,$AA,$AA,$AA,$D5,$55,$40,$00,$A0,$00,$00,$0D,$5B,$FF,$FF,$FF,$ED,$40 ;
 $BA73 DEFB $B5,$55,$55,$55,$5B,$55,$55,$55,$55,$5A,$AC,$01,$55,$55,$B5,$55,$55,$56,$AA,$AA,$A0,$00,$60,$00,$00,$1A,$B6,$AA,$AA,$AA,$AA,$C0 ;
 $BA93 DEFB $56,$AA,$AA,$AA,$AA,$BF,$AA,$AA,$AA,$D5,$54,$01,$6A,$AA,$AA,$AA,$AA,$AA,$D5,$55,$60,$00,$E0,$00,$00,$15,$6F,$FF,$FF,$FF,$ED,$40 ;
 $BAB3 DEFB $B5,$55,$55,$55,$5F,$FF,$FF,$55,$55,$5A,$AA,$01,$55,$55,$B5,$55,$55,$56,$AA,$AA,$A4,$01,$40,$00,$00,$1A,$AA,$AA,$AA,$AA,$AA,$C0 ;
 $BAD3 DEFB $56,$AA,$AA,$AA,$FF,$FF,$FF,$EA,$AA,$D5,$56,$02,$6A,$AA,$AA,$AB,$AA,$AA,$D5,$55,$63,$0A,$C0,$00,$00,$35,$5F,$FF,$FF,$FF,$F5,$60 ;
 $BAF3 DEFB $B5,$55,$55,$57,$FF,$FB,$FF,$FD,$55,$5A,$AA,$02,$55,$55,$B5,$7F,$F5,$56,$AA,$AA,$A5,$F5,$40,$00,$00,$6A,$DA,$AA,$AA,$AA,$B6,$A0 ;
 $BB13 DEFB $56,$AA,$AA,$AF,$FF,$55,$55,$FF,$AA,$D5,$56,$02,$6A,$AA,$AF,$CC,$FE,$AA,$D5,$55,$62,$AA,$C0,$00,$00,$55,$BF,$FF,$FF,$FF,$F5,$60 ;
 $BB33 DEFB $B5,$55,$55,$5F,$EA,$A0,$AA,$AF,$D5,$5A,$AB,$02,$55,$55,$F3,$33,$33,$D6,$6A,$AA,$A1,$55,$40,$00,$00,$6A,$AA,$AA,$AA,$AA,$B6,$A0 ;
 $BB53 DEFB $52,$AA,$AA,$FF,$55,$00,$01,$55,$FA,$D5,$55,$02,$6A,$AB,$EC,$CC,$CC,$EB,$55,$55,$60,$AA,$C0,$00,$00,$D5,$BF,$FF,$FF,$FF,$FB,$50 ;
 $BB73 DEFB $AB,$55,$55,$FA,$A0,$00,$00,$0A,$FF,$5A,$AB,$02,$55,$57,$B3,$33,$13,$FD,$6A,$AA,$C0,$15,$40,$00,$00,$AB,$6A,$AA,$AA,$AA,$AA,$B0 ;
 $BB93 DEFB $5A,$AA,$AF,$F5,$40,$00,$00,$01,$FF,$D5,$55,$82,$2A,$BF,$CC,$CE,$4D,$FF,$55,$55,$40,$0A,$C0,$00,$00,$D5,$7F,$FF,$FF,$FF,$FB,$50 ;
 $BBB3 DEFB $AB,$55,$5F,$AA,$00,$00,$00,$00,$FB,$BA,$AA,$82,$35,$7F,$F3,$B5,$17,$FF,$6A,$AA,$80,$05,$40,$00,$01,$AB,$6A,$AA,$AA,$AA,$AA,$B0 ;
 $BBD3 DEFB $5A,$AA,$BF,$54,$00,$00,$00,$00,$FE,$EF,$55,$BA,$2F,$FF,$E0,$CC,$45,$FF,$D5,$55,$80,$0A,$C0,$00,$01,$56,$FF,$FF,$FF,$FF,$FB,$50 ;
 $BBF3 DEFB $AB,$55,$7A,$A0,$00,$00,$00,$00,$FF,$F7,$EA,$DD,$FF,$FF,$E0,$B5,$17,$FF,$EA,$AB,$00,$05,$C0,$00,$01,$AA,$AA,$AA,$AA,$AA,$AA,$B0 ;
 $BC13 DEFB $5A,$AA,$F5,$00,$00,$00,$00,$00,$DE,$2C,$DD,$E7,$7C,$CF,$DC,$CE,$4C,$FF,$F5,$55,$00,$0A,$80,$00,$03,$56,$FF,$FF,$FF,$FF,$FB,$50 ;
 $BC33 DEFB $AB,$55,$EA,$00,$00,$00,$00,$00,$D4,$13,$33,$99,$B3,$33,$33,$33,$13,$33,$FE,$AE,$00,$05,$80,$00,$02,$AD,$AA,$AA,$AA,$AA,$AD,$A8 ;
 $BC53 DEFB $5A,$AA,$D4,$00,$00,$00,$00,$00,$DC,$1C,$CC,$E7,$CC,$CC,$CC,$CC,$EC,$CC,$FF,$FE,$00,$02,$80,$00,$03,$55,$FF,$FF,$FF,$FF,$FD,$58 ;
 $BC73 DEFB $AB,$55,$A8,$00,$00,$00,$00,$00,$D4,$13,$33,$5D,$33,$33,$33,$33,$33,$33,$FF,$FE,$00,$05,$80,$00,$06,$AD,$AA,$AA,$AA,$AA,$AD,$A8 ;
 $BC93 DEFB $5A,$AB,$D0,$00,$00,$00,$00,$00,$DE,$2C,$CC,$FE,$CC,$DF,$CC,$CC,$CC,$CD,$FF,$FE,$00,$02,$80,$00,$05,$5B,$FF,$FF,$FF,$FF,$FD,$58 ;
 $BCB3 DEFB $AB,$57,$A0,$00,$00,$00,$02,$01,$93,$F3,$33,$7F,$B3,$35,$B3,$7B,$33,$33,$FF,$3F,$00,$05,$80,$00,$06,$AA,$AA,$AA,$AA,$AA,$AD,$A8 ;
 $BCD3 DEFB $5A,$AF,$50,$00,$00,$00,$02,$01,$BC,$FC,$DF,$FE,$CC,$EA,$CC,$8C,$CC,$CC,$FC,$DF,$00,$0A,$80,$00,$05,$5B,$FF,$FF,$FF,$FF,$FD,$58 ;
 $BCF3 DEFB $AB,$5E,$A0,$00,$00,$00,$06,$01,$B3,$D7,$31,$DF,$73,$35,$B3,$8B,$33,$F3,$7B,$3F,$00,$1F,$F8,$FC,$06,$AA,$AA,$AA,$AA,$AA,$AD,$A8 ;
 $BD13 DEFB $59,$BD,$40,$00,$00,$00,$06,$01,$AD,$AB,$C4,$6C,$EC,$DF,$CC,$74,$DF,$FC,$CC,$CF,$80,$3F,$FF,$FE,$0D,$57,$FF,$FF,$FF,$FF,$FD,$58 ;
 $BD33 DEFB $AD,$5A,$80,$00,$00,$00,$06,$01,$B3,$55,$91,$33,$33,$33,$33,$33,$3F,$FF,$37,$3F,$80,$FF,$FF,$FF,$0A,$B6,$AA,$AA,$AA,$AA,$AD,$A8 ;
 $BD53 DEFB $55,$BD,$00,$00,$00,$00,$0C,$03,$2E,$AA,$C4,$6F,$DC,$CC,$CC,$CC,$DF,$FC,$C8,$CF,$C0,$FF,$FF,$FF,$0D,$57,$FF,$FF,$FF,$FF,$FD,$58 ;
 $BD73 DEFB $AD,$7A,$00,$00,$00,$00,$18,$03,$73,$55,$91,$39,$B3,$33,$33,$33,$3F,$FF,$30,$7F,$F0,$7F,$FF,$FF,$0A,$B6,$AA,$AA,$AA,$AA,$AD,$A8 ;
 $BD93 DEFB $55,$F4,$00,$00,$00,$00,$30,$03,$4E,$AA,$C4,$74,$5C,$CF,$CC,$CC,$FF,$FC,$D0,$4F,$F8,$FF,$FF,$FF,$8D,$57,$FF,$FF,$FF,$FF,$FE,$D4 ;
 $BDB3 DEFB $AD,$E8,$00,$00,$00,$00,$30,$03,$73,$55,$91,$31,$7B,$3F,$FB,$33,$3F,$FB,$30,$77,$FF,$FF,$FF,$FF,$9A,$AA,$AA,$AA,$AA,$AA,$AA,$AC ;
 $BDD3 DEFB $5F,$D0,$00,$00,$00,$00,$70,$03,$4D,$AB,$C4,$74,$4C,$FF,$FC,$CC,$FF,$CC,$C8,$CF,$FF,$FF,$FF,$FF,$95,$6F,$FF,$FF,$FF,$FF,$FE,$D4 ;
 $BDF3 DEFB $FF,$A0,$00,$00,$00,$00,$E0,$03,$73,$D7,$31,$B9,$B7,$3F,$FB,$33,$1F,$33,$37,$33,$FF,$FF,$FF,$FF,$9A,$AA,$AA,$AA,$AA,$AA,$AA,$AC ;
 $BE13 DEFB $D7,$40,$00,$00,$00,$03,$C0,$03,$4C,$FC,$DF,$DF,$CC,$FF,$FC,$CC,$45,$CC,$CC,$CC,$FF,$7F,$FF,$FF,$D5,$6F,$FF,$FF,$FF,$FF,$FE,$D4 ;
 $BE33 DEFB $AE,$80,$00,$00,$00,$0F,$A0,$03,$73,$33,$33,$33,$33,$3F,$F3,$31,$11,$33,$33,$33,$7F,$3F,$FF,$FF,$DA,$AA,$AA,$AA,$AA,$AA,$AA,$AC ;
 $BE53 DEFB $5D,$40,$00,$00,$00,$1F,$40,$03,$4C,$CC,$CC,$DC,$CE,$CF,$CC,$D4,$45,$CC,$CF,$FE,$CF,$3F,$FF,$FF,$F5,$5F,$FF,$FF,$FF,$FF,$FE,$D4 ;
 $BE73 DEFB $1A,$80,$00,$00,$00,$3E,$80,$03,$73,$F3,$33,$33,$33,$37,$33,$31,$11,$33,$3B,$51,$33,$7F,$FF,$FE,$EA,$DA,$AA,$AA,$AA,$AA,$AA,$AC ;
 $BE93 DEFB $35,$00,$00,$00,$00,$7D,$00,$03,$4C,$5C,$CC,$DC,$FD,$CC,$FC,$D4,$45,$CC,$CC,$C4,$CC,$BF,$FF,$FD,$F5,$5F,$FF,$FF,$FF,$FF,$FE,$D4 ;
 $BEB3 DEFB $6A,$00,$00,$00,$00,$FA,$00,$03,$79,$1B,$33,$3B,$57,$B3,$47,$39,$13,$33,$33,$11,$73,$3F,$FF,$FE,$EA,$DA,$AA,$AA,$AA,$AA,$AA,$AC ;
 $BED3 DEFB $D4,$00,$00,$00,$01,$F4,$00,$03,$34,$44,$FC,$CC,$C6,$CC,$82,$CC,$5C,$DC,$CD,$44,$4C,$BF,$FF,$FD,$F5,$5F,$FF,$FF,$FF,$FF,$FE,$D4 ;
 $BEF3 DEFB $A8,$00,$00,$00,$07,$A8,$00,$01,$B1,$17,$7F,$3B,$11,$73,$83,$33,$FB,$F3,$33,$11,$73,$3F,$FF,$FE,$EA,$DA,$AA,$AA,$AA,$AA,$AA,$AC ;
 $BF13 DEFB $50,$00,$00,$00,$1F,$50,$00,$01,$B4,$44,$FE,$CD,$45,$CC,$82,$CD,$CF,$CC,$CD,$44,$4C,$FF,$FF,$FD,$D5,$BF,$FF,$FF,$FF,$FF,$FE,$D4 ;
 $BF33 DEFB $A0,$00,$00,$00,$3E,$A0,$00,$01,$B1,$17,$FF,$37,$11,$33,$47,$33,$7B,$F3,$33,$11,$73,$3F,$FF,$FE,$EA,$AA,$AA,$AA,$AA,$AA,$AB,$6A ;
 $BF53 DEFB $40,$00,$00,$00,$7D,$50,$00,$01,$B4,$44,$FE,$CC,$C6,$EC,$FC,$CC,$CE,$AC,$CC,$C4,$CE,$DF,$FF,$F9,$D5,$BF,$FF,$FF,$FF,$FF,$FF,$56 ;
 $BF73 DEFB $80,$00,$00,$01,$FE,$A0,$00,$01,$A9,$1B,$7F,$37,$57,$33,$33,$FB,$35,$53,$33,$51,$31,$3F,$FF,$FE,$EA,$AA,$AA,$AA,$AA,$AA,$AB,$6A ;
 $BF93 DEFB $00,$00,$00,$03,$EF,$50,$00,$01,$BC,$5C,$FC,$CE,$FC,$CC,$DC,$CC,$CE,$BC,$CC,$FE,$D1,$DF,$FF,$F5,$D5,$BF,$FF,$FF,$FF,$FF,$FF,$56 ;
 $BFB3 DEFB $00,$00,$00,$07,$D1,$A8,$00,$01,$93,$F3,$33,$33,$33,$37,$F3,$33,$35,$53,$F3,$33,$31,$3F,$FF,$EA,$EA,$AA,$AA,$AA,$AA,$AA,$AB,$6A ;
 $BFD3 DEFB $00,$00,$00,$0F,$A0,$F4,$00,$00,$DC,$CC,$CC,$CE,$CC,$FC,$CC,$CC,$CE,$AD,$FC,$CC,$CE,$DF,$FA,$A5,$D5,$BF,$FF,$FF,$FF,$FF,$FF,$56 ;
 $BFF3 DEFB $00,$00,$00,$3F,$40,$7A,$00,$00,$D3,$3F,$33,$7B,$33,$FB,$39,$13,$33,$F3,$FB,$33,$3F,$3F,$D5,$5A,$EA,$AA,$AA,$AA,$AA,$AA,$AB,$6A ;
 $C013 DEFB $00,$00,$00,$7D,$80,$1D,$00,$00,$DC,$FF,$CE,$AD,$CC,$FC,$CC,$46,$CF,$CF,$FC,$CC,$FF,$FF,$FF,$FF,$D5,$7F,$FF,$FF,$FF,$FF,$FF,$56 ;
 $C033 DEFB $00,$00,$00,$FA,$00,$04,$00,$00,$D3,$FF,$F5,$57,$B3,$FB,$39,$13,$38,$B3,$FB,$33,$FF,$AE,$FF,$FF,$AB,$6A,$AA,$AA,$AA,$AA,$AB,$6A ;
 $C053 DEFB $00,$00,$03,$F4,$00,$00,$00,$00,$DC,$FF,$CE,$AC,$CC,$FD,$CC,$46,$D0,$4D,$FC,$CC,$FD,$55,$B5,$75,$D5,$7F,$FF,$FF,$FF,$FF,$FF,$56 ;
 $C073 DEFB $00,$00,$07,$D8,$00,$00,$00,$00,$D3,$3F,$33,$5B,$73,$36,$39,$13,$30,$73,$F3,$33,$FA,$AA,$AA,$AA,$AB,$6A,$AA,$AA,$AA,$AA,$AB,$6A ;
 $C093 DEFB $00,$00,$0F,$A0,$00,$00,$00,$00,$DC,$CC,$CD,$BC,$EC,$CC,$1C,$44,$D0,$4C,$CC,$CF,$D5,$55,$B5,$55,$D5,$FF,$FF,$FF,$FF,$FF,$FF,$56 ;
 $C0B3 DEFB $00,$00,$1F,$40,$00,$00,$00,$00,$D3,$3F,$FE,$F3,$33,$34,$13,$1B,$38,$B3,$33,$3F,$AA,$AB,$2A,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AB,$6A ;
 $C0D3 DEFB $00,$00,$7D,$80,$01,$FF,$00,$FF,$FF,$F5,$55,$CC,$DC,$CE,$2D,$FC,$CF,$CC,$DF,$F5,$55,$55,$75,$55,$D7,$FF,$FF,$FF,$FF,$FF,$FF,$56 ;
 $C0F3 DEFB $00,$01,$FA,$7F,$FE,$AA,$FF,$AA,$AA,$AA,$AA,$BF,$FB,$33,$F3,$33,$33,$3F,$EA,$AA,$AA,$AB,$6A,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AB,$6A ; }
 $C113 DEFB $70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70 ; {Attributes.
 $C133 DEFB $70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$77,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$71,$70,$70,$70,$70,$70,$70,$70,$70 ;
 $C153 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$78,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$71,$71,$70,$38,$38,$38,$70,$70,$70 ;
 $C173 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$3A,$38,$70,$70,$70,$70,$38,$38,$38,$38,$38,$70 ;
 $C193 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$70,$70,$70,$70,$38,$38,$38,$38,$38,$70 ;
 $C1B3 DEFB $38,$38,$38,$30,$30,$30,$30,$30,$38,$38,$38,$38,$38,$38,$20,$20,$20,$38,$38,$38,$38,$38,$70,$70,$70,$38,$38,$38,$38,$38,$38,$70 ;
 $C1D3 DEFB $38,$38,$30,$30,$30,$30,$30,$30,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$38,$38,$38,$38,$70,$70,$70,$38,$38,$38,$38,$38,$38,$70 ;
 $C1F3 DEFB $38,$30,$30,$30,$30,$30,$30,$30,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$38,$3A,$3A,$3A,$70,$38,$38,$38,$38,$38,$38,$70 ;
 $C213 DEFB $30,$30,$30,$30,$30,$30,$30,$30,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$02,$3A,$02,$38,$38,$38,$38,$38,$38,$38,$70 ;
 $C233 DEFB $30,$30,$30,$30,$30,$30,$30,$30,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$02,$02,$02,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $C253 DEFB $30,$30,$30,$30,$30,$30,$30,$30,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ; }

; Girl 2 Frame 2
;
; #PUSHS
; #UDGTABLE
; {
; #UDGARRAY$0F,scale=$04,step=$0F($C273-$C5AC-$01-$78)@$C5BB-$C624(girl-2-frame-2)
; }
; UDGTABLE#
; #POPS
@label=Girl2_Frame2
b$C273 DEFB $AA,$AA,$D5,$55,$00,$AA,$AB,$6A,$AA,$AA,$AA,$D5,$55,$80,$00 ; {Pixels.
 $C282 DEFB $55,$55,$5A,$AD,$01,$35,$55,$55,$55,$55,$56,$AA,$AA,$C0,$00 ;
 $C291 DEFB $AA,$AA,$D5,$54,$01,$2A,$AB,$2A,$AA,$AA,$AA,$D5,$55,$40,$00 ;
 $C2A0 DEFB $55,$55,$5A,$AC,$01,$55,$55,$B5,$55,$55,$56,$AA,$AA,$A0,$00 ;
 $C2AF DEFB $AA,$AA,$D5,$54,$01,$6A,$AA,$AA,$AA,$AA,$AA,$D5,$55,$60,$00 ;
 $C2BE DEFB $55,$55,$5A,$AA,$01,$55,$55,$B5,$55,$55,$56,$AA,$AA,$A4,$01 ;
 $C2CD DEFB $EA,$AA,$D5,$56,$02,$6A,$AA,$AA,$AA,$AA,$AA,$D5,$55,$63,$0A ;
 $C2DC DEFB $FD,$55,$5A,$AA,$02,$55,$55,$B5,$7F,$55,$56,$AA,$AA,$A5,$F5 ;
 $C2EB DEFB $FF,$AA,$D5,$56,$02,$6A,$AA,$AB,$FF,$EA,$AA,$D5,$55,$62,$AA ;
 $C2FA DEFB $AF,$D5,$5A,$AB,$02,$55,$55,$BF,$7D,$F5,$56,$6A,$AA,$A1,$55 ;
 $C309 DEFB $55,$FA,$D5,$55,$02,$6A,$AA,$FF,$EF,$FA,$AB,$55,$55,$60,$AA ;
 $C318 DEFB $0A,$BF,$5A,$AB,$02,$55,$55,$FF,$FF,$FF,$55,$6A,$AA,$C0,$15 ;
 $C327 DEFB $01,$57,$D5,$55,$82,$2A,$AB,$FF,$FF,$FF,$AB,$55,$55,$40,$0A ;
 $C336 DEFB $00,$AF,$FA,$AA,$82,$35,$57,$FF,$BF,$FF,$D5,$6A,$AA,$80,$05 ;
 $C345 DEFB $00,$57,$FF,$55,$82,$2A,$AF,$FF,$D7,$FF,$FB,$55,$55,$80,$0A ;
 $C354 DEFB $00,$0B,$FF,$EA,$81,$35,$5F,$FF,$AF,$FF,$FD,$6A,$AB,$00,$05 ;
 $C363 DEFB $00,$0F,$FF,$FD,$C1,$1A,$FF,$F7,$DF,$9F,$FF,$55,$55,$00,$0A ;
 $C372 DEFB $00,$0F,$FF,$FF,$C1,$0F,$FF,$EA,$FF,$A7,$FF,$EA,$AA,$00,$05 ;
 $C381 DEFB $00,$1B,$F7,$FF,$C1,$FF,$DF,$F5,$7F,$DB,$FF,$F5,$5C,$00,$02 ;
 $C390 DEFB $00,$1F,$FA,$FF,$C1,$FF,$BF,$FD,$BF,$F7,$FF,$FA,$B0,$00,$05 ;
 $C39F DEFB $00,$1F,$F7,$7F,$C0,$FF,$6F,$FE,$FF,$5F,$FF,$FF,$C0,$00,$02 ;
 $C3AE DEFB $00,$17,$ED,$FF,$C0,$FF,$5B,$FF,$FF,$BF,$FF,$C0,$00,$00,$05 ;
 $C3BD DEFB $00,$1F,$F6,$FF,$C0,$7F,$B6,$FF,$FF,$FF,$FE,$00,$00,$00,$0A ;
 $C3CC DEFB $00,$1F,$FB,$7F,$C0,$7F,$DF,$DF,$FF,$FF,$FC,$00,$00,$00,$1F ;
 $C3DB DEFB $00,$37,$FE,$FB,$E0,$3F,$FF,$FF,$FF,$5B,$F8,$00,$00,$00,$3F ;
 $C3EA DEFB $00,$3F,$FD,$FF,$E0,$3F,$7F,$FF,$FE,$AD,$F8,$00,$00,$00,$FF ;
 $C3F9 DEFB $00,$3F,$FB,$FA,$E0,$1F,$BF,$DF,$FF,$7F,$F8,$00,$00,$00,$FF ;
 $C408 DEFB $00,$6F,$FF,$F5,$E0,$1F,$DF,$7F,$FF,$FF,$FC,$00,$00,$00,$7F ;
 $C417 DEFB $00,$7F,$FF,$EB,$E0,$1F,$EF,$FF,$FF,$FF,$FE,$00,$00,$00,$7F ;
 $C426 DEFB $00,$7F,$FF,$DF,$E0,$0F,$D5,$FF,$FF,$FF,$FE,$00,$00,$00,$7F ;
 $C435 DEFB $00,$5F,$FF,$BF,$E0,$0F,$EF,$EF,$FF,$FF,$FF,$00,$00,$00,$3F ;
 $C444 DEFB $00,$7F,$F7,$5F,$F0,$07,$DB,$F7,$DF,$FF,$FF,$F0,$0F,$E0,$3F ;
 $C453 DEFB $00,$7F,$FA,$BF,$F0,$07,$FF,$FB,$FF,$EF,$FF,$FF,$FF,$F8,$3F ;
 $C462 DEFB $00,$5F,$FF,$FE,$F0,$03,$F3,$F7,$FB,$D7,$FF,$FF,$FF,$FE,$3F ;
 $C471 DEFB $00,$7F,$FF,$FD,$F0,$03,$EF,$EB,$DF,$EF,$FF,$FF,$00,$07,$9F ;
 $C480 DEFB $00,$7F,$F9,$BF,$F0,$01,$F7,$F5,$FF,$D7,$FF,$F8,$00,$01,$FF ;
 $C48F DEFB $00,$5F,$FE,$DB,$F0,$01,$F9,$FF,$FF,$AF,$FF,$C0,$00,$00,$FF ;
 $C49E DEFB $00,$7F,$FF,$37,$F8,$00,$F7,$FF,$FF,$DF,$FF,$00,$00,$00,$7F ;
 $C4AD DEFB $00,$7F,$FF,$FB,$F8,$00,$FB,$FF,$AF,$FF,$FC,$00,$00,$00,$3F ;
 $C4BC DEFB $00,$5F,$F5,$E7,$F8,$00,$7D,$BF,$D7,$FF,$E0,$00,$00,$00,$3F ;
 $C4CB DEFB $00,$7F,$EA,$FF,$F8,$00,$7F,$FF,$FF,$FF,$00,$00,$00,$00,$3F ;
 $C4DA DEFB $00,$7F,$F5,$7F,$FC,$00,$3F,$FF,$FF,$F8,$00,$00,$00,$00,$1F ;
 $C4E9 DEFB $00,$5F,$EE,$FF,$FC,$00,$3F,$FF,$FF,$80,$00,$00,$00,$00,$1F ;
 $C4F8 DEFB $00,$7F,$F7,$7F,$FC,$00,$1F,$FF,$F8,$00,$00,$00,$00,$00,$1F ;
 $C507 DEFB $00,$7F,$FF,$EF,$FE,$00,$0F,$FF,$00,$00,$00,$00,$00,$00,$1F ;
 $C516 DEFB $00,$5F,$FF,$D7,$FE,$00,$07,$E0,$00,$00,$00,$00,$00,$00,$1F ;
 $C525 DEFB $00,$7F,$FF,$E7,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F ;
 $C534 DEFB $00,$7F,$FF,$FB,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F ;
 $C543 DEFB $00,$5F,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F ;
 $C552 DEFB $00,$7F,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$6E ;
 $C561 DEFB $00,$3F,$FF,$FF,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$D5 ;
 $C570 DEFB $00,$2F,$FF,$FF,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$07,$AA ;
 $C57F DEFB $00,$3F,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$7D,$55 ;
 $C58E DEFB $00,$3F,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$1F,$AA,$AB ;
 $C59D DEFB $FF,$FF,$F5,$55,$FF,$F0,$00,$00,$00,$00,$00,$1F,$F5,$55,$55 ;
 $C5AC DEFB $AA,$AA,$AA,$AA,$AA,$AC,$00,$00,$00,$00,$0F,$EA,$AA,$AA,$AB ; }
 $C5BB DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ; {Attributes.
 $C5CA DEFB $30,$38,$38,$38,$38,$38,$38,$38,$48,$38,$38,$38,$38,$38,$38 ;
 $C5D9 DEFB $30,$30,$48,$48,$38,$38,$48,$48,$48,$48,$38,$38,$38,$38,$38 ;
 $C5E8 DEFB $30,$30,$48,$48,$38,$38,$48,$48,$48,$48,$38,$38,$38,$38,$3A ;
 $C5F7 DEFB $30,$30,$48,$48,$38,$38,$48,$48,$48,$48,$38,$38,$38,$38,$3A ;
 $C606 DEFB $30,$30,$48,$48,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$3A ;
 $C615 DEFB $30,$30,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ; }

; Girl 2 Frame 3
;
; #PUSHS
; #UDGTABLE
; {
; #UDGARRAY$0F,scale=$04,step=$0F($C624-$C95D-$01-$78)@$C96C-$C9D5(girl-2-frame-3)
; }
; UDGTABLE#
; #POPS
@label=Girl2_Frame3
b$C624 DEFB $AA,$AA,$D5,$55,$00,$AA,$AB,$6A,$AA,$AA,$AA,$D5,$55,$80,$00 ; {Pixels.
 $C633 DEFB $55,$55,$5A,$AD,$01,$35,$55,$55,$55,$55,$56,$AA,$AA,$C0,$00 ;
 $C642 DEFB $AA,$AA,$D5,$54,$01,$2A,$AB,$2A,$AA,$AA,$AA,$D5,$55,$40,$00 ;
 $C651 DEFB $55,$55,$5A,$AC,$01,$55,$55,$B5,$55,$55,$56,$AA,$AA,$A0,$00 ;
 $C660 DEFB $AA,$AA,$D5,$54,$01,$6A,$AA,$AA,$AA,$AA,$AA,$D5,$55,$60,$00 ;
 $C66F DEFB $55,$55,$5A,$AA,$01,$55,$55,$B5,$55,$55,$56,$AA,$AA,$A4,$01 ;
 $C67E DEFB $EA,$AA,$D5,$56,$02,$6A,$AA,$AA,$AA,$AA,$AA,$D5,$55,$63,$0A ;
 $C68D DEFB $FD,$55,$5A,$AA,$02,$55,$55,$B5,$7D,$55,$56,$AA,$AA,$A5,$F5 ;
 $C69C DEFB $FF,$AA,$D5,$56,$02,$6A,$AA,$AB,$FF,$AA,$AA,$D5,$55,$62,$AA ;
 $C6AB DEFB $AF,$D5,$5A,$AB,$02,$55,$55,$BF,$FA,$F5,$56,$6A,$AA,$A1,$55 ;
 $C6BA DEFB $55,$FA,$D5,$55,$02,$6A,$AA,$FF,$54,$FA,$AB,$55,$55,$60,$AA ;
 $C6C9 DEFB $0A,$BF,$5A,$AB,$02,$55,$55,$EA,$A0,$FF,$55,$6A,$AA,$C0,$15 ;
 $C6D8 DEFB $01,$5F,$D5,$55,$82,$2A,$AB,$D5,$00,$FF,$AB,$55,$55,$40,$0A ;
 $C6E7 DEFB $00,$AB,$FA,$AA,$82,$35,$57,$A0,$00,$FF,$D5,$6A,$AA,$80,$05 ;
 $C6F6 DEFB $00,$55,$FF,$55,$82,$2A,$AF,$40,$00,$FF,$FB,$55,$55,$80,$0A ;
 $C705 DEFB $00,$0A,$FF,$EA,$81,$35,$5F,$80,$00,$FF,$FD,$6A,$AB,$00,$05 ;
 $C714 DEFB $00,$05,$FF,$FD,$7E,$15,$BE,$FC,$1F,$00,$FF,$55,$55,$00,$0A ;
 $C723 DEFB $00,$02,$AF,$FF,$7E,$0A,$F8,$F0,$0F,$00,$FF,$EA,$AA,$00,$05 ;
 $C732 DEFB $00,$05,$55,$FF,$3E,$00,$00,$E0,$03,$00,$FF,$F5,$5C,$00,$02 ;
 $C741 DEFB $00,$07,$02,$AA,$3E,$00,$10,$C0,$03,$00,$FF,$8A,$B0,$00,$05 ;
 $C750 DEFB $00,$05,$01,$55,$3F,$00,$00,$80,$01,$00,$FE,$07,$C0,$00,$02 ;
 $C75F DEFB $00,$07,$00,$00,$3F,$00,$00,$80,$01,$00,$C0,$00,$00,$00,$05 ;
 $C76E DEFB $00,$05,$00,$00,$3F,$80,$04,$00,$00,$07,$00,$00,$00,$00,$0A ;
 $C77D DEFB $00,$07,$00,$00,$3F,$80,$00,$00,$00,$3F,$00,$00,$00,$00,$1F ;
 $C78C DEFB $00,$05,$FF,$00,$1F,$C0,$FC,$00,$00,$7F,$FF,$FF,$00,$00,$3F ;
 $C79B DEFB $00,$0B,$FF,$00,$1F,$C0,$F8,$00,$00,$3F,$FF,$FF,$00,$00,$FF ;
 $C7AA DEFB $00,$0F,$FF,$00,$1F,$E0,$F8,$00,$00,$07,$FF,$FF,$00,$00,$FF ;
 $C7B9 DEFB $00,$0B,$FF,$00,$1F,$E0,$F8,$00,$00,$01,$FF,$FF,$00,$00,$7F ;
 $C7C8 DEFB $00,$17,$FF,$00,$1F,$E0,$F8,$80,$00,$00,$7F,$FF,$00,$00,$7F ;
 $C7D7 DEFB $00,$1F,$FF,$00,$1F,$F0,$FC,$00,$00,$00,$1F,$FF,$00,$00,$7F ;
 $C7E6 DEFB $00,$17,$FF,$00,$1F,$F0,$FC,$00,$00,$00,$07,$FF,$00,$00,$3F ;
 $C7F5 DEFB $00,$1F,$1F,$00,$0F,$F8,$FC,$00,$80,$00,$01,$FF,$00,$00,$3F ;
 $C804 DEFB $00,$17,$0F,$FF,$0F,$F8,$08,$02,$00,$00,$00,$80,$00,$00,$3F ;
 $C813 DEFB $00,$1F,$01,$FF,$0F,$FC,$00,$00,$01,$00,$00,$C0,$00,$78,$3F ;
 $C822 DEFB $00,$17,$00,$3F,$0F,$FC,$00,$81,$01,$00,$00,$F7,$00,$06,$1F ;
 $C831 DEFB $00,$1F,$00,$07,$0F,$FE,$00,$80,$01,$00,$00,$F8,$00,$01,$BF ;
 $C840 DEFB $00,$17,$00,$03,$0F,$FE,$10,$C0,$03,$00,$00,$C0,$00,$00,$FF ;
 $C84F DEFB $00,$1F,$00,$03,$07,$FE,$00,$C0,$07,$00,$03,$00,$00,$00,$7F ;
 $C85E DEFB $00,$17,$00,$01,$07,$FF,$00,$F0,$1F,$00,$1F,$00,$00,$00,$3F ;
 $C86D DEFB $00,$1F,$00,$01,$07,$FF,$00,$FE,$7F,$00,$FF,$00,$00,$00,$3F ;
 $C87C DEFB $00,$17,$00,$00,$07,$00,$80,$00,$00,$07,$00,$00,$00,$00,$3F ;
 $C88B DEFB $00,$1F,$00,$00,$03,$00,$C0,$00,$00,$7F,$00,$00,$00,$00,$1F ;
 $C89A DEFB $00,$17,$00,$00,$03,$00,$C0,$00,$07,$FF,$00,$00,$00,$00,$1F ;
 $C8A9 DEFB $00,$1F,$00,$00,$03,$00,$E0,$00,$FF,$FF,$00,$00,$00,$00,$1F ;
 $C8B8 DEFB $00,$17,$00,$00,$01,$00,$F0,$1F,$FF,$FF,$00,$00,$00,$00,$1F ;
 $C8C7 DEFB $00,$1F,$00,$00,$01,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$1F ;
 $C8D6 DEFB $00,$17,$00,$00,$01,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$1F ;
 $C8E5 DEFB $00,$1F,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$3F ;
 $C8F4 DEFB $00,$17,$00,$00,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F ;
 $C903 DEFB $00,$0B,$00,$00,$05,$80,$00,$00,$00,$00,$00,$00,$00,$00,$6E ;
 $C912 DEFB $00,$0F,$00,$00,$02,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$D5 ;
 $C921 DEFB $00,$0B,$00,$00,$03,$C0,$00,$00,$00,$00,$00,$00,$00,$07,$AA ;
 $C930 DEFB $00,$0F,$00,$00,$05,$E0,$00,$00,$00,$00,$00,$00,$00,$7D,$55 ;
 $C93F DEFB $00,$0B,$1F,$FE,$0A,$E0,$00,$00,$00,$00,$00,$00,$1F,$AA,$AB ;
 $C94E DEFB $FF,$FF,$F5,$55,$D5,$F0,$00,$00,$00,$00,$00,$1F,$F5,$55,$55 ;
 $C95D DEFB $AA,$AA,$AA,$AA,$BF,$FC,$00,$00,$00,$00,$0F,$EA,$AA,$AA,$AB ; }
 $C96C DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ; {Attributes.
 $C97B DEFB $30,$38,$38,$38,$38,$38,$38,$10,$10,$3A,$38,$38,$38,$38,$38 ;
 $C98A DEFB $30,$32,$10,$10,$17,$17,$10,$1A,$1A,$17,$3A,$38,$38,$38,$38 ;
 $C999 DEFB $30,$32,$1A,$10,$17,$17,$1A,$1A,$1A,$17,$17,$17,$38,$38,$3A ;
 $C9A8 DEFB $30,$33,$1A,$1A,$17,$17,$10,$1A,$1A,$12,$17,$3A,$38,$38,$3A ;
 $C9B7 DEFB $30,$33,$18,$18,$17,$38,$17,$17,$17,$17,$38,$38,$38,$38,$3A ;
 $C9C6 DEFB $30,$33,$18,$18,$10,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ; }

; Girl 2 Frame 4
;
; #PUSHS
; #UDGTABLE
; {
; #UDGARRAY$09,scale=$04,step=$09($C9D5-$CBC4-$01-$48)@$CBCD-$CC0C(girl-2-frame-4)
; }
; UDGTABLE#
; #POPS
@label=Girl2_Frame4
b$C9D5 DEFB $56,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA ; {Pixels.
 $C9DE DEFB $B5,$55,$55,$55,$5B,$55,$55,$55,$55 ;
 $C9E7 DEFB $56,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA ;
 $C9F0 DEFB $B5,$55,$55,$55,$5B,$55,$55,$55,$55 ;
 $C9F9 DEFB $56,$AA,$AA,$AA,$AA,$BF,$AA,$AA,$AA ;
 $CA02 DEFB $B5,$55,$55,$55,$5F,$E0,$7F,$55,$55 ;
 $CA0B DEFB $56,$AA,$AA,$AA,$F0,$00,$01,$EA,$AA ;
 $CA14 DEFB $B5,$55,$55,$57,$00,$00,$00,$1D,$55 ;
 $CA1D DEFB $56,$AA,$AA,$AC,$00,$00,$00,$03,$AA ;
 $CA26 DEFB $B5,$55,$55,$58,$00,$00,$00,$00,$D5 ;
 $CA2F DEFB $52,$AA,$AA,$E0,$00,$00,$00,$00,$3A ;
 $CA38 DEFB $AB,$55,$55,$80,$00,$00,$00,$00,$3F ;
 $CA41 DEFB $5A,$AA,$AA,$00,$00,$00,$00,$00,$7F ;
 $CA4A DEFB $AB,$55,$54,$00,$00,$00,$00,$00,$7F ;
 $CA53 DEFB $5A,$AA,$A8,$00,$00,$00,$00,$00,$FF ;
 $CA5C DEFB $AB,$55,$50,$00,$00,$00,$00,$00,$FF ;
 $CA65 DEFB $5A,$AA,$E0,$00,$00,$00,$00,$FF,$F5 ;
 $CA6E DEFB $AB,$55,$40,$00,$00,$00,$00,$FE,$EA ;
 $CA77 DEFB $5A,$AA,$80,$00,$00,$00,$00,$FE,$D5 ;
 $CA80 DEFB $AB,$55,$00,$00,$00,$00,$00,$FC,$A8 ;
 $CA89 DEFB $5A,$AB,$00,$00,$00,$00,$00,$F8,$D0 ;
 $CA92 DEFB $AB,$56,$00,$00,$00,$00,$00,$F0,$A0 ;
 $CA9B DEFB $5A,$AC,$00,$00,$00,$00,$00,$E0,$40 ;
 $CAA4 DEFB $AB,$58,$00,$00,$00,$00,$04,$C0,$80 ;
 $CAAD DEFB $59,$B0,$00,$00,$00,$00,$FB,$EA,$FF ;
 $CAB6 DEFB $AD,$50,$00,$00,$00,$00,$FB,$D4,$FF ;
 $CABF DEFB $55,$A0,$00,$00,$00,$00,$F6,$A8,$FF ;
 $CAC8 DEFB $AD,$40,$00,$00,$00,$00,$EC,$C0,$FF ;
 $CAD1 DEFB $55,$80,$00,$00,$00,$00,$DC,$A0,$FF ;
 $CADA DEFB $AD,$00,$00,$00,$00,$00,$D8,$40,$FF ;
 $CAE3 DEFB $5E,$00,$00,$00,$00,$00,$B0,$80,$03 ;
 $CAEC DEFB $E2,$00,$00,$00,$00,$00,$60,$00,$00 ;
 $CAF5 DEFB $04,$00,$00,$00,$00,$03,$7E,$FE,$00 ;
 $CAFE DEFB $08,$00,$00,$00,$00,$0C,$FC,$FC,$00 ;
 $CB07 DEFB $10,$00,$00,$00,$00,$13,$F4,$F0,$00 ;
 $CB10 DEFB $10,$00,$00,$00,$00,$2F,$E8,$E0,$00 ;
 $CB19 DEFB $20,$00,$00,$00,$00,$5F,$D0,$C0,$00 ;
 $CB22 DEFB $40,$00,$00,$00,$00,$BF,$A0,$80,$00 ;
 $CB2B DEFB $80,$00,$00,$00,$01,$7F,$C0,$80,$00 ;
 $CB34 DEFB $80,$00,$00,$00,$06,$FF,$80,$00,$00 ;
 $CB3D DEFB $00,$00,$00,$00,$1D,$D5,$F8,$00,$00 ;
 $CB46 DEFB $00,$00,$00,$00,$37,$AA,$E0,$00,$00 ;
 $CB4F DEFB $00,$00,$00,$00,$7F,$40,$80,$00,$00 ;
 $CB58 DEFB $00,$00,$00,$01,$FF,$80,$80,$00,$00 ;
 $CB61 DEFB $00,$00,$00,$03,$1B,$40,$00,$00,$00 ;
 $CB6A DEFB $00,$00,$00,$04,$01,$A0,$00,$00,$00 ;
 $CB73 DEFB $00,$00,$00,$08,$00,$F4,$00,$00,$00 ;
 $CB7C DEFB $00,$00,$00,$30,$00,$5A,$00,$00,$00 ;
 $CB85 DEFB $00,$00,$00,$40,$00,$77,$00,$00,$00 ;
 $CB8E DEFB $00,$00,$00,$80,$00,$23,$00,$00,$00 ;
 $CB97 DEFB $00,$00,$03,$00,$00,$21,$00,$00,$00 ;
 $CBA0 DEFB $00,$00,$04,$00,$00,$10,$00,$00,$00 ;
 $CBA9 DEFB $00,$00,$08,$00,$00,$00,$80,$00,$00 ;
 $CBB2 DEFB $00,$00,$10,$00,$00,$00,$C0,$00,$00 ;
 $CBBB DEFB $00,$00,$60,$00,$01,$FF,$00,$FF,$FF ;
 $CBC4 DEFB $00,$01,$80,$7F,$FE,$AA,$55,$AA,$AA ; }
 $CBCD DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38 ; {Attributes.
 $CBD6 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $CBDF DEFB $38,$38,$38,$38,$38,$38,$38,$07,$10 ;
 $CBE8 DEFB $38,$38,$38,$38,$38,$38,$07,$10,$1A ;
 $CBF1 DEFB $38,$38,$38,$38,$38,$38,$10,$1A,$1A ;
 $CBFA DEFB $38,$38,$38,$38,$38,$10,$1A,$1A,$18 ;
 $CC03 DEFB $38,$38,$38,$38,$38,$38,$1F,$18,$18 ; }

; Girl 2 Frame 5
;
; #PUSHS
; #UDGTABLE
; {
; #UDGARRAY$0F,scale=$04,step=$0F($CC0C-$CF45-$01-$78)@$CF54-$CFBD(girl-2-frame-5)
; }
; UDGTABLE#
; #POPS
@label=Girl2_Frame5
b$CC0C DEFB $AA,$AA,$AA,$AA,$AA,$D5,$55,$00,$AA,$AB,$6A,$AA,$AA,$AA,$D5 ; {Pixels.
 $CC1B DEFB $5B,$55,$55,$55,$55,$5A,$AD,$01,$35,$55,$55,$55,$55,$56,$AA ;
 $CC2A DEFB $AA,$AA,$AA,$AA,$AA,$D5,$54,$01,$2A,$AB,$2A,$AA,$AA,$AA,$D5 ;
 $CC39 DEFB $5B,$55,$55,$55,$55,$5A,$AC,$01,$55,$55,$B5,$55,$55,$56,$AA ;
 $CC48 DEFB $AA,$BF,$AA,$AA,$AA,$D5,$54,$01,$6A,$AA,$AA,$AA,$AA,$AA,$D5 ;
 $CC57 DEFB $5F,$E0,$7F,$55,$55,$5A,$AA,$01,$55,$55,$B5,$55,$55,$56,$AA ;
 $CC66 DEFB $F0,$00,$01,$EA,$AA,$D5,$56,$02,$6A,$AA,$AA,$AA,$AA,$AA,$D5 ;
 $CC75 DEFB $00,$00,$00,$1D,$55,$5A,$AA,$02,$55,$55,$B5,$7D,$55,$56,$AA ;
 $CC84 DEFB $00,$00,$00,$03,$AA,$D5,$56,$02,$6A,$AA,$AB,$FF,$AA,$AA,$D5 ;
 $CC93 DEFB $00,$00,$00,$00,$D5,$5A,$AB,$02,$55,$55,$BD,$39,$75,$56,$6A ;
 $CCA2 DEFB $00,$00,$00,$00,$3A,$D5,$55,$02,$6A,$AA,$E0,$84,$1A,$AB,$55 ;
 $CCB1 DEFB $00,$00,$00,$00,$0F,$5A,$AB,$02,$55,$55,$80,$30,$07,$55,$6A ;
 $CCC0 DEFB $00,$00,$00,$00,$01,$D5,$55,$82,$2A,$AB,$00,$00,$01,$AB,$55 ;
 $CCCF DEFB $00,$00,$00,$00,$00,$3A,$AA,$82,$35,$56,$00,$00,$00,$55,$6A ;
 $CCDE DEFB $00,$00,$00,$00,$00,$07,$55,$82,$2A,$AC,$00,$00,$00,$3B,$55 ;
 $CCED DEFB $00,$00,$00,$00,$00,$00,$EA,$81,$35,$58,$00,$00,$00,$0D,$6A ;
 $CCFC DEFB $00,$00,$00,$00,$00,$00,$3D,$81,$2A,$A0,$00,$00,$00,$07,$55 ;
 $CD0B DEFB $00,$00,$00,$00,$00,$00,$03,$C1,$15,$C0,$00,$00,$00,$01,$EA ;
 $CD1A DEFB $00,$00,$00,$00,$00,$00,$00,$41,$FE,$00,$00,$00,$00,$00,$75 ;
 $CD29 DEFB $00,$00,$00,$00,$00,$00,$00,$41,$00,$00,$00,$00,$00,$00,$1A ;
 $CD38 DEFB $00,$00,$00,$00,$00,$00,$00,$40,$80,$00,$00,$00,$00,$00,$07 ;
 $CD47 DEFB $00,$00,$00,$00,$00,$00,$00,$40,$80,$00,$00,$00,$00,$00,$00 ;
 $CD56 DEFB $00,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00 ;
 $CD65 DEFB $00,$00,$02,$00,$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00 ;
 $CD74 DEFB $00,$00,$04,$00,$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00 ;
 $CD83 DEFB $00,$00,$04,$00,$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00 ;
 $CD92 DEFB $00,$00,$08,$00,$00,$00,$00,$20,$10,$00,$00,$00,$00,$00,$00 ;
 $CDA1 DEFB $00,$00,$10,$00,$00,$00,$00,$20,$10,$00,$00,$00,$00,$00,$00 ;
 $CDB0 DEFB $00,$00,$20,$00,$00,$00,$00,$20,$10,$00,$80,$00,$00,$00,$00 ;
 $CDBF DEFB $00,$00,$20,$00,$00,$00,$00,$20,$08,$01,$00,$00,$00,$00,$00 ;
 $CDCE DEFB $00,$00,$40,$00,$00,$00,$00,$20,$08,$02,$02,$00,$00,$00,$00 ;
 $CDDD DEFB $00,$00,$80,$00,$00,$00,$00,$10,$04,$04,$05,$D0,$00,$00,$00 ;
 $CDEC DEFB $00,$03,$00,$00,$00,$00,$00,$10,$04,$08,$0B,$E8,$00,$00,$10 ;
 $CDFB DEFB $00,$0E,$00,$00,$00,$00,$00,$10,$02,$08,$0B,$68,$00,$00,$10 ;
 $CE0A DEFB $00,$18,$00,$00,$18,$00,$00,$10,$02,$08,$09,$D0,$00,$00,$27 ;
 $CE19 DEFB $00,$38,$00,$00,$3C,$00,$00,$10,$01,$10,$00,$00,$00,$00,$38 ;
 $CE28 DEFB $00,$70,$00,$00,$18,$00,$00,$10,$01,$10,$02,$C0,$00,$00,$C0 ;
 $CE37 DEFB $00,$F8,$00,$00,$00,$00,$00,$08,$00,$88,$00,$00,$00,$03,$00 ;
 $CE46 DEFB $01,$F0,$00,$00,$00,$00,$00,$08,$00,$88,$00,$00,$00,$1C,$00 ;
 $CE55 DEFB $07,$E0,$00,$00,$00,$00,$00,$08,$00,$48,$00,$00,$00,$E0,$00 ;
 $CE64 DEFB $1F,$C0,$00,$00,$00,$00,$00,$08,$00,$44,$00,$00,$07,$00,$00 ;
 $CE73 DEFB $3F,$E0,$00,$00,$00,$00,$00,$04,$00,$24,$00,$00,$78,$00,$00 ;
 $CE82 DEFB $7F,$E0,$00,$00,$00,$00,$00,$04,$00,$23,$00,$07,$80,$00,$00 ;
 $CE91 DEFB $FF,$C0,$00,$00,$00,$00,$00,$04,$00,$10,$C0,$F8,$00,$00,$00 ;
 $CEA0 DEFB $1B,$E0,$00,$00,$00,$00,$00,$02,$00,$08,$1F,$00,$00,$00,$00 ;
 $CEAF DEFB $01,$C0,$00,$00,$00,$00,$00,$02,$00,$07,$E0,$00,$00,$00,$00 ;
 $CEBE DEFB $00,$E0,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$00 ;
 $CECD DEFB $00,$60,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00 ;
 $CEDC DEFB $00,$40,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00 ;
 $CEEB DEFB $00,$20,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00 ;
 $CEFA DEFB $00,$20,$00,$00,$00,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00 ;
 $CF09 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00 ;
 $CF18 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$00,$00,$00,$00,$00 ;
 $CF27 DEFB $00,$00,$00,$00,$00,$1F,$FE,$00,$20,$00,$00,$00,$00,$00,$00 ;
 $CF36 DEFB $01,$FF,$FF,$FF,$FF,$F5,$55,$C0,$10,$00,$00,$00,$00,$00,$1F ;
 $CF45 DEFB $FE,$AA,$AA,$AA,$AA,$AA,$AA,$BF,$0C,$00,$00,$00,$00,$0F,$EA ; }
 $CF54 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ; {Attributes.
 $CF63 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$3A,$38,$38,$38 ;
 $CF72 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $CF81 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$3A,$38,$38,$38 ;
 $CF90 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$3A,$3A,$38,$38,$38 ;
 $CF9F DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $CFAE DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ; }

; Girl 3 Frame 1
;
; #PUSHS
; #UDGTABLE
; {
; #UDGARRAY$20,scale=$04,step=$20($CFBD-$DA9D-$01-$100)@$DABD-$DC1C(girl-3-frame-1)
; }
; UDGTABLE#
; #POPS
@label=Girl3_Frame1
b$CFBD DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; {Pixels.
 $CFDD DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $CFFD DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $D01D DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $D03D DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $D05D DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $D07D DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $D09D DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$E0,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $D0BD DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$CD,$DE,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $D0DD DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$A7,$DB,$C0,$00,$00,$00,$00,$00,$00,$00 ;
 $D0FD DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1E,$53,$FF,$F0,$00,$00,$00,$00,$00,$00,$00 ;
 $D11D DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$29,$FB,$FC,$00,$00,$00,$00,$00,$00,$00 ;
 $D13D DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3E,$94,$FF,$FE,$00,$00,$00,$00,$00,$00,$00 ;
 $D15D DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1D,$CA,$2B,$BB,$E0,$00,$00,$00,$00,$00,$00 ;
 $D17D DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$6F,$00,$00,$00,$00,$00,$00,$01,$FF,$F0,$0F,$E5,$3F,$FF,$B8,$FE,$00,$00,$00,$00,$00 ;
 $D19D DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$EF,$00,$00,$00,$0F,$FF,$C0,$7E,$AA,$AF,$CE,$D2,$9A,$FF,$D7,$55,$F8,$00,$00,$00,$00 ;
 $D1BD DEFB $00,$07,$F0,$00,$00,$00,$07,$F8,$00,$01,$FF,$09,$FF,$00,$FF,$FA,$AA,$FF,$D5,$55,$55,$57,$79,$4F,$FF,$EA,$DA,$AF,$F0,$00,$00,$00 ;
 $D1DD DEFB $03,$FD,$5F,$E0,$00,$01,$FD,$57,$FC,$16,$AB,$09,$55,$FF,$D5,$55,$55,$5A,$AA,$AA,$AF,$E7,$BC,$A7,$FF,$F5,$55,$55,$7F,$C0,$00,$00 ;
 $D1FD DEFB $FE,$AA,$AA,$BF,$F0,$7E,$AA,$AA,$AB,$ED,$55,$04,$AA,$AD,$AA,$AA,$AA,$AB,$55,$55,$50,$06,$BE,$53,$FF,$FA,$DA,$AF,$D5,$78,$00,$00 ;
 $D21D DEFB $AD,$55,$55,$55,$5F,$D5,$55,$55,$55,$6A,$AA,$84,$D5,$55,$55,$55,$55,$5A,$AA,$AA,$B0,$1F,$DF,$29,$FF,$FD,$A5,$5A,$AA,$AE,$00,$00 ;
 $D23D DEFB $6A,$AA,$AA,$AA,$AD,$AA,$AA,$AA,$AA,$AD,$55,$82,$AA,$AC,$AA,$AA,$AA,$AB,$55,$55,$54,$00,$AF,$94,$FF,$FA,$AA,$F5,$55,$55,$80,$00 ;
 $D25D DEFB $AD,$55,$55,$55,$55,$55,$55,$55,$55,$6A,$AA,$C2,$55,$56,$D5,$55,$55,$59,$AA,$AA,$AA,$01,$7F,$8A,$6B,$AD,$B5,$AA,$AA,$AA,$E0,$00 ;
 $D27D DEFB $6A,$AA,$AA,$AA,$AD,$AA,$AA,$AA,$AA,$AD,$55,$41,$6A,$AA,$AA,$AA,$AA,$AD,$55,$55,$50,$00,$DF,$E5,$3F,$FE,$AF,$55,$7F,$55,$50,$00 ;
 $D29D DEFB $AD,$55,$55,$55,$55,$55,$55,$55,$55,$6A,$AA,$A1,$55,$56,$D5,$55,$55,$55,$AA,$AA,$B0,$01,$5F,$F2,$9F,$FC,$FA,$AB,$C0,$EA,$A8,$00 ;
 $D2BD DEFB $6A,$AA,$AA,$AA,$AD,$AA,$AA,$AA,$AA,$AD,$55,$67,$EA,$AA,$AA,$AA,$AA,$AD,$55,$55,$70,$02,$B7,$F9,$4F,$FF,$B5,$56,$3F,$1D,$54,$00 ;
 $D2DD DEFB $AD,$55,$55,$55,$55,$55,$55,$55,$55,$6A,$AA,$D7,$55,$56,$D5,$55,$55,$55,$AA,$AA,$B0,$05,$7F,$FC,$A7,$FD,$2A,$B9,$EA,$E6,$AA,$00 ;
 $D2FD DEFB $6A,$AA,$AA,$AA,$AD,$AA,$AA,$AA,$AA,$AD,$55,$97,$EA,$AA,$6A,$AA,$AA,$AD,$55,$55,$F0,$02,$BF,$FE,$53,$FF,$55,$67,$FF,$F9,$56,$00 ;
 $D31D DEFB $A5,$55,$55,$55,$59,$55,$55,$55,$55,$6A,$AB,$1A,$35,$55,$55,$55,$55,$55,$AA,$AB,$00,$05,$5F,$EB,$29,$FD,$6A,$DA,$AA,$AE,$AB,$00 ;
 $D33D DEFB $56,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AD,$56,$9E,$6A,$AB,$6A,$AA,$AA,$AD,$55,$54,$00,$02,$BF,$FF,$94,$FF,$D5,$7F,$FF,$FF,$55,$00 ;
 $D35D DEFB $B5,$55,$55,$55,$5B,$55,$55,$55,$55,$6A,$AD,$14,$55,$55,$55,$55,$55,$55,$AA,$AC,$00,$01,$5F,$FF,$CA,$7D,$AA,$AA,$AA,$AA,$AB,$00 ;
 $D37D DEFB $56,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$CD,$55,$1C,$6A,$AB,$6A,$AA,$AA,$AC,$D5,$54,$00,$00,$BF,$FF,$E5,$3F,$56,$FF,$FF,$FF,$B5,$80 ;
 $D39D DEFB $B5,$55,$55,$55,$5B,$55,$55,$55,$55,$5A,$AD,$18,$D5,$55,$55,$55,$55,$56,$AA,$AB,$00,$00,$7F,$FA,$F2,$9E,$AD,$AA,$AA,$AA,$DA,$80 ;
 $D3BD DEFB $56,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$D5,$55,$00,$AA,$AB,$6A,$AA,$AA,$AA,$D5,$55,$80,$00,$7F,$FF,$A9,$4D,$55,$FF,$FF,$FF,$D5,$80 ;
 $D3DD DEFB $B5,$55,$55,$55,$5B,$55,$55,$55,$55,$5A,$AD,$01,$55,$55,$55,$55,$55,$56,$AA,$AA,$C0,$00,$77,$FF,$F8,$AE,$AA,$AA,$AA,$AA,$DA,$80 ;
 $D3FD DEFB $56,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$D5,$54,$01,$AA,$AB,$2A,$AA,$AA,$AA,$D5,$55,$40,$00,$7F,$AF,$BE,$5D,$5B,$FF,$FF,$FF,$ED,$40 ;
 $D41D DEFB $B5,$55,$55,$55,$5B,$55,$55,$55,$55,$5A,$AC,$01,$55,$55,$B5,$55,$55,$56,$AA,$AA,$A0,$00,$7D,$FF,$ED,$3A,$B6,$AA,$AA,$AA,$AA,$C0 ;
 $D43D DEFB $56,$AA,$AA,$AA,$AA,$BF,$AA,$AA,$AA,$D5,$54,$01,$AA,$AA,$AA,$AA,$AA,$AA,$D5,$55,$60,$00,$FF,$BA,$FF,$35,$6F,$FF,$FF,$FF,$ED,$40 ;
 $D45D DEFB $B5,$55,$55,$55,$5F,$FF,$FF,$55,$55,$5A,$AA,$01,$55,$55,$B5,$55,$55,$56,$AA,$AA,$A4,$01,$7F,$FF,$AF,$FA,$AA,$AA,$AA,$AA,$AA,$C0 ;
 $D47D DEFB $56,$AA,$AA,$AA,$FF,$FF,$FF,$EA,$AA,$D5,$56,$02,$AA,$AA,$AA,$AA,$AA,$AA,$D5,$55,$63,$0A,$DF,$FF,$FF,$75,$5F,$FF,$FF,$FF,$F5,$60 ;
 $D49D DEFB $B5,$55,$55,$5F,$FF,$FF,$FF,$FF,$55,$5A,$AA,$03,$55,$55,$B5,$7D,$55,$56,$AA,$AA,$A1,$F5,$5F,$FF,$FB,$EA,$DA,$AA,$AA,$AA,$B6,$A0 ;
 $D4BD DEFB $56,$AA,$AA,$FF,$7C,$3D,$FF,$F7,$AA,$D5,$56,$02,$AA,$AA,$AB,$FE,$AA,$AA,$D5,$55,$60,$AA,$FF,$FF,$FD,$55,$BF,$FF,$FF,$FF,$F5,$60 ;
 $D4DD DEFB $B5,$55,$55,$FF,$BF,$DE,$FF,$EF,$D5,$5A,$AB,$03,$55,$55,$BF,$FF,$D5,$56,$6A,$AA,$A0,$55,$57,$FF,$FF,$EA,$AA,$AA,$AA,$AA,$B6,$A0 ;
 $D4FD DEFB $52,$AA,$AB,$F7,$CF,$FF,$7F,$1F,$FA,$D5,$55,$02,$AA,$AA,$FF,$FF,$EA,$AB,$55,$55,$60,$0A,$FF,$FF,$BF,$D5,$BF,$FF,$FF,$FF,$FB,$50 ;
 $D51D DEFB $AB,$55,$5F,$F7,$F3,$F7,$BC,$FF,$F7,$DA,$AB,$03,$55,$55,$FF,$FF,$FD,$55,$6A,$AA,$C0,$05,$7F,$EF,$FF,$AB,$6A,$AA,$AA,$AA,$AA,$B0 ;
 $D53D DEFB $5A,$AA,$BF,$EF,$FF,$FF,$BB,$FF,$F3,$FD,$55,$82,$AB,$FF,$FF,$FF,$FE,$AB,$55,$55,$40,$02,$FF,$FF,$FF,$D5,$7F,$FF,$FF,$FF,$FB,$50 ;
 $D55D DEFB $AB,$55,$7F,$DF,$FF,$FF,$77,$FF,$E3,$FF,$FE,$83,$FE,$07,$FF,$FF,$FB,$55,$6A,$AA,$80,$05,$7F,$FF,$BD,$AB,$6A,$AA,$AA,$AA,$AA,$B0 ;
 $D57D DEFB $5A,$AA,$FF,$BF,$FF,$FE,$EF,$FF,$C7,$FF,$00,$82,$00,$1F,$FF,$FF,$F0,$EB,$5F,$55,$80,$02,$DF,$FF,$FF,$56,$FF,$FF,$FF,$FF,$FB,$50 ;
 $D59D DEFB $AB,$55,$FF,$BF,$FF,$FE,$EF,$FF,$8F,$FA,$00,$81,$00,$3F,$FF,$FF,$E0,$3F,$E1,$EB,$00,$01,$FF,$FA,$FF,$AA,$AA,$AA,$AA,$AA,$AA,$B0 ;
 $D5BD DEFB $5A,$AB,$FF,$BF,$FF,$FF,$FF,$FF,$1F,$E5,$20,$81,$01,$00,$00,$00,$C0,$0C,$00,$1A,$00,$00,$F7,$FF,$FF,$56,$FF,$FF,$FF,$FF,$FB,$50 ;
 $D5DD DEFB $AB,$57,$FE,$7F,$FF,$FF,$FF,$FE,$3F,$CA,$40,$41,$FF,$00,$00,$00,$C0,$07,$00,$06,$00,$01,$FF,$FF,$FE,$AD,$AA,$AA,$AA,$AA,$AD,$A8 ;
 $D5FD DEFB $5A,$AF,$FF,$FF,$FF,$FF,$FF,$FE,$7F,$94,$8C,$41,$FF,$00,$02,$AA,$80,$00,$C0,$1C,$00,$02,$FF,$EF,$FB,$55,$FF,$FF,$FF,$FF,$FD,$58 ;
 $D61D DEFB $AB,$5F,$FF,$FF,$FF,$FF,$FF,$FC,$7F,$29,$3C,$41,$FF,$00,$15,$55,$80,$00,$38,$30,$00,$05,$DF,$FF,$FE,$AD,$AA,$AA,$AA,$AA,$AD,$A8 ;
 $D63D DEFB $5A,$BF,$FF,$FF,$FF,$FF,$FF,$F8,$FF,$2A,$78,$C0,$FF,$00,$2F,$FF,$80,$00,$07,$C0,$00,$07,$FF,$BF,$ED,$5B,$FF,$FF,$FF,$FF,$FD,$58 ;
 $D65D DEFB $AB,$7F,$FF,$FF,$FF,$FF,$FF,$F9,$FF,$54,$F9,$C0,$FF,$01,$5F,$FF,$00,$00,$00,$00,$00,$05,$FF,$FE,$EE,$AA,$AA,$AA,$AA,$AA,$AD,$A8 ;
 $D67D DEFB $5A,$BF,$FF,$FF,$FF,$FF,$FF,$F1,$FF,$54,$F1,$C0,$7F,$02,$FF,$FF,$00,$00,$00,$00,$00,$07,$FF,$FF,$FD,$5B,$FF,$FF,$FF,$FF,$FD,$58 ;
 $D69D DEFB $AB,$7F,$FF,$FF,$FF,$FF,$FF,$F1,$FF,$D4,$F3,$E0,$7F,$37,$FF,$FF,$00,$00,$00,$00,$00,$0F,$FF,$FB,$FE,$AA,$AA,$AA,$AA,$AA,$AD,$A8 ;
 $D6BD DEFB $59,$BF,$FF,$FF,$DF,$FF,$FF,$F1,$FF,$74,$E3,$E0,$3F,$55,$55,$54,$00,$00,$00,$00,$00,$0F,$5F,$FE,$FD,$57,$FF,$FF,$FF,$FF,$FD,$58 ;
 $D6DD DEFB $AD,$5F,$FF,$FF,$DF,$FB,$FF,$F1,$FF,$DC,$D7,$E0,$3F,$AA,$AA,$AA,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FA,$B6,$AA,$AA,$AA,$AA,$AD,$A8 ;
 $D6FD DEFB $55,$AF,$FF,$FF,$DF,$F7,$F8,$F1,$FF,$F6,$CF,$E0,$1F,$55,$55,$55,$00,$00,$00,$00,$00,$0F,$7F,$AF,$ED,$57,$FF,$FF,$FF,$FF,$FD,$58 ;
 $D71D DEFB $AD,$47,$FF,$FF,$DF,$EF,$E7,$F1,$FF,$FC,$FF,$E0,$1F,$AA,$AA,$AB,$00,$00,$00,$00,$00,$0F,$FD,$FB,$EA,$B6,$AA,$AA,$AA,$AA,$AD,$A8 ;
 $D73D DEFB $55,$83,$FF,$FF,$BF,$DF,$DF,$F1,$FF,$FF,$FF,$E0,$1F,$5F,$FF,$FF,$00,$00,$00,$00,$00,$0E,$7F,$EF,$ED,$57,$FF,$FF,$FF,$FF,$FE,$D4 ;
 $D75D DEFB $AD,$00,$FF,$FF,$BF,$DF,$BF,$F1,$FF,$FF,$FF,$E0,$0F,$BF,$FF,$FF,$80,$00,$00,$00,$00,$1E,$FF,$EF,$BA,$AA,$AA,$AA,$AA,$AA,$AA,$AC ;
 $D77D DEFB $5E,$00,$7F,$3F,$BF,$BF,$7F,$E3,$FF,$FF,$FF,$E0,$0E,$7F,$FF,$FF,$80,$00,$00,$00,$00,$1F,$DF,$FF,$F5,$6F,$FF,$FF,$FF,$FF,$FE,$D4 ;
 $D79D DEFB $E2,$00,$FF,$DF,$BF,$7F,$7F,$E3,$FF,$FF,$FF,$F0,$05,$FF,$FF,$FF,$80,$00,$00,$00,$00,$1F,$FF,$FB,$FA,$AA,$AA,$AA,$AA,$AA,$AA,$AC ;
 $D7BD DEFB $04,$00,$7F,$EF,$BF,$7E,$FF,$EB,$00,$AA,$AA,$A0,$07,$07,$FF,$FF,$C0,$00,$10,$00,$00,$1F,$DF,$FF,$F5,$6F,$FF,$FF,$FF,$FF,$FE,$D4 ;
 $D7DD DEFB $08,$00,$3F,$EF,$76,$FE,$FF,$E7,$05,$55,$55,$50,$03,$0F,$FF,$FF,$C0,$00,$10,$00,$78,$1F,$DF,$FF,$FA,$AA,$AA,$AA,$AA,$AA,$AA,$AC ;
 $D7FD DEFB $10,$00,$1F,$F7,$6E,$FE,$FF,$E7,$AA,$EE,$EA,$B0,$03,$1F,$FF,$FF,$C0,$00,$27,$00,$06,$1F,$FF,$EF,$F5,$5F,$FF,$FF,$FF,$FF,$FE,$D4 ;
 $D81D DEFB $10,$00,$0F,$F7,$6E,$FF,$FF,$EB,$55,$FF,$FF,$F0,$01,$3F,$FF,$FF,$E0,$00,$38,$00,$01,$1F,$FD,$EF,$EA,$DA,$AA,$AA,$AA,$AA,$AA,$AC ;
 $D83D DEFB $20,$00,$07,$F7,$6E,$FF,$FF,$E3,$AF,$FF,$FF,$F0,$01,$7F,$FF,$C0,$E0,$00,$C0,$00,$00,$BF,$7D,$FE,$F5,$5F,$FF,$FF,$FF,$FF,$FE,$D4 ;
 $D85D DEFB $40,$00,$01,$FF,$6F,$FF,$FF,$E3,$FF,$FF,$FF,$F8,$00,$FF,$FC,$00,$F0,$03,$00,$00,$00,$7F,$FF,$FB,$EA,$DA,$AA,$AA,$AA,$AA,$AA,$AC ;
 $D87D DEFB $80,$00,$00,$FF,$6F,$FF,$FF,$E3,$07,$FF,$FF,$F8,$00,$FF,$E0,$00,$F8,$1C,$00,$00,$00,$3F,$7F,$FF,$F5,$5F,$FF,$FF,$FF,$FF,$FE,$D4 ;
 $D89D DEFB $80,$00,$00,$FF,$EF,$FF,$FF,$E3,$00,$3F,$FF,$F8,$00,$7F,$C0,$00,$FC,$E0,$00,$00,$00,$3F,$FF,$FA,$EA,$DA,$AA,$AA,$AA,$AA,$AA,$AC ;
 $D8BD DEFB $00,$00,$00,$3F,$DF,$EF,$FF,$E3,$FF,$4F,$FF,$F8,$00,$7F,$FF,$FF,$FF,$00,$00,$00,$00,$3F,$FE,$FF,$D5,$BF,$FF,$FF,$FF,$FF,$FE,$D4 ;
 $D8DD DEFB $00,$00,$00,$3F,$FF,$F3,$FF,$E3,$FF,$17,$FF,$FC,$00,$3F,$FF,$FF,$F8,$00,$00,$00,$00,$1F,$FE,$FF,$EA,$AA,$AA,$AA,$AA,$AA,$AB,$6A ;
 $D8FD DEFB $00,$00,$00,$1F,$FF,$7D,$FF,$E3,$FF,$2B,$FF,$FC,$00,$3F,$FF,$FF,$80,$00,$00,$00,$00,$1F,$FF,$FF,$D5,$BF,$FF,$FF,$FF,$FF,$FF,$56 ;
 $D91D DEFB $00,$00,$00,$0F,$DF,$BE,$FF,$F1,$FF,$15,$7F,$FC,$00,$1F,$FF,$F8,$00,$00,$00,$00,$00,$1B,$DF,$FF,$EA,$AA,$AA,$AA,$AA,$AA,$AB,$6A ;
 $D93D DEFB $00,$00,$00,$03,$E3,$CF,$7F,$F1,$FF,$0A,$AF,$FE,$00,$0F,$FF,$00,$00,$00,$00,$00,$00,$1F,$FF,$BB,$D5,$BF,$FF,$FF,$FF,$FF,$FF,$56 ;
 $D95D DEFB $00,$00,$00,$07,$FC,$F7,$7F,$F1,$FF,$01,$57,$FE,$00,$07,$E0,$00,$00,$00,$00,$00,$00,$1F,$FD,$BF,$EA,$AA,$AA,$AA,$AA,$AA,$AB,$6A ;
 $D97D DEFB $00,$00,$00,$0B,$FF,$7F,$BF,$F1,$FF,$00,$0B,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$F7,$FF,$D5,$BF,$FF,$FF,$FF,$FF,$FF,$56 ;
 $D99D DEFB $00,$00,$00,$31,$FF,$9F,$DF,$F1,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3B,$FF,$FE,$EA,$AA,$AA,$AA,$AA,$AA,$AB,$6A ;
 $D9BD DEFB $00,$00,$00,$41,$FF,$FF,$FF,$F8,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$7F,$FF,$D5,$7F,$FF,$FF,$FF,$FF,$FF,$56 ;
 $D9DD DEFB $00,$00,$00,$81,$FF,$FF,$FF,$F8,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$7F,$FF,$AB,$6A,$AA,$AA,$AA,$AA,$AB,$6A ;
 $D9FD DEFB $00,$00,$03,$00,$FF,$FF,$FF,$F8,$FF,$FF,$FF,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$DF,$FF,$BB,$D5,$7F,$FF,$FF,$FF,$FF,$FF,$56 ;
 $DA1D DEFB $00,$00,$04,$00,$FF,$FF,$FF,$FC,$7F,$FF,$FF,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$07,$BF,$FB,$BB,$AB,$6A,$AA,$AA,$AA,$AA,$AB,$6A ;
 $DA3D DEFB $00,$00,$08,$00,$7F,$FF,$FF,$FC,$7F,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$7D,$5D,$EF,$FF,$D5,$FF,$FF,$FF,$FF,$FF,$FF,$56 ;
 $DA5D DEFB $00,$00,$10,$00,$7F,$FF,$FF,$FC,$7F,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$1F,$AA,$AF,$7F,$FD,$AA,$AA,$AA,$AA,$AA,$AA,$AB,$6A ;
 $DA7D DEFB $00,$00,$60,$00,$7F,$FF,$FF,$FF,$FF,$F5,$55,$FF,$F0,$00,$00,$00,$00,$00,$1F,$F5,$55,$57,$FE,$FF,$D7,$FF,$FF,$FF,$FF,$FF,$FF,$56 ;
 $DA9D DEFB $00,$01,$80,$7F,$FE,$AA,$AA,$AA,$AA,$AA,$AA,$BF,$FC,$00,$00,$00,$00,$0F,$EA,$AA,$AA,$AB,$FF,$FF,$AA,$AA,$AA,$AA,$AA,$AA,$AB,$6A ; }
 $DABD DEFB $70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70 ; {Attributes.
 $DADD DEFB $70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$77,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$70,$70,$70,$70,$70,$70 ;
 $DAFD DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$78,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$70,$68,$70,$38,$38,$38,$38,$70,$70,$70 ;
 $DB1D DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$3A,$38,$70,$70,$68,$38,$38,$38,$38,$38,$38,$70 ;
 $DB3D DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$70,$70,$70,$38,$38,$38,$38,$38,$38,$70 ;
 $DB5D DEFB $38,$38,$38,$08,$08,$08,$48,$08,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$70,$70,$70,$38,$38,$38,$38,$38,$38,$70 ;
 $DB7D DEFB $38,$38,$08,$08,$08,$08,$48,$38,$38,$38,$38,$38,$38,$03,$03,$03,$38,$38,$38,$38,$38,$38,$70,$70,$70,$38,$38,$38,$38,$38,$38,$70 ;
 $DB9D DEFB $38,$38,$38,$08,$08,$08,$48,$38,$20,$38,$38,$38,$38,$04,$04,$04,$38,$38,$38,$38,$38,$38,$70,$70,$38,$38,$38,$38,$38,$38,$38,$70 ;
 $DBBD DEFB $38,$38,$38,$08,$48,$48,$48,$38,$04,$04,$04,$3C,$3C,$22,$02,$02,$38,$38,$38,$38,$38,$38,$70,$70,$38,$38,$38,$38,$38,$38,$38,$70 ;
 $DBDD DEFB $38,$38,$38,$38,$08,$08,$48,$38,$20,$02,$02,$3A,$38,$3A,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $DBFD DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ; }

; Girl 3 Frame 2
;
; #PUSHS
; #UDGTABLE
; {
; #UDGARRAY$09,scale=$04,step=$09($DC1D-$DDBD-$01-$48)@$DDCD-$DE02(girl-3-frame-2)
; }
; UDGTABLE#
; #POPS
@label=Girl3_Frame2
b$DC1D DEFB $AA,$D5,$56,$02,$AA,$AA,$AB,$FE,$AA ; {Pixels.
 $DC26 DEFB $D5,$5A,$AB,$03,$55,$55,$BF,$FF,$D5 ;
 $DC2F DEFB $FA,$D5,$55,$02,$AA,$AA,$FF,$FF,$EA ;
 $DC38 DEFB $F7,$5A,$AB,$03,$55,$55,$FF,$FF,$DD ;
 $DC41 DEFB $F3,$D5,$55,$82,$AB,$FF,$FF,$FF,$C6 ;
 $DC4A DEFB $E3,$FA,$FE,$83,$FC,$07,$FF,$FF,$83 ;
 $DC53 DEFB $C7,$FF,$00,$82,$00,$1F,$FF,$FF,$80 ;
 $DC5C DEFB $8F,$FA,$00,$81,$00,$7F,$FF,$FF,$00 ;
 $DC65 DEFB $1F,$E5,$20,$81,$01,$FF,$FF,$FE,$00 ;
 $DC6E DEFB $3F,$CA,$40,$41,$07,$FF,$FF,$FC,$00 ;
 $DC77 DEFB $7F,$94,$8C,$41,$1F,$FF,$FF,$F0,$00 ;
 $DC80 DEFB $7F,$29,$1C,$41,$FF,$FF,$FF,$C0,$00 ;
 $DC89 DEFB $FF,$2A,$38,$C0,$FF,$FF,$FF,$00,$00 ;
 $DC92 DEFB $FF,$54,$79,$C0,$FF,$FF,$F8,$00,$00 ;
 $DC9B DEFB $FF,$54,$F1,$C0,$7F,$FF,$E0,$00,$00 ;
 $DCA4 DEFB $FF,$D4,$F3,$E0,$7F,$F8,$00,$00,$00 ;
 $DCAD DEFB $FF,$74,$E3,$E0,$3F,$C7,$E0,$00,$00 ;
 $DCB6 DEFB $FF,$DC,$D7,$E0,$3F,$FF,$F8,$00,$00 ;
 $DCBF DEFB $FF,$F6,$CF,$E0,$1F,$FF,$FE,$00,$00 ;
 $DCC8 DEFB $FF,$FC,$FF,$E0,$1F,$FF,$FF,$00,$00 ;
 $DCD1 DEFB $FF,$FF,$FF,$E0,$1F,$FF,$FF,$80,$00 ;
 $DCDA DEFB $FF,$FF,$FF,$E0,$0F,$FF,$FF,$C0,$00 ;
 $DCE3 DEFB $FF,$FF,$FF,$E0,$0F,$FF,$FF,$E0,$00 ;
 $DCEC DEFB $FF,$FF,$FF,$F0,$07,$FF,$FF,$F0,$00 ;
 $DCF5 DEFB $FF,$FF,$FF,$F0,$07,$FF,$FF,$F8,$00 ;
 $DCFE DEFB $FF,$FF,$FF,$F0,$03,$FF,$FF,$F8,$00 ;
 $DD07 DEFB $FF,$FF,$FF,$F0,$03,$FF,$FF,$FC,$00 ;
 $DD10 DEFB $FF,$FF,$FF,$F0,$01,$FF,$FF,$FC,$00 ;
 $DD19 DEFB $FF,$FF,$FF,$F0,$01,$FF,$FF,$FE,$00 ;
 $DD22 DEFB $FF,$FF,$FF,$F8,$00,$FF,$FF,$FE,$00 ;
 $DD2B DEFB $FF,$FF,$FF,$F8,$00,$FF,$FF,$FF,$00 ;
 $DD34 DEFB $FF,$FF,$FF,$F8,$00,$7F,$FF,$FF,$00 ;
 $DD3D DEFB $FF,$FF,$FF,$F8,$00,$7F,$FF,$FF,$87 ;
 $DD46 DEFB $FF,$FF,$FF,$FC,$00,$3F,$FF,$FF,$F8 ;
 $DD4F DEFB $FF,$FF,$FF,$FC,$00,$3F,$FF,$FF,$80 ;
 $DD58 DEFB $FF,$FF,$FF,$FC,$00,$1F,$FF,$F8,$00 ;
 $DD61 DEFB $FF,$FF,$FF,$FE,$00,$0F,$FF,$00,$00 ;
 $DD6A DEFB $FF,$FF,$FF,$FE,$00,$07,$E0,$00,$00 ;
 $DD73 DEFB $FF,$FF,$FF,$FE,$00,$00,$00,$00,$00 ;
 $DD7C DEFB $FF,$FF,$FF,$FF,$00,$00,$00,$00,$00 ;
 $DD85 DEFB $FF,$FF,$FF,$FF,$00,$00,$00,$00,$00 ;
 $DD8E DEFB $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00 ;
 $DD97 DEFB $FF,$FF,$FF,$FF,$C0,$00,$00,$00,$00 ;
 $DDA0 DEFB $7F,$FF,$FF,$FF,$C0,$00,$00,$00,$00 ;
 $DDA9 DEFB $7F,$FF,$FF,$FF,$E0,$00,$00,$00,$00 ;
 $DDB2 DEFB $7F,$FF,$FF,$FF,$E0,$00,$00,$00,$00 ;
 $DDBB DEFB $FF,$F5,$55,$FF,$F0,$00,$00,$00,$00 ;
 $DDC4 DEFB $AA,$AA,$AA,$BF,$FC,$00,$00,$00,$00 ; }
 $DDCD DEFB $38,$38,$38,$38,$38,$39,$39,$39,$38 ; {Attributes.
 $DDD6 DEFB $39,$39,$39,$39,$39,$39,$39,$39,$38 ;
 $DDDF DEFB $39,$39,$39,$39,$39,$39,$39,$39,$38 ;
 $DDE8 DEFB $39,$39,$39,$39,$39,$39,$39,$39,$38 ;
 $DDF1 DEFB $39,$39,$39,$39,$38,$39,$39,$39,$38 ;
 $DDFA DEFB $39,$39,$39,$39,$39,$38,$38,$38,$38 ; }

; Girl 3 Frame 3
;
; #PUSHS
; #UDGTABLE
; {
; #UDGARRAY$08,scale=$04,step=$08($DE03-$DFBB-$01-$40)@$DFC3-$DFFA(girl-3-frame-3)
; }
; UDGTABLE#
; #POPS
@label=Girl3_Frame3
b$DE03 DEFB $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA ; {Pixels.
 $DE0B DEFB $55,$55,$55,$5B,$55,$55,$55,$55 ;
 $DE13 DEFB $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA ;
 $DE1B DEFB $55,$55,$55,$5B,$55,$55,$55,$55 ;
 $DE23 DEFB $AA,$AA,$AA,$AA,$BF,$AA,$AA,$AA ;
 $DE2B DEFB $55,$55,$55,$5F,$E0,$7F,$55,$55 ;
 $DE33 DEFB $AA,$AA,$AA,$F0,$00,$01,$EA,$AA ;
 $DE3B DEFB $55,$55,$57,$00,$00,$00,$1D,$55 ;
 $DE43 DEFB $AA,$AA,$AC,$00,$00,$00,$0F,$AA ;
 $DE4B DEFB $55,$55,$58,$00,$00,$00,$0E,$D5 ;
 $DE53 DEFB $AA,$AA,$E0,$00,$00,$00,$1E,$3A ;
 $DE5B DEFB $55,$55,$80,$00,$00,$00,$1C,$0F ;
 $DE63 DEFB $AA,$AA,$00,$00,$00,$00,$1C,$01 ;
 $DE6B DEFB $55,$54,$00,$00,$00,$00,$3C,$03 ;
 $DE73 DEFB $AA,$A8,$00,$00,$00,$00,$38,$07 ;
 $DE7B DEFB $55,$50,$00,$00,$00,$00,$78,$0F ;
 $DE83 DEFB $AA,$E0,$00,$00,$00,$00,$70,$1F ;
 $DE8B DEFB $55,$40,$00,$00,$00,$00,$70,$1F ;
 $DE93 DEFB $AA,$80,$00,$00,$00,$00,$F0,$1F ;
 $DE9B DEFB $55,$00,$00,$00,$00,$00,$E0,$3F ;
 $DEA3 DEFB $AB,$00,$00,$00,$00,$01,$E0,$3F ;
 $DEAB DEFB $56,$00,$00,$00,$00,$03,$C0,$3F ;
 $DEB3 DEFB $AC,$00,$00,$00,$00,$07,$C0,$3F ;
 $DEBB DEFB $58,$00,$00,$00,$00,$0F,$80,$7F ;
 $DEC3 DEFB $B0,$00,$00,$00,$00,$1F,$80,$7F ;
 $DECB DEFB $50,$00,$00,$00,$00,$3F,$00,$7F ;
 $DED3 DEFB $A0,$00,$00,$00,$00,$7F,$00,$7F ;
 $DEDB DEFB $40,$00,$00,$00,$00,$FE,$00,$FF ;
 $DEE3 DEFB $80,$00,$00,$00,$00,$FC,$00,$FF ;
 $DEEB DEFB $00,$00,$00,$00,$01,$F8,$00,$FF ;
 $DEF3 DEFB $00,$00,$00,$00,$03,$F8,$00,$FF ;
 $DEFB DEFB $00,$00,$00,$00,$07,$F0,$01,$FF ;
 $DF03 DEFB $00,$00,$00,$00,$0F,$E0,$01,$FF ;
 $DF0B DEFB $00,$00,$00,$00,$1F,$E0,$01,$FF ;
 $DF13 DEFB $00,$00,$00,$00,$7F,$C0,$01,$FF ;
 $DF1B DEFB $00,$00,$00,$00,$FF,$C0,$01,$FF ;
 $DF23 DEFB $00,$00,$00,$01,$FF,$C0,$01,$FF ;
 $DF2B DEFB $00,$00,$00,$03,$FF,$80,$01,$FF ;
 $DF33 DEFB $00,$00,$00,$07,$FF,$80,$01,$FF ;
 $DF3B DEFB $00,$00,$00,$0F,$FF,$80,$01,$FF ;
 $DF43 DEFB $00,$00,$00,$1F,$FF,$00,$01,$FF ;
 $DF4B DEFB $00,$00,$00,$3F,$FF,$00,$00,$FF ;
 $DF53 DEFB $00,$00,$00,$7F,$FF,$00,$00,$FF ;
 $DF5B DEFB $00,$00,$01,$FF,$FF,$00,$00,$FF ;
 $DF63 DEFB $00,$00,$03,$1B,$FF,$80,$00,$FF ;
 $DF6B DEFB $00,$00,$04,$00,$7F,$80,$00,$7F ;
 $DF73 DEFB $00,$00,$08,$00,$1F,$80,$00,$7F ;
 $DF7B DEFB $00,$00,$30,$00,$07,$C0,$00,$7F ;
 $DF83 DEFB $00,$00,$40,$00,$03,$C0,$00,$3F ;
 $DF8B DEFB $00,$00,$80,$00,$01,$E0,$00,$1F ;
 $DF93 DEFB $00,$03,$00,$00,$00,$F0,$00,$1F ;
 $DF9B DEFB $00,$04,$00,$00,$00,$78,$00,$1F ;
 $DFA3 DEFB $00,$08,$00,$00,$00,$3C,$00,$1F ;
 $DFAB DEFB $00,$10,$00,$00,$00,$1E,$00,$1F ;
 $DFB3 DEFB $00,$60,$00,$01,$FF,$FF,$FF,$FF ;
 $DFBB DEFB $01,$80,$7F,$FE,$AA,$AA,$AA,$AA ; }
 $DFC3 DEFB $38,$38,$38,$38,$38,$38,$38,$38 ; {Attributes.
 $DFCB DEFB $38,$38,$38,$38,$38,$38,$39,$38 ;
 $DFD3 DEFB $38,$38,$38,$38,$38,$39,$39,$39 ;
 $DFDB DEFB $38,$38,$38,$38,$39,$39,$39,$39 ;
 $DFE3 DEFB $38,$38,$38,$39,$39,$39,$38,$39 ;
 $DFEB DEFB $38,$38,$38,$39,$39,$39,$38,$39 ;
 $DFF3 DEFB $38,$38,$38,$38,$38,$39,$38,$39 ; }

; Girl 3 Frame 4
;
; #PUSHS
; #UDGTABLE
; {
; #UDGARRAY$0A,scale=$04,step=$0A($DFFB-$E1D1-$01-$50)@$E1DB-$E216(girl-3-frame-4)
; }
; UDGTABLE#
; #POPS
@label=Girl3_Frame4
b$DFFB DEFB $0F,$AA,$D5,$56,$02,$AA,$AA,$AB,$FE,$AA ; {Pixels.
 $E005 DEFB $0E,$D5,$5A,$AB,$03,$55,$55,$BC,$3B,$D5 ;
 $E00F DEFB $1E,$3A,$D5,$55,$02,$AA,$AA,$E0,$00,$EA ;
 $E019 DEFB $1C,$0F,$5A,$AB,$03,$55,$55,$80,$00,$1D ;
 $E023 DEFB $1C,$01,$D5,$55,$82,$AB,$FF,$00,$00,$06 ;
 $E02D DEFB $3C,$00,$3A,$FE,$83,$FC,$06,$00,$00,$03 ;
 $E037 DEFB $38,$00,$07,$00,$82,$00,$18,$00,$00,$00 ;
 $E041 DEFB $78,$00,$1A,$00,$81,$00,$60,$00,$00,$00 ;
 $E04B DEFB $70,$00,$25,$20,$81,$01,$80,$00,$00,$00 ;
 $E055 DEFB $70,$00,$4A,$40,$41,$06,$00,$00,$00,$00 ;
 $E05F DEFB $F0,$00,$94,$8C,$41,$1C,$00,$00,$00,$00 ;
 $E069 DEFB $E0,$01,$29,$3C,$41,$E0,$00,$00,$00,$00 ;
 $E073 DEFB $E0,$01,$2A,$48,$C0,$80,$00,$00,$00,$00 ;
 $E07D DEFB $C0,$01,$54,$89,$40,$80,$00,$00,$00,$00 ;
 $E087 DEFB $C0,$01,$54,$91,$40,$40,$00,$00,$00,$00 ;
 $E091 DEFB $80,$00,$D4,$92,$40,$40,$00,$00,$00,$00 ;
 $E09B DEFB $80,$00,$74,$A2,$20,$20,$00,$00,$00,$00 ;
 $E0A5 DEFB $00,$00,$5C,$D4,$20,$20,$00,$00,$00,$00 ;
 $E0AF DEFB $00,$00,$36,$C8,$20,$10,$00,$00,$00,$00 ;
 $E0B9 DEFB $00,$00,$1C,$B0,$20,$10,$00,$00,$00,$00 ;
 $E0C3 DEFB $00,$00,$03,$00,$20,$10,$02,$00,$00,$00 ;
 $E0CD DEFB $00,$00,$00,$00,$20,$08,$04,$03,$80,$00 ;
 $E0D7 DEFB $00,$00,$00,$00,$20,$08,$04,$06,$C0,$00 ;
 $E0E1 DEFB $00,$00,$00,$00,$10,$04,$04,$07,$C0,$00 ;
 $E0EB DEFB $00,$00,$00,$00,$10,$04,$08,$03,$80,$00 ;
 $E0F5 DEFB $00,$00,$00,$00,$10,$02,$08,$00,$00,$00 ;
 $E0FF DEFB $00,$18,$00,$00,$10,$02,$08,$00,$00,$00 ;
 $E109 DEFB $00,$3C,$00,$00,$10,$01,$10,$00,$00,$00 ;
 $E113 DEFB $00,$18,$00,$00,$10,$01,$10,$00,$00,$00 ;
 $E11D DEFB $00,$00,$00,$00,$08,$00,$88,$00,$00,$00 ;
 $E127 DEFB $00,$00,$00,$00,$08,$00,$88,$00,$00,$00 ;
 $E131 DEFB $00,$00,$00,$00,$08,$00,$48,$00,$00,$00 ;
 $E13B DEFB $00,$00,$00,$00,$08,$00,$44,$00,$00,$07 ;
 $E145 DEFB $00,$00,$00,$00,$04,$00,$24,$00,$00,$78 ;
 $E14F DEFB $00,$00,$00,$00,$04,$00,$23,$00,$07,$80 ;
 $E159 DEFB $00,$00,$00,$00,$04,$00,$10,$C0,$F8,$00 ;
 $E163 DEFB $00,$00,$00,$00,$02,$00,$08,$1F,$00,$00 ;
 $E16D DEFB $00,$00,$00,$00,$02,$00,$07,$E0,$00,$00 ;
 $E177 DEFB $00,$00,$00,$00,$02,$00,$00,$00,$00,$00 ;
 $E181 DEFB $00,$00,$00,$00,$01,$00,$00,$00,$00,$00 ;
 $E18B DEFB $00,$00,$00,$00,$01,$00,$00,$00,$00,$00 ;
 $E195 DEFB $00,$00,$00,$00,$00,$80,$00,$00,$00,$00 ;
 $E19F DEFB $00,$00,$00,$00,$00,$40,$00,$00,$00,$00 ;
 $E1A9 DEFB $00,$00,$00,$00,$00,$40,$00,$00,$00,$00 ;
 $E1B3 DEFB $00,$00,$00,$00,$00,$20,$00,$00,$00,$00 ;
 $E1BD DEFB $00,$00,$1F,$FE,$00,$20,$00,$00,$00,$00 ;
 $E1C7 DEFB $FF,$FF,$F5,$55,$C0,$10,$00,$00,$00,$00 ;
 $E1D1 DEFB $AA,$AA,$AA,$AA,$BF,$0C,$00,$00,$00,$00 ; }
 $E1DB DEFB $39,$38,$38,$38,$38,$38,$38,$38,$3A,$38 ; {Attributes.
 $E1E5 DEFB $39,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $E1EF DEFB $39,$38,$38,$38,$38,$38,$38,$3A,$3A,$38 ;
 $E1F9 DEFB $38,$38,$38,$38,$38,$38,$38,$3A,$3A,$38 ;
 $E203 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $E20D DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ; }

; Girl 3 Frame 5
;
; #PUSHS
; #UDGTABLE
; {
; #UDGARRAY$04,scale=$04,step=$04($E217-$E2F3-$01-$20)@$E2F7-$E312(girl-3-frame-5)
; }
; UDGTABLE#
; #POPS
@label=Girl3_Frame5
b$E217 DEFB $AA,$AA,$AA,$AA ; {Pixels.
 $E21B DEFB $5B,$55,$55,$55 ;
 $E21F DEFB $AA,$AA,$AA,$AA ;
 $E223 DEFB $5B,$55,$55,$55 ;
 $E227 DEFB $AA,$BF,$AA,$AA ;
 $E22B DEFB $5F,$E0,$7F,$55 ;
 $E22F DEFB $F0,$00,$01,$EA ;
 $E233 DEFB $00,$00,$00,$1D ;
 $E237 DEFB $00,$00,$00,$03 ;
 $E23B DEFB $00,$00,$00,$00 ;
 $E23F DEFB $00,$00,$00,$00 ;
 $E243 DEFB $00,$00,$00,$00 ;
 $E247 DEFB $00,$00,$00,$00 ;
 $E24B DEFB $00,$00,$00,$00 ;
 $E24F DEFB $00,$00,$00,$00 ;
 $E253 DEFB $00,$00,$00,$00 ;
 $E257 DEFB $00,$00,$00,$00 ;
 $E25B DEFB $00,$00,$00,$00 ;
 $E25F DEFB $00,$00,$00,$00 ;
 $E263 DEFB $00,$00,$00,$00 ;
 $E267 DEFB $00,$00,$00,$00 ;
 $E26B DEFB $00,$00,$00,$00 ;
 $E26F DEFB $00,$00,$00,$00 ;
 $E273 DEFB $00,$00,$02,$00 ;
 $E277 DEFB $00,$00,$04,$00 ;
 $E27B DEFB $00,$00,$04,$00 ;
 $E27F DEFB $00,$00,$08,$00 ;
 $E283 DEFB $00,$00,$10,$00 ;
 $E287 DEFB $00,$00,$20,$00 ;
 $E28B DEFB $00,$00,$20,$00 ;
 $E28F DEFB $00,$00,$40,$00 ;
 $E293 DEFB $00,$00,$80,$00 ;
 $E297 DEFB $00,$03,$00,$00 ;
 $E29B DEFB $00,$0E,$00,$00 ;
 $E29F DEFB $00,$18,$00,$00 ;
 $E2A3 DEFB $00,$38,$00,$00 ;
 $E2A7 DEFB $00,$70,$00,$00 ;
 $E2AB DEFB $00,$F8,$00,$00 ;
 $E2AF DEFB $01,$F0,$00,$00 ;
 $E2B3 DEFB $07,$E0,$00,$00 ;
 $E2B7 DEFB $1F,$C0,$00,$00 ;
 $E2BB DEFB $3F,$E0,$00,$00 ;
 $E2BF DEFB $7F,$E0,$00,$00 ;
 $E2C3 DEFB $FF,$C0,$00,$00 ;
 $E2C7 DEFB $1B,$E0,$00,$00 ;
 $E2CB DEFB $01,$C0,$00,$00 ;
 $E2CF DEFB $00,$E0,$00,$00 ;
 $E2D3 DEFB $00,$60,$00,$00 ;
 $E2D7 DEFB $00,$40,$00,$00 ;
 $E2DB DEFB $00,$20,$00,$00 ;
 $E2DF DEFB $00,$20,$00,$00 ;
 $E2E3 DEFB $00,$00,$00,$00 ;
 $E2E7 DEFB $00,$00,$00,$00 ;
 $E2EB DEFB $00,$00,$00,$00 ;
 $E2EF DEFB $01,$FF,$FF,$FF ;
 $E2F3 DEFB $FE,$AA,$AA,$AA ; }
 $E2F7 DEFB $38,$38,$38,$38 ; {Attributes.
 $E2FB DEFB $38,$38,$38,$38 ;
 $E2FF DEFB $38,$38,$38,$38 ;
 $E303 DEFB $38,$38,$38,$38 ;
 $E307 DEFB $38,$38,$38,$38 ;
 $E30B DEFB $38,$38,$38,$38 ;
 $E30F DEFB $38,$38,$38,$38 ; }

; Print Hand
;
; Used by the routines at #R$8D4A and #R$8EE2.
;
; IX Pointer to either the players hand or the girls hand
@label=PrintHand
c$E313 PUSH IX       ; Stash #REGix on the stack.
 $E315 PUSH IX       ; {Copy the hand pointer to #REGhl using the stack.
 $E317 POP HL        ; }
; Starting from the first card.
 $E318 LD A,$01      ; {Write #N$01 to *#R$E81F.
 $E31A LD ($E81F),A  ; }
; Loop round each card in turn and print it to the screen.
@label=PrintHand_Loop
*$E31D PUSH HL       ; Stash the hand pointer on the stack.
 $E31E LD A,(HL)     ; Fetch the card "value" and store it in #REGa.
 $E31F CALL $E33A    ; Call #R$E33A (which will print the card in position to
                     ; the screen).
 $E322 POP HL        ; Restore the hand pointer from the stack.
 $E323 INC HL        ; Increment the hand pointer by one to point to the next
                     ; card.
; Have all cards been printed yet? There are #N$05 in a hand.
 $E324 LD A,($E81F)  ; {Jump to #R$E331 if *#R$E81F is equal to #N$05.
 $E327 CP $05        ;
 $E329 JR Z,$E331    ; }
 $E32B INC A         ; {Increment the card position and update *#R$E81F count,
 $E32C LD ($E81F),A  ; as on the loop, we'll be looking at the next card.}
 $E32F JR $E31D      ; Jump to #R$E31D.
; #HTML(Housekeeping; restore the
; <a rel="noopener nofollow" href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>
; value and the hand pointer to return.)
@label=EvaluateHand_Finish
*$E331 LD HL,$F3C9   ; {#HTML(Write #R$F4C9(#N$F3C9) (#R$F4C9) to *<a
 $E334 LD ($5C36),HL ; rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $E337 POP IX        ; Restore the original value of #REGix from the stack.
 $E339 RET           ; Return.

; Check Card Type
;
; Used by the routine at #R$E313.
;
; A Card value
@label=CheckCardType
c$E33A LD B,A        ; #REGb=#REGa.
 $E33B AND %00001111 ; Keep only bits 0-3.
 $E33D CP $09        ; {Jump to #R$E3BD if #REGa is lower than #N$09.
 $E33F JR C,$E3BD    ; }
 $E341 CP $0C        ; {Jump to #R$E3B8 if #REGa is equal to #N$0C.
 $E343 JR Z,$E3B8    ; }
 $E345 LD HL,$E618   ; #REGhl=#R$E618.
 $E348 LD DE,$0438   ; #REGde=#N($0438,$04,$04).
 $E34B SUB $08       ; #REGa-=#N$08.
 $E34D SBC HL,DE     ; #REGhl-=#REGde (with carry).
*$E34F ADD HL,DE     ; #REGhl+=#REGde.
 $E350 DEC A         ; Decrease #REGa by one.
 $E351 JR NZ,$E34F   ; Jump to #R$E34F until #REGa is zero.
 $E353 LD A,$04      ; #REGa=#N$04.
*$E355 SRL B         ; Shift #REGb right.
 $E357 DEC A         ; Decrease #REGa by one.
 $E358 JR NZ,$E355   ; Jump to #R$E355 until #REGa is zero.
 $E35A LD DE,$010E   ; #REGde=#N($010E,$04,$04).
 $E35D XOR A         ; #REGa=#N$00.
 $E35E SBC HL,DE     ; #REGhl-=#REGde (with carry).
 $E360 INC B         ; Increment #REGb by one.
*$E361 ADD HL,DE     ; #REGhl+=#REGde.
 $E362 DJNZ $E361    ; Decrease counter by one and loop back to #R$E361 until
                     ; counter is zero.
 $E364 LD ($5C36),HL ; #HTML(Write #REGhl to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $E367 LD DE,$02F8   ; {#REGhl+=#N($02F8,$04,$04).
 $E36A ADD HL,DE     ; }
 $E36B PUSH HL       ; Stash #REGhl on the stack.
 $E36C LD HL,$E39A   ; {Write #R$E39A to *#R$E563.
 $E36F LD ($E563),HL ; }
 $E372 CALL $E40D    ; Call #R$E40D.
; Calculate the attribute buffer position for the card position currently
; being printed.
 $E375 LD A,($E81F)  ; #REGa=*#R$E81F.
 $E378 LD HL,$0006   ; #REGhl=#N($0006,$04,$04).
 $E37B LD DE,$597B   ; #REGde=#N$597B (attribute buffer location).
 $E37E EX DE,HL      ; Exchange the #REGde and #REGhl registers.
@label=FindCardAttributePosition_Loop
*$E37F ADD HL,DE     ; #REGhl+=#REGde.
 $E380 DEC A         ; Decrease #REGa by one.
 $E381 JR NZ,$E37F   ; Jump to #R$E37F until #REGa is zero.
 $E383 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $E384 POP HL        ; Restore the attributes pointer from the stack.
 $E385 LD C,$05      ; Set the card height (#N$05) to #REGc.
@label=CopyCardAttributes_RowLoop
*$E387 LD B,$06      ; Set the card width (#N$06) to #REGb.
@label=CopyCardAttributes_Loop
*$E389 LD A,(HL)     ; {Copy an attribute byte from *#REGhl to *#REGde.
 $E38A LD (DE),A     ; }
 $E38B INC HL        ; {Increment both #REGhl and #REGde by one.
 $E38C INC DE        ; }
 $E38D DJNZ $E389    ; Decrease the width counter by one and loop back to #R$E389 until
                     ; all the attributes in the row have been copied.
 $E38F PUSH HL       ; Stash #REGhl on the stack.
; Move down one line, and to where the next row will start (#N$06 less
; than one row ~ #N$20).
 $E390 LD HL,$001A   ; {#REGde+=#N($001A,$04,$04).
 $E393 ADD HL,DE     ;
 $E394 EX DE,HL      ; }
 $E395 POP HL        ; Restore #REGhl from the stack.
 $E396 DEC C         ; Decrease #REGc by one.
 $E397 JR NZ,$E387   ; Jump to #R$E387 until #REGc is zero.
 $E399 RET           ; Return.

; Graphics: Picture Card
;
; This is UDG data which corresponds to the picture card UDGs.
; .
; Used by the routines at #R$E33A and #R$E40D.
@label=Graphics_PictureCard
b$E39A DEFB $41,$42,$43,$44,$45,$46 ; {#UDGTABLE {
 $E3A0 DEFB $47,$48,$49,$4A,$4B,$4C ;   #UDGS$06,$05(card-buffer)(
 $E3A6 DEFB $4D,$4E,$4F,$50,$51,$52 ;     #LET(a=$E35F+(#PEEK(#PC+$06*$y+$x)*$08))
 $E3AC DEFB $53,$54,$55,$56,$57,$58 ;     #UDG({a})(*udg)
 $E3B2 DEFB $59,$5A,$5B,$5C,$5D,$5E ;     udg
                                    ;   )
                                    ; } UDGTABLE#}

; Print Cards
;
; Used by the routine at #R$E33A.
@label=PrintCards
c$E3B8 SUB $03       ; #REGa-=#N$03.
 $E3BA DEC B         ; {Decrease #REGb by three.
 $E3BB DEC B         ;
 $E3BC DEC B         ; }
; This entry point is used by the routine at #R$E33A.
*$E3BD LD C,B        ; #REGc=#REGb.
 $E3BE LD B,A        ; #REGb=#REGa.
 $E3BF INC B         ; Increment #REGb by one.
 $E3C0 LD DE,$001E   ; #REGde=#N($001E,$04,$04).
 $E3C3 LD HL,$E436   ; #REGhl=#R$E436.
 $E3C6 XOR A         ; #REGa=#N$00.
 $E3C7 SBC HL,DE     ; #REGhl-=#REGde (with carry).
*$E3C9 ADD HL,DE     ; #REGhl+=#REGde.
 $E3CA DJNZ $E3C9    ; Decrease counter by one and loop back to #R$E3C9 until
                     ; counter is zero.
 $E3CC LD ($E563),HL ; Write #REGhl to *#R$E563.
 $E3CF LD B,$04      ; #REGb=#N$04.
*$E3D1 SRL C         ; Shift #REGc right.
 $E3D3 DJNZ $E3D1    ; Decrease counter by one and loop back to #R$E3D1 until
                     ; counter is zero.
 $E3D5 LD A,C        ; {Write #REGc to *#R$E562.
 $E3D6 LD ($E562),A  ; }
 $E3D9 LD B,C        ; #REGb=#REGc.
 $E3DA INC B         ; Increment #REGb by one.
 $E3DB LD DE,$0058   ; #REGde=#N($0058,$04,$04).
 $E3DE LD HL,$E6BF   ; #REGhl=#R$E6BF.
 $E3E1 XOR A         ; #REGa=#N$00.
 $E3E2 SBC HL,DE     ; #REGhl-=#REGde (with carry).
*$E3E4 ADD HL,DE     ; #REGhl+=#REGde.
 $E3E5 DJNZ $E3E4    ; Decrease counter by one and loop back to #R$E3E4 until
                     ; counter is zero.
 $E3E7 PUSH DE       ; Stash #REGde on the stack.
 $E3E8 POP BC        ; Restore #REGbc from the stack.
 $E3E9 LD DE,$E667   ; #REGde=#R$E667.
 $E3EC LDIR          ; LDIR.
 $E3EE LD HL,$E35F   ; {#HTML(Write #N$E35F to *<a rel="noopener nofollow"
 $E3F1 LD ($5C36),HL ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $E3F4 LD A,$13      ; {BRIGHT: ON.
 $E3F6 RST $10       ;
 $E3F7 LD A,$01      ;
 $E3F9 RST $10       ; }
 $E3FA LD A,$10      ; {Set INK: #INK$00.
 $E3FC RST $10       ;
 $E3FD LD A,$00      ;
 $E3FF RST $10       ; }
 $E400 LD A,($E562)  ; {Jump to #R$E40D if *#R$E562 is higher than #N$02.
 $E403 CP $02        ;
 $E405 JR NC,$E40D   ; }
 $E407 LD A,$10      ; {Set INK: #INK$02.
 $E409 RST $10       ;
 $E40A LD A,$02      ;
 $E40C RST $10       ; }
; This entry point is used by the routine at #R$E33A.
@label=PrintCard
*$E40D LD A,($E81F)  ; Fetch the current *#R$E81F and store this in #REGa.
 $E410 LD C,$06      ; Each card is #N$06 character blocks in width, store this
                     ; count in #REGc.
 $E412 LD B,A        ; Set a counter in #REGb of the card position we're
                     ; processing.
; Subtract #N$06 from #N$26 the number of times for the current card
; position. For example; position #N$01 is - #N$26 - (#N$01 * #N$06) = #N$20.
 $E413 LD A,$26      ; #REGa=#N$26.
@label=FindCardPosition_Loop
*$E415 SUB C         ; #REGa-=#REGc.
 $E416 DJNZ $E415    ; Decrease card position counter by one and loop back to
                     ; #R$E415 until the counter is zero.
 $E418 LD C,A        ; #REGc=#REGa.
 $E419 LD B,$0C      ; #REGb=#N$0C.
 $E41B LD DE,($E563) ; #REGde=*#R$E563.
*$E41F PUSH DE       ; Stash #REGde on the stack.
 $E420 LD A,B        ; {Jump to #R$E434 if #REGb is equal to #N$07.
 $E421 CP $07        ;
 $E423 JR Z,$E434    ; }
 $E425 CALL $0DE2    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0DD9.html#0DE2">#N$0DE2</a>
                     ; (CL_SET).)
 $E428 POP DE        ; Restore #REGde from the stack.
 $E429 PUSH BC       ; Stash #REGbc on the stack.
 $E42A LD BC,$0006   ; #REGbc=#N($0006,$04,$04).
 $E42D CALL $203C    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/1FFC.html#203C">PR_STRING</a>.)
 $E430 POP BC        ; Restore #REGbc from the stack.
 $E431 DEC B         ; Decrease #REGb by one.
 $E432 JR $E41F      ; Jump to #R$E41F.
@label=PrintCard_Housekeeping
*$E434 POP DE        ; Restore #REGde from the stack.
 $E435 RET           ; Return.

; Graphics: Cards
;
; This is UDG data which corresponds to the UDGs defined at #R$E567.
; .
; Used by the routine at #R$E3B8.
@label=Graphics_CardTwo
b$E436 DEFB $42,$43,$43,$43,$43,$44 ; {#UDGTABLE {
 $E43C DEFB $46,$5F,$5F,$5F,$5F,$47 ;   #UDGS$06,$05(card-two)(
 $E442 DEFB $69,$5F,$67,$68,$5F,$6A ;     #LET(a=$E35F+(#PEEK(#PC+$06*$y+$x)*$08))
 $E448 DEFB $41,$5F,$5F,$5F,$5F,$45 ;     #UDG({a})(*udg)
 $E44E DEFB $41,$5F,$5F,$5F,$5F,$45 ;     udg
                                    ;   )
                                    ; } UDGTABLE#}
@label=Graphics_CardThree
 $E454 DEFB $42,$43,$43,$43,$43,$44 ; {#UDGTABLE {
 $E45A DEFB $48,$5F,$5F,$5F,$5F,$49 ;   #UDGS$06,$05(card-three)(
 $E460 DEFB $69,$5F,$67,$68,$5F,$6A ;     #LET(a=$E35F+(#PEEK(#PC+$06*$y+$x)*$08))
 $E466 DEFB $41,$5F,$5F,$5F,$5F,$45 ;     #UDG({a})(*udg)
 $E46C DEFB $41,$5F,$61,$62,$5F,$45 ;     udg
                                    ;   )
                                    ; } UDGTABLE#}
@label=Graphics_CardFour
 $E472 DEFB $42,$43,$43,$43,$43,$44 ; {#UDGTABLE {
 $E478 DEFB $4A,$5F,$5F,$5F,$5F,$4B ;   #UDGS$06,$05(card-four)(
 $E47E DEFB $69,$5F,$67,$68,$5F,$6A ;     #LET(a=$E35F+(#PEEK(#PC+$06*$y+$x)*$08))
 $E484 DEFB $41,$5F,$5F,$5F,$5F,$45 ;     #UDG({a})(*udg)
 $E48A DEFB $41,$65,$5F,$5F,$65,$45 ;     udg
                                    ;   )
                                    ; } UDGTABLE#}
@label=Graphics_CardFive
 $E490 DEFB $42,$43,$43,$43,$43,$44 ; {#UDGTABLE {
 $E496 DEFB $4C,$5F,$5F,$5F,$5F,$4D ;   #UDGS$06,$05(card-five)(
 $E49C DEFB $69,$6B,$5F,$5F,$6B,$6A ;     #LET(a=$E35F+(#PEEK(#PC+$06*$y+$x)*$08))
 $E4A2 DEFB $41,$5F,$5F,$5F,$5F,$45 ;     #UDG({a})(*udg)
 $E4A8 DEFB $41,$5F,$61,$62,$5F,$45 ;     udg
                                    ;   )
                                    ; } UDGTABLE#}
@label=Graphics_CardSix
 $E4AE DEFB $42,$43,$43,$43,$43,$44 ; {#UDGTABLE {
 $E4B4 DEFB $4E,$5F,$5F,$5F,$5F,$4F ;   #UDGS$06,$05(card-six)(
 $E4BA DEFB $69,$6B,$5F,$5F,$6B,$6A ;     #LET(a=$E35F+(#PEEK(#PC+$06*$y+$x)*$08))
 $E4C0 DEFB $41,$5F,$5F,$5F,$5F,$45 ;     #UDG({a})(*udg)
 $E4C6 DEFB $41,$65,$5F,$5F,$65,$45 ;     udg
                                    ;   )
                                    ; } UDGTABLE#}
@label=Graphics_CardSeven
 $E4CC DEFB $42,$43,$43,$43,$43,$44 ; {#UDGTABLE {
 $E4D2 DEFB $50,$6B,$5F,$5F,$6B,$51 ;   #UDGS$06,$05(card-seven)(
 $E4D8 DEFB $69,$5F,$61,$62,$5F,$6A ;     #LET(a=$E35F+(#PEEK(#PC+$06*$y+$x)*$08))
 $E4DE DEFB $41,$5F,$63,$64,$5F,$45 ;     #UDG({a})(*udg)
 $E4E4 DEFB $41,$65,$5F,$5F,$65,$45 ;     udg
                                    ;   )
                                    ; } UDGTABLE#}
@label=Graphics_CardEight
 $E4EA DEFB $42,$43,$43,$43,$43,$44 ; {#UDGTABLE {
 $E4F0 DEFB $52,$6B,$5F,$5F,$6B,$53 ;   #UDGS$06,$05(card-eight)(
 $E4F6 DEFB $69,$5F,$61,$62,$5F,$6A ;     #LET(a=$E35F+(#PEEK(#PC+$06*$y+$x)*$08))
 $E4FC DEFB $41,$5F,$63,$64,$5F,$45 ;     #UDG({a})(*udg)
 $E502 DEFB $41,$65,$5F,$5F,$65,$45 ;     udg
                                    ;   )
                                    ; } UDGTABLE#}
@label=Graphics_CardNine
 $E508 DEFB $42,$43,$43,$43,$43,$44 ; {#UDGTABLE {
 $E50E DEFB $54,$6B,$5F,$5F,$6B,$55 ;   #UDGS$06,$05(card-nine)(
 $E514 DEFB $69,$5F,$5F,$5F,$5F,$6A ;     #LET(a=$E35F+(#PEEK(#PC+$06*$y+$x)*$08))
 $E51A DEFB $41,$6B,$5F,$5F,$6B,$45 ;     #UDG({a})(*udg)
 $E520 DEFB $41,$5F,$61,$62,$5F,$45 ;     udg
                                    ;   )
                                    ; } UDGTABLE#}
@label=Graphics_CardTen
 $E526 DEFB $42,$43,$43,$43,$43,$44 ; {#UDGTABLE {
 $E52C DEFB $56,$6B,$5F,$5F,$6B,$57 ;   #UDGS$06,$05(card-ten)(
 $E532 DEFB $69,$5F,$61,$62,$5F,$6A ;     #LET(a=$E35F+(#PEEK(#PC+$06*$y+$x)*$08))
 $E538 DEFB $41,$5F,$63,$64,$5F,$45 ;     #UDG({a})(*udg)
 $E53E DEFB $41,$6B,$5F,$5F,$6B,$45 ;     udg
                                    ;   )
                                    ; } UDGTABLE#}
@label=Graphics_CardAce
 $E544 DEFB $42,$43,$43,$43,$43,$44 ; {#UDGTABLE {
 $E54A DEFB $58,$5F,$5F,$5F,$5F,$59 ;   #UDGS$06,$05(card-ace)(
 $E550 DEFB $69,$5F,$5F,$5F,$5F,$6A ;     #LET(a=$E35F+(#PEEK(#PC+$06*$y+$x)*$08))
 $E556 DEFB $41,$5F,$5F,$5F,$5F,$45 ;     #UDG({a})(*udg)
 $E55C DEFB $41,$5F,$61,$62,$5F,$45 ;     udg
                                    ;   )
                                    ; } UDGTABLE#}

; Data block at E562
b$E562 DEFB $00

; Picture Card UDG Data
;
; Pointer to the picture card UDG data.
@label=PictureCardUDGData
g$E563 DEFW $0000

i$E565 DEFW $0000

; Graphics: Card Data
;
; Used by the routine at #R$E3B8.
@label=Graphics_CardData
b$E567 DEFB $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E56F DEFB $0F,$30,$4F,$50,$A0,$A0,$A0,$A0 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E577 DEFB $FF,$00,$FF,$00,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E57F DEFB $F0,$0C,$F2,$0A,$05,$05,$05,$05 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E587 DEFB $05,$05,$05,$05,$05,$05,$05,$05 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E58F DEFB $A0,$A4,$AA,$A2,$A4,$A8,$AE,$A0 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E597 DEFB $05,$25,$55,$15,$25,$45,$75,$05 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E59F DEFB $A0,$A6,$A9,$A1,$A2,$A1,$A9,$A6 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E5A7 DEFB $05,$65,$95,$15,$25,$15,$95,$65 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E5AF DEFB $A0,$A8,$A8,$AA,$AF,$A2,$A2,$A0 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E5B7 DEFB $05,$85,$85,$A5,$F5,$25,$25,$05 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E5BF DEFB $A0,$AF,$A8,$AE,$A1,$A1,$AE,$A0 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E5C7 DEFB $05,$F5,$85,$E5,$15,$15,$E5,$05 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E5CF DEFB $A0,$A6,$A9,$A8,$AE,$A9,$A9,$A6 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E5D7 DEFB $05,$65,$95,$85,$E5,$95,$95,$65 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E5DF DEFB $A0,$AF,$A1,$A7,$A2,$A4,$A4,$A0 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E5E7 DEFB $05,$F5,$15,$75,$25,$45,$45,$05 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E5EF DEFB $A0,$A6,$A9,$A6,$A9,$A9,$A6,$A0 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E5F7 DEFB $05,$65,$95,$65,$95,$95,$65,$05 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E5FF DEFB $A0,$A6,$A9,$A9,$A7,$A1,$A9,$A6 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E607 DEFB $05,$65,$95,$95,$75,$15,$95,$65 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E60F DEFB $A0,$AA,$BD,$AD,$AD,$AD,$AD,$AA ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E617 DEFB $05                             ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E618 DEFB $55,$ED,$6D,$6D,$6D,$6D,$55
 $E61F DEFB $A0,$A6,$A9,$A9,$AF,$A9,$A9,$A9 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E627 DEFB $05,$65,$95,$95,$F5,$95,$95,$95 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E62F DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E637 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E63F DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E647 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E64F DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E657 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E65F DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#

; Buffer: Card Data
@label=Buffer_CardData
b$E667 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E66F DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E677 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E67F DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E687 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E68F DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E697 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E69F DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E6A7 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E6AF DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E6B7 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#

; Graphics: Card Suits Data
@label=Graphics_CardSuitsData
b$E6BF DEFB $00,$00,$00,$00,$01,$01,$02,$0C ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E6C7 DEFB $00,$00,$00,$00,$80,$80,$C0,$F0 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E6CF DEFB $0F,$03,$01,$01,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E6D7 DEFB $F0,$C0,$80,$80,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E6DF DEFB $00,$00,$00,$00,$18,$18,$2C,$CF ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E6E7 DEFB $FF,$3C,$18,$18,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E6EF DEFB $01,$01,$02,$0C,$0F,$03,$01,$01 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E6F7 DEFB $80,$80,$C0,$F0,$F0,$C0,$80,$80 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E6FF DEFB $80,$80,$88,$9C,$BE,$9C,$88,$80 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E707 DEFB $01,$01,$11,$39,$7D,$39,$11,$01 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E70F DEFB $18,$18,$2C,$CF,$FF,$3C,$18,$18 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E717 DEFB $00,$00,$00,$00,$00,$06,$0D,$09 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E71F DEFB $00,$00,$00,$00,$00,$60,$F0,$F0 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E727 DEFB $0D,$06,$03,$01,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E72F DEFB $F0,$E0,$C0,$80,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E737 DEFB $00,$00,$00,$00,$00,$66,$DF,$9F ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E73F DEFB $DF,$6E,$3C,$18,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E747 DEFB $06,$0D,$09,$0D,$06,$03,$01,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E74F DEFB $60,$F0,$F0,$F0,$E0,$C0,$80,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E757 DEFB $80,$80,$94,$BE,$BE,$9C,$88,$80 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E75F DEFB $01,$01,$29,$7D,$7D,$39,$11,$01 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E767 DEFB $66,$DF,$9F,$DF,$6E,$3C,$18,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E76F DEFB $00,$00,$00,$00,$01,$02,$05,$0B ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E777 DEFB $00,$00,$00,$00,$80,$C0,$E0,$F0 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E77F DEFB $0D,$01,$01,$03,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E787 DEFB $B0,$80,$80,$C0,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E78F DEFB $00,$00,$00,$00,$18,$2C,$5E,$BF ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E797 DEFB $DB,$18,$18,$3C,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E79F DEFB $01,$02,$05,$0B,$0D,$01,$01,$03 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E7A7 DEFB $80,$C0,$E0,$F0,$B0,$80,$80,$C0 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E7AF DEFB $80,$88,$9C,$BE,$BE,$88,$9C,$80 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E7B7 DEFB $01,$11,$39,$7D,$7D,$11,$39,$01 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E7BF DEFB $18,$2C,$5E,$BF,$DB,$18,$18,$3C ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E7C7 DEFB $00,$00,$00,$00,$03,$02,$0D,$0B ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E7CF DEFB $00,$00,$00,$00,$80,$80,$60,$E0 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E7D7 DEFB $0D,$01,$01,$03,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E7DF DEFB $60,$00,$00,$80,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E7E7 DEFB $00,$00,$00,$00,$38,$28,$D6,$BE ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E7EF DEFB $D6,$10,$10,$38,$00,$00,$00,$00 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E7F7 DEFB $03,$02,$0D,$0B,$0D,$01,$01,$03 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E7FF DEFB $80,$80,$60,$E0,$60,$00,$00,$80 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E807 DEFB $80,$9C,$AA,$BE,$AA,$88,$9C,$80 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E80F DEFB $01,$39,$55,$7D,$55,$11,$39,$01 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#
 $E817 DEFB $38,$28,$D6,$BE,$D6,$10,$10,$38 ; #UDGTABLE { #N((#PC-$E35F)/$08) |
                                            ; #UDG(#PC) } UDGTABLE#

; Card Position
;
; Will be a value of; #N$01-#N$05 to indicate the currently "in-focus"
; card being processed/ evaluated.
@label=CardPosition
g$E81F DEFB $00

; Girl Buffer?
b$E820 DEFB $0F,$30,$4F,$50,$A0,$A0,$A0,$A0
 $E828 DEFB $FF,$00,$FF,$00,$01,$01,$00,$00
 $E830 DEFB $FF,$0A,$35,$EA,$55,$BF,$E0,$E6
 $E838 DEFB $FF,$A8,$54,$AE,$F4,$38,$70,$F0
 $E840 DEFB $FF,$00,$FF,$00,$00,$00,$00,$00
 $E848 DEFB $F0,$0C,$F2,$0A,$05,$05,$05,$05
 $E850 DEFB $80,$8E,$84,$84,$84,$84,$A4,$98
 $E858 DEFB $01,$01,$02,$05,$06,$05,$0A,$0F
 $E860 DEFB $6C,$E0,$E2,$F3,$FE,$6F,$E3,$41
 $E868 DEFB $B0,$60,$20,$E0,$40,$C0,$80,$60
 $E870 DEFB $18,$18,$2C,$CF,$FF,$3C,$18,$18
 $E878 DEFB $01,$1D,$09,$09,$09,$09,$49,$31
 $E880 DEFB $80,$80,$88,$9C,$BE,$9C,$88,$81
 $E888 DEFB $0B,$3F,$7F,$7F,$D7,$AD,$AB,$5A
 $E890 DEFB $FF,$87,$C7,$41,$81,$81,$0D,$17
 $E898 DEFB $F8,$FC,$FE,$FA,$BD,$B5,$BA,$DB
 $E8A0 DEFB $00,$00,$00,$00,$00,$00,$80,$80
 $E8A8 DEFB $01,$01,$11,$39,$7D,$39,$11,$01
 $E8B0 DEFB $A1,$A1,$A1,$A1,$A1,$A1,$A1,$A1
 $E8B8 DEFB $FB,$FB,$FB,$F7,$F7,$F7,$F7,$F7
 $E8C0 DEFB $6B,$F5,$EA,$F5,$F7,$EC,$FB,$31
 $E8C8 DEFB $DD,$DF,$FF,$3F,$7F,$FE,$E6,$16
 $E8D0 DEFB $80,$80,$80,$80,$00,$00,$00,$00
 $E8D8 DEFB $05,$05,$05,$05,$05,$05,$05,$05
 $E8E0 DEFB $A1,$A0,$A0,$A0,$A0,$A0,$A0,$A0
 $E8E8 DEFB $F7,$F7,$F7,$77,$77,$77,$47,$43
 $E8F0 DEFB $88,$C1,$FF,$F7,$EB,$F7,$F7,$EB
 $E8F8 DEFB $F4,$FA,$FD,$FE,$F9,$F8,$F8,$F8
 $E900 DEFB $00,$00,$00,$80,$40,$A0,$50,$28
 $E908 DEFB $05,$05,$05,$05,$05,$05,$05,$05
 $E910 DEFB $78,$78,$78,$78,$78,$78,$7A,$7B
 $E918 DEFB $78,$78,$7A,$7A,$7A,$79,$39,$79
 $E920 DEFB $78,$7A,$78,$79,$79,$79,$78,$78
 $E928 DEFB $78,$79,$79,$79,$78,$78,$0F,$30
 $E930 DEFB $4F,$50,$A0,$A0,$A0,$A0,$FF,$00
 $E938 DEFB $FF,$00,$00,$00,$00,$00,$FF,$00
 $E940 DEFB $87,$0A,$15,$6A,$DF,$B0,$FF,$00
 $E948 DEFB $71,$A8,$DE,$AB,$FD,$0E,$FF,$00
 $E950 DEFB $FF,$00,$00,$00,$00,$00,$F0,$0C
 $E958 DEFB $F2,$0A,$05,$05,$05,$05,$80,$8E
 $E960 DEFB $84,$84,$84,$84,$A4,$98,$01,$02
 $E968 DEFB $05,$02,$05,$0A,$05,$02,$F6,$72
 $E970 DEFB $70,$70,$3B,$39,$1C,$33,$CC,$6C
 $E978 DEFB $8C,$0C,$CC,$9E,$3F,$CF,$66,$DF
 $E980 DEFB $9F,$DF,$6E,$3C,$18,$00,$01,$1D
 $E988 DEFB $09,$09,$09,$09,$49,$31,$80,$80
 $E990 DEFB $94,$BE,$BE,$9C,$88,$80,$FF,$FE
 $E998 DEFB $FC,$F8,$F0,$E0,$E0,$C0,$D1,$3A
 $E9A0 DEFB $1D,$0E,$07,$03,$21,$40,$18,$B8
 $E9A8 DEFB $70,$E0,$C0,$80,$00,$00,$7F,$3F
 $E9B0 DEFB $1F,$0F,$0F,$07,$07,$03,$01,$01
 $E9B8 DEFB $15,$3F,$3F,$1D,$09,$01,$A0,$A0
 $E9C0 DEFB $A0,$A0,$A0,$A0,$A0,$A0,$C0,$C0
 $E9C8 DEFB $C0,$C0,$C0,$C0,$C0,$C0,$40,$80
 $E9D0 DEFB $80,$80,$80,$80,$80,$80,$1E,$5F
 $E9D8 DEFB $AF,$57,$6B,$74,$3A,$04,$03,$03
 $E9E0 DEFB $01,$01,$01,$03,$03,$0F,$05,$05
 $E9E8 DEFB $05,$05,$05,$05,$05,$05,$A0,$A0
 $E9F0 DEFB $A0,$A0,$A0,$A0,$A0,$A0,$C0,$E0
 $E9F8 DEFB $E0,$E0,$E0,$E0,$E0,$EE,$80,$80
 $EA00 DEFB $80,$80,$80,$80,$80,$80,$1C,$27
 $EA08 DEFB $1F,$0E,$00,$00,$00,$00,$B0,$60
 $EA10 DEFB $D0,$28,$14,$0A,$05,$02,$05,$05
 $EA18 DEFB $05,$05,$05,$05,$05,$85,$78,$78
 $EA20 DEFB $7A,$7A,$78,$78,$7A,$7C,$78,$78
 $EA28 DEFB $7A,$7A,$7A,$57,$56,$56,$57,$7A
 $EA30 DEFB $78,$57,$50,$17,$57,$78,$78,$57
 $EA38 DEFB $50,$57,$78,$78,$0F,$30,$4F,$50
 $EA40 DEFB $A0,$A0,$A0,$A0,$FF,$00,$FF,$00
 $EA48 DEFB $00,$00,$00,$00,$FF,$3F,$7F,$FF
 $EA50 DEFB $FF,$AA,$55,$A0,$FF,$E0,$F8,$FE
 $EA58 DEFB $FF,$AA,$55,$0E,$FF,$00,$FF,$00
 $EA60 DEFB $00,$00,$00,$18,$F0,$0C,$F2,$0A
 $EA68 DEFB $05,$05,$05,$05,$80,$8E,$84,$84
 $EA70 DEFB $84,$84,$A4,$98,$03,$05,$0A,$04
 $EA78 DEFB $0A,$05,$0A,$04,$3E,$34,$31,$1A
 $EA80 DEFB $1F,$1E,$0F,$07,$7C,$2C,$0C,$18
 $EA88 DEFB $F8,$78,$F0,$E0,$2C,$5E,$BF,$FF
 $EA90 DEFB $DB,$18,$18,$3C,$01,$1D,$09,$09
 $EA98 DEFB $09,$09,$49,$31,$80,$88,$9C,$BE
 $EAA0 DEFB $BE,$88,$9C,$80,$FF,$FE,$F8,$F0
 $EAA8 DEFB $D0,$A0,$A0,$20,$83,$09,$05,$05
 $EAB0 DEFB $02,$01,$00,$40,$E1,$C8,$D0,$D0
 $EAB8 DEFB $A0,$40,$C0,$00,$FF,$7F,$1F,$0F
 $EAC0 DEFB $07,$05,$05,$02,$01,$11,$39,$7D
 $EAC8 DEFB $7D,$11,$39,$01,$A0,$A0,$A0,$A0
 $EAD0 DEFB $A0,$A0,$A0,$A0,$40,$41,$41,$41
 $EAD8 DEFB $41,$40,$20,$20,$80,$00,$00,$00
 $EAE0 DEFB $00,$80,$80,$41,$17,$05,$0B,$97
 $EAE8 DEFB $29,$D3,$37,$7F,$02,$02,$82,$82
 $EAF0 DEFB $82,$82,$82,$82,$05,$05,$05,$05
 $EAF8 DEFB $05,$05,$05,$05,$A0,$A0,$A0,$A0
 $EB00 DEFB $A0,$A0,$A0,$A0,$20,$10,$10,$08
 $EB08 DEFB $09,$05,$02,$01,$43,$26,$2C,$D8
 $EB10 DEFB $78,$F8,$F0,$D0,$41,$C1,$C1,$C1
 $EB18 DEFB $C1,$C1,$C1,$C1,$02,$04,$04,$04
 $EB20 DEFB $04,$04,$FC,$74,$05,$05,$05,$05
 $EB28 DEFB $05,$05,$05,$05,$78,$78,$7A,$7A
 $EB30 DEFB $78,$78,$78,$79,$78,$78,$78,$78
 $EB38 DEFB $78,$5F,$67,$67,$5F,$78,$78,$5F
 $EB40 DEFB $67,$7C,$5F,$78,$78,$5F,$67,$67
 $EB48 DEFB $5F,$78,$0F,$30,$4F,$50,$A0,$A0
 $EB50 DEFB $A0,$A0,$FF,$00,$FF,$00,$00,$00
 $EB58 DEFB $00,$00,$FF,$00,$8F,$3F,$7F,$FF
 $EB60 DEFB $7F,$B0,$FF,$00,$E3,$F8,$FC,$FE
 $EB68 DEFB $FF,$0E,$FF,$00,$FF,$00,$00,$00
 $EB70 DEFB $00,$00,$F0,$0C,$F2,$0A,$05,$05
 $EB78 DEFB $05,$05,$80,$8E,$84,$84,$84,$84
 $EB80 DEFB $A4,$98,$01,$02,$01,$02,$05,$02
 $EB88 DEFB $00,$00,$2C,$BA,$20,$B0,$18,$1F
 $EB90 DEFB $0E,$F3,$68,$D8,$88,$48,$10,$F0
 $EB98 DEFB $30,$FE,$00,$1C,$14,$6B,$5F,$6B
 $EBA0 DEFB $08,$1C,$01,$1D,$09,$09,$09,$09
 $EBA8 DEFB $49,$31,$80,$9C,$AA,$BE,$AA,$88
 $EBB0 DEFB $9C,$80,$03,$0F,$1F,$3F,$3F,$3F
 $EBB8 DEFB $3F,$6F,$EC,$EC,$F4,$F6,$FA,$F8
 $EBC0 DEFB $BF,$7F,$37,$37,$2F,$6F,$5F,$1F
 $EBC8 DEFB $F7,$FB,$80,$C0,$E0,$E0,$A0,$E0
 $EBD0 DEFB $50,$F0,$01,$39,$55,$7D,$55,$11
 $EBD8 DEFB $39,$01,$A0,$A0,$A0,$A0,$A0,$A0
 $EBE0 DEFB $A0,$A0,$7E,$56,$7E,$56,$7E,$56
 $EBE8 DEFB $7E,$6E,$E0,$20,$80,$D0,$C8,$87
 $EBF0 DEFB $99,$FC,$FB,$FD,$FD,$FD,$FD,$FB
 $EBF8 DEFB $E7,$DF,$A0,$F0,$A8,$F8,$D8,$F0
 $EC00 DEFB $F0,$F0,$05,$05,$05,$05,$05,$05
 $EC08 DEFB $05,$05,$A0,$A0,$A0,$A0,$A0,$A0
 $EC10 DEFB $A0,$A0,$7F,$7F,$7F,$7F,$7E,$3E
 $EC18 DEFB $3F,$21,$7E,$7F,$7F,$7F,$FF,$FE
 $EC20 DEFB $FF,$FE,$4F,$06,$41,$97,$87,$F3
 $EC28 DEFB $F9,$FC,$E0,$40,$C0,$C0,$E0,$E0
 $EC30 DEFB $E0,$E0,$05,$05,$05,$05,$05,$05
 $EC38 DEFB $05,$05,$78,$78,$7D,$7D,$78,$78
 $EC40 DEFB $78,$78,$78,$78,$78,$78,$78,$7B
 $EC48 DEFB $3B,$39,$79,$78,$78,$7B,$3B,$39
 $EC50 DEFB $79,$78,$78,$7B,$3B,$39,$79,$78
 $EC58 DEFB $0F,$30,$4F,$50,$A0,$A0,$A0,$A0
 $EC60 DEFB $FF,$00,$FF,$00,$00,$00,$00,$00
 $EC68 DEFB $FF,$00,$1F,$10,$68,$54,$8B,$90
 $EC70 DEFB $FF,$00,$C7,$30,$08,$08,$C4,$24
 $EC78 DEFB $FF,$00,$FF,$00,$00,$00,$00,$00
 $EC80 DEFB $F0,$0C,$F2,$0A,$05,$05,$05,$05
 $EC88 DEFB $80,$98,$A4,$A4,$A4,$A4,$A8,$94
 $EC90 DEFB $00,$01,$01,$01,$02,$02,$02,$02
 $EC98 DEFB $96,$2E,$25,$21,$20,$37,$13,$18
 $ECA0 DEFB $D4,$F4,$54,$12,$22,$A2,$22,$44
 $ECA8 DEFB $0C,$0C,$16,$67,$7F,$1E,$0C,$0C
 $ECB0 DEFB $01,$19,$25,$A5,$A5,$25,$29,$15
 $ECB8 DEFB $80,$80,$88,$9C,$BE,$9C,$88,$80
 $ECC0 DEFB $FB,$FB,$F8,$F0,$E1,$C0,$80,$80
 $ECC8 DEFB $EB,$9C,$3F,$9F,$66,$99,$66,$19
 $ECD0 DEFB $3B,$27,$C7,$A1,$50,$A0,$40,$80
 $ECD8 DEFB $00,$00,$00,$00,$00,$80,$80,$C0
 $ECE0 DEFB $01,$01,$11,$39,$7D,$39,$11,$01
 $ECE8 DEFB $A0,$A0,$A0,$A1,$A1,$A1,$A1,$A1
 $ECF0 DEFB $1A,$0E,$15,$0E,$1A,$00,$00,$00
 $ECF8 DEFB $F9,$FF,$7F,$98,$E0,$E1,$D3,$EF
 $ED00 DEFB $00,$00,$68,$9C,$86,$80,$80,$60
 $ED08 DEFB $3F,$3F,$1F,$1F,$0F,$0F,$0F,$0F
 $ED10 DEFB $05,$05,$05,$05,$05,$05,$05,$05
 $ED18 DEFB $A1,$A1,$A0,$A0,$A0,$A0,$A0,$A0
 $ED20 DEFB $F7,$F7,$F7,$FB,$FB,$7D,$7D,$BE
 $ED28 DEFB $FD,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $ED30 DEFB $00,$06,$07,$07,$07,$03,$03,$01
 $ED38 DEFB $1F,$3F,$FF,$FF,$FF,$FF,$FF,$FF
 $ED40 DEFB $05,$05,$05,$05,$05,$05,$05,$05
 $ED48 DEFB $78,$78,$78,$78,$78,$78,$7A,$78
 $ED50 DEFB $78,$78,$7A,$7A,$7A,$4F,$4F,$4F
 $ED58 DEFB $79,$7A,$78,$4E,$79,$48,$4F,$78
 $ED60 DEFB $78,$41,$41,$4F,$4F,$78,$0F,$30
 $ED68 DEFB $4F,$50,$A0,$A0,$A0,$A0,$FF,$00
 $ED70 DEFB $FF,$00,$00,$00,$00,$00,$FF,$0B
 $ED78 DEFB $9D,$36,$6B,$D0,$B0,$FD,$FF,$80
 $ED80 DEFB $67,$B0,$58,$E8,$34,$EC,$FF,$00
 $ED88 DEFB $FF,$00,$00,$00,$00,$00,$F0,$0C
 $ED90 DEFB $F2,$0A,$05,$05,$05,$05,$80,$98
 $ED98 DEFB $A4,$A4,$A4,$A4,$A8,$94,$00,$01
 $EDA0 DEFB $01,$01,$01,$00,$00,$00,$BB,$62
 $EDA8 DEFB $A4,$60,$AF,$E6,$B0,$5D,$B4,$2C
 $EDB0 DEFB $54,$6C,$34,$6C,$B8,$28,$66,$DF
 $EDB8 DEFB $9F,$DF,$6E,$3C,$18,$00,$01,$19
 $EDC0 DEFB $25,$25,$25,$25,$29,$15,$80,$80
 $EDC8 DEFB $94,$BE,$BE,$9C,$88,$80,$00,$00
 $EDD0 DEFB $03,$07,$0E,$1E,$3E,$3E,$31,$E0
 $EDD8 DEFB $C0,$40,$B1,$DB,$AE,$D5,$D8,$78
 $EDE0 DEFB $3C,$5E,$B7,$57,$B7,$6F,$00,$00
 $EDE8 DEFB $00,$00,$00,$80,$80,$C0,$01,$01
 $EDF0 DEFB $29,$7D,$7D,$39,$11,$01,$A0,$A0
 $EDF8 DEFB $A0,$A0,$A0,$A0,$A0,$A0,$7E,$7F
 $EE00 DEFB $7F,$7F,$7F,$FF,$FF,$FF,$AA,$55
 $EE08 DEFB $6A,$B5,$AA,$D5,$DB,$EE,$AF,$5F
 $EE10 DEFB $DF,$BF,$BF,$7F,$7F,$FF,$C0,$E0
 $EE18 DEFB $E0,$E0,$E0,$F0,$F0,$F0,$05,$05
 $EE20 DEFB $05,$05,$05,$05,$05,$05,$A0,$A0
 $EE28 DEFB $A0,$A0,$A0,$A0,$A0,$A0,$FD,$FB
 $EE30 DEFB $FD,$FD,$FD,$FB,$FD,$FD,$EA,$F5
 $EE38 DEFB $F1,$FB,$FB,$F5,$F5,$F5,$FB,$FD
 $EE40 DEFB $FB,$FD,$FD,$FD,$FB,$FD,$F0,$F0
 $EE48 DEFB $F0,$F0,$F0,$F0,$F0,$F0,$05,$05
 $EE50 DEFB $05,$05,$05,$05,$05,$05,$78,$78
 $EE58 DEFB $78,$78,$78,$78,$7A,$78,$78,$78
 $EE60 DEFB $7A,$7A,$7A,$79,$78,$79,$79,$7A
 $EE68 DEFB $78,$79,$79,$39,$79,$78,$78,$41
 $EE70 DEFB $39,$01,$79,$78,$0F,$30,$4F,$50
 $EE78 DEFB $A0,$A0,$A1,$A3,$FF,$00,$FF,$00
 $EE80 DEFB $60,$F0,$B8,$7C,$FF,$00,$CE,$3F
 $EE88 DEFB $7E,$7C,$F8,$F6,$FF,$00,$DF,$E0
 $EE90 DEFB $F0,$78,$38,$DC,$FF,$00,$FF,$00
 $EE98 DEFB $00,$00,$15,$0E,$F0,$0C,$F2,$0A
 $EEA0 DEFB $05,$05,$05,$05,$82,$9B,$A4,$A4
 $EEA8 DEFB $A4,$A4,$A8,$94,$FC,$6D,$61,$61
 $EEB0 DEFB $F1,$03,$03,$1F,$FB,$F1,$F0,$F3
 $EEB8 DEFB $E9,$F8,$F7,$E0,$7C,$1C,$1E,$DE
 $EEC0 DEFB $9E,$3E,$FC,$7C,$1B,$0C,$30,$50
 $EEC8 DEFB $88,$48,$44,$78,$01,$19,$25,$25
 $EED0 DEFB $25,$25,$29,$15,$80,$90,$B9,$FD
 $EED8 DEFB $FF,$93,$BF,$87,$7F,$FE,$F2,$E5
 $EEE0 DEFB $C5,$82,$82,$85,$30,$1D,$07,$00
 $EEE8 DEFB $00,$80,$80,$40,$C7,$87,$07,$0B
 $EEF0 DEFB $0B,$17,$17,$2B,$78,$F8,$F8,$F8
 $EEF8 DEFB $F8,$F8,$F0,$F0,$01,$11,$39,$7D
 $EF00 DEFB $7D,$11,$39,$01,$A7,$A7,$A7,$A7
 $EF08 DEFB $A7,$A3,$A3,$A3,$86,$85,$C4,$C4
 $EF10 DEFB $C4,$C4,$E8,$E9,$BF,$40,$B0,$49
 $EF18 DEFB $29,$52,$52,$A5,$D7,$2D,$D5,$29
 $EF20 DEFB $4B,$87,$87,$07,$F0,$F0,$E0,$E0
 $EF28 DEFB $E0,$C0,$C0,$C0,$05,$05,$05,$05
 $EF30 DEFB $05,$05,$05,$05,$A3,$A3,$A3,$A3
 $EF38 DEFB $A3,$A1,$A1,$A1,$FE,$F9,$FE,$FC
 $EF40 DEFB $FF,$FC,$FF,$FE,$4A,$94,$28,$D0
 $EF48 DEFB $20,$C0,$00,$00,$07,$0F,$0F,$0F
 $EF50 DEFB $07,$07,$07,$07,$C0,$C0,$C0,$C0
 $EF58 DEFB $C0,$C0,$C0,$C0,$05,$05,$05,$05
 $EF60 DEFB $05,$05,$05,$05,$78,$78,$78,$78
 $EF68 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $EF70 DEFB $78,$50,$10,$10,$78,$78,$78,$50
 $EF78 DEFB $50,$50,$78,$78,$78,$50,$50,$50
 $EF80 DEFB $78,$78,$0F,$30,$4F,$50,$A0,$A0
 $EF88 DEFB $A0,$A1,$FF,$00,$FF,$00,$00,$70
 $EF90 DEFB $50,$AC,$FF,$00,$E7,$1F,$3F,$3E
 $EF98 DEFB $78,$74,$FF,$00,$6F,$F0,$F8,$FC
 $EFA0 DEFB $74,$6A,$FF,$00,$FF,$00,$00,$00
 $EFA8 DEFB $00,$00,$F0,$0C,$F2,$0A,$05,$05
 $EFB0 DEFB $05,$05,$81,$99,$A4,$A4,$A4,$A4
 $EFB8 DEFB $A8,$94,$7C,$AC,$20,$70,$00,$01
 $EFC0 DEFB $01,$07,$7E,$F4,$F2,$F0,$F7,$F3
 $EFC8 DEFB $E8,$E7,$F6,$5E,$1F,$1F,$BF,$37
 $EFD0 DEFB $6E,$9F,$00,$00,$00,$00,$00,$00
 $EFD8 DEFB $00,$80,$01,$19,$25,$25,$25,$25
 $EFE0 DEFB $29,$15,$80,$9C,$AA,$BE,$AA,$88
 $EFE8 DEFB $9C,$80,$0E,$1F,$1F,$1E,$3E,$3F
 $EFF0 DEFB $3F,$7E,$98,$1E,$2B,$82,$80,$40
 $EFF8 DEFB $40,$A0,$62,$E1,$93,$83,$05,$08
 $F000 DEFB $09,$16,$60,$70,$70,$30,$B8,$F8
 $F008 DEFB $F8,$3C,$01,$39,$55,$7D,$55,$11
 $F010 DEFB $39,$01,$80,$A0,$A0,$A0,$A0,$A0
 $F018 DEFB $A0,$A0,$7F,$7E,$7C,$7D,$7D,$7C
 $F020 DEFB $7C,$7E,$50,$A8,$14,$0B,$0C,$8B
 $F028 DEFB $8B,$8C,$51,$21,$C2,$02,$82,$04
 $F030 DEFB $04,$84,$B8,$F8,$78,$F8,$B8,$38
 $F038 DEFB $78,$78,$05,$05,$05,$05,$05,$05
 $F040 DEFB $05,$05,$A0,$A0,$A0,$A0,$A0,$A0
 $F048 DEFB $A0,$A0,$7D,$7E,$7E,$7C,$3C,$3E
 $F050 DEFB $3E,$3C,$14,$1B,$1B,$14,$19,$16
 $F058 DEFB $16,$19,$84,$82,$82,$82,$81,$81
 $F060 DEFB $81,$81,$B8,$B0,$70,$70,$B0,$F0
 $F068 DEFB $30,$90,$05,$05,$05,$05,$05,$05
 $F070 DEFB $05,$05,$78,$78,$78,$78,$78,$78
 $F078 DEFB $78,$78,$78,$78,$78,$78,$78,$7A
 $F080 DEFB $20,$20,$7A,$78,$78,$7A,$20,$20
 $F088 DEFB $7A,$78,$78,$7A,$20,$20,$7A,$78
 $F090 DEFB $0F,$30,$4F,$50,$A0,$A0,$A0,$A0
 $F098 DEFB $FF,$00,$FF,$00,$00,$00,$00,$00
 $F0A0 DEFB $FF,$32,$E6,$66,$CC,$E6,$7F,$1F
 $F0A8 DEFB $FF,$4C,$67,$66,$33,$67,$FE,$F8
 $F0B0 DEFB $FF,$00,$FF,$00,$00,$00,$00,$00
 $F0B8 DEFB $F0,$0C,$F2,$0A,$05,$05,$05,$05
 $F0C0 DEFB $80,$F7,$A2,$A4,$B8,$A4,$A2,$F7
 $F0C8 DEFB $18,$18,$2C,$CF,$FF,$3C,$18,$18
 $F0D0 DEFB $18,$32,$37,$30,$30,$3B,$7E,$7F
 $F0D8 DEFB $18,$4C,$6C,$8C,$8C,$DC,$7E,$FE
 $F0E0 DEFB $00,$00,$08,$1C,$3E,$1C,$08,$00
 $F0E8 DEFB $01,$77,$23,$25,$39,$25,$23,$77
 $F0F0 DEFB $80,$80,$88,$9C,$BE,$9C,$88,$80
 $F0F8 DEFB $00,$03,$1F,$3D,$51,$85,$D1,$FF
 $F100 DEFB $7B,$D5,$AA,$1D,$06,$03,$03,$00
 $F108 DEFB $EB,$57,$AD,$79,$E1,$C1,$81,$05
 $F110 DEFB $C0,$F8,$3C,$2E,$0F,$27,$17,$FF
 $F118 DEFB $05,$05,$05,$05,$05,$05,$05,$05
 $F120 DEFB $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
 $F128 DEFB $84,$84,$84,$84,$84,$84,$82,$C3
 $F130 DEFB $0F,$1A,$1F,$1A,$1F,$1A,$1F,$9A
 $F138 DEFB $E4,$BE,$D4,$B4,$D4,$BE,$DF,$BF
 $F140 DEFB $87,$87,$87,$87,$87,$87,$87,$87
 $F148 DEFB $05,$05,$05,$05,$05,$05,$05,$05
 $F150 DEFB $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
 $F158 DEFB $C0,$E0,$F0,$F8,$F6,$F1,$F0,$F0
 $F160 DEFB $7F,$00,$00,$00,$00,$FF,$1F,$1A
 $F168 DEFB $BF,$7F,$5F,$5F,$60,$BF,$D8,$B8
 $F170 DEFB $87,$87,$87,$47,$87,$07,$87,$87
 $F178 DEFB $05,$05,$05,$05,$05,$05,$05,$05
 $F180 DEFB $78,$78,$78,$78,$78,$78,$7A,$7A
 $F188 DEFB $78,$78,$7A,$7A,$7A,$78,$20,$20
 $F190 DEFB $78,$78,$78,$60,$20,$20,$60,$78
 $F198 DEFB $78,$60,$60,$60,$60,$78,$0F,$30
 $F1A0 DEFB $4F,$50,$A0,$A0,$A0,$A0,$FF,$00
 $F1A8 DEFB $FF,$00,$00,$00,$00,$00,$FF,$1B
 $F1B0 DEFB $F6,$66,$66,$6F,$35,$1F,$FF,$D8
 $F1B8 DEFB $6F,$66,$66,$F6,$AC,$F8,$FF,$00
 $F1C0 DEFB $FF,$00,$00,$00,$00,$00,$F0,$0C
 $F1C8 DEFB $F2,$0A,$05,$05,$05,$05,$80,$F7
 $F1D0 DEFB $A2,$A4,$B8,$A4,$A2,$F7,$66,$DF
 $F1D8 DEFB $9F,$DF,$6E,$3C,$18,$00,$18,$32
 $F1E0 DEFB $37,$31,$31,$7A,$78,$7E,$18,$4C
 $F1E8 DEFB $6C,$1C,$1C,$DE,$1E,$7E,$00,$00
 $F1F0 DEFB $14,$3E,$3E,$1C,$08,$40,$01,$77
 $F1F8 DEFB $23,$25,$39,$25,$23,$77,$80,$80
 $F200 DEFB $94,$BE,$BE,$9C,$88,$81,$FF,$FF
 $F208 DEFB $FE,$F8,$E0,$80,$C0,$60,$F2,$99
 $F210 DEFB $0C,$06,$03,$A1,$40,$15,$9B,$31
 $F218 DEFB $60,$C0,$8A,$04,$80,$C0,$BF,$BF
 $F220 DEFB $BF,$BF,$A7,$A1,$A9,$B3,$05,$05
 $F228 DEFB $05,$05,$05,$05,$85,$85,$A1,$A1
 $F230 DEFB $A1,$A1,$A1,$A1,$A0,$A0,$35,$12
 $F238 DEFB $10,$10,$10,$08,$04,$03,$08,$00
 $F240 DEFB $A1,$43,$07,$07,$7F,$93,$80,$94
 $F248 DEFB $C8,$E0,$F2,$F1,$F0,$AB,$A6,$A4
 $F250 DEFB $A8,$A8,$B0,$B0,$A0,$F8,$85,$85
 $F258 DEFB $85,$85,$85,$85,$05,$05,$A0,$A0
 $F260 DEFB $A0,$A0,$A0,$A0,$A0,$A0,$00,$80
 $F268 DEFB $80,$E0,$FF,$FC,$FC,$FE,$18,$17
 $F270 DEFB $30,$C1,$94,$88,$40,$40,$56,$E3
 $F278 DEFB $01,$41,$80,$29,$12,$02,$0C,$B9
 $F280 DEFB $31,$13,$F7,$3F,$7F,$7F,$05,$05
 $F288 DEFB $05,$05,$05,$05,$05,$05,$78,$78
 $F290 DEFB $78,$78,$78,$78,$7A,$7A,$78,$78
 $F298 DEFB $7A,$7A,$7A,$5F,$5F,$5F,$5F,$78
 $F2A0 DEFB $78,$5F,$5F,$5F,$5F,$78,$78,$5F
 $F2A8 DEFB $5F,$5F,$5F,$78,$0F,$30,$4F,$50
 $F2B0 DEFB $A0,$A0,$A0,$A0,$FF,$00,$FF,$00
 $F2B8 DEFB $00,$00,$00,$18,$FF,$79,$C9,$66
 $F2C0 DEFB $32,$1A,$36,$7F,$FF,$9E,$93,$66
 $F2C8 DEFB $4C,$58,$6C,$FE,$FF,$00,$FF,$00
 $F2D0 DEFB $00,$00,$00,$00,$F0,$0C,$F2,$0A
 $F2D8 DEFB $05,$05,$05,$05,$80,$F7,$A2,$A4
 $F2E0 DEFB $B8,$A4,$A2,$F7,$3C,$6E,$DF,$BF
 $F2E8 DEFB $DB,$18,$18,$3C,$30,$64,$6D,$62
 $F2F0 DEFB $74,$FF,$F9,$FF,$78,$BC,$BC,$3C
 $F2F8 DEFB $7C,$FC,$FC,$FE,$00,$00,$08,$1C
 $F300 DEFB $3E,$08,$1C,$00,$01,$77,$23,$25
 $F308 DEFB $39,$25,$23,$77,$80,$88,$9C,$BE
 $F310 DEFB $BE,$88,$9C,$80,$00,$00,$01,$07
 $F318 DEFB $1F,$7F,$FF,$FF,$FF,$E6,$80,$F0
 $F320 DEFB $7C,$AF,$57,$AA,$8F,$07,$03,$1E
 $F328 DEFB $7C,$EA,$D4,$AA,$00,$00,$80,$E0
 $F330 DEFB $F8,$FE,$FF,$FF,$05,$05,$05,$05
 $F338 DEFB $05,$05,$05,$05,$A1,$A1,$A1,$A1
 $F340 DEFB $A1,$A1,$A1,$A1,$41,$72,$4F,$44
 $F348 DEFB $AA,$AA,$AA,$AA,$55,$AA,$01,$FE
 $F350 DEFB $00,$00,$18,$24,$54,$AA,$40,$3F
 $F358 DEFB $00,$00,$00,$40,$02,$8C,$F0,$02
 $F360 DEFB $2A,$2A,$2A,$2A,$85,$85,$85,$85
 $F368 DEFB $85,$85,$85,$85,$A1,$A1,$A1,$A1
 $F370 DEFB $A1,$A1,$A1,$A1,$AA,$AA,$54,$6C
 $F378 DEFB $54,$6C,$54,$6C,$24,$1B,$05,$06
 $F380 DEFB $0D,$38,$10,$00,$E0,$80,$00,$80
 $F388 DEFB $40,$A1,$52,$2D,$2A,$2A,$55,$AB
 $F390 DEFB $55,$A9,$51,$A1,$85,$85,$05,$05
 $F398 DEFB $05,$05,$05,$05,$78,$78,$78,$78
 $F3A0 DEFB $78,$78,$78,$78,$78,$78,$78,$78
 $F3A8 DEFB $78,$7C,$60,$60,$7C,$78,$78,$60
 $F3B0 DEFB $07,$07,$60,$78,$78,$60,$07,$07
 $F3B8 DEFB $60,$78,$0F,$30,$4F,$50,$A0,$A0
 $F3C0 DEFB $A0,$A0,$FF,$00,$FF,$00,$00,$00
 $F3C8 DEFB $00,$00,$FF,$1A,$F2,$E6,$CC,$E6
 $F3D0 DEFB $72,$1F,$FF,$58,$4F,$67,$33,$67
 $F3D8 DEFB $4E,$F8,$FF,$00,$FF,$00,$00,$00
 $F3E0 DEFB $00,$00,$F0,$0C,$F2,$0A,$05,$05
 $F3E8 DEFB $05,$05,$80,$F7,$A2,$A4,$B8,$A4
 $F3F0 DEFB $A2,$F7,$38,$28,$D6,$BE,$D6,$10
 $F3F8 DEFB $10,$38,$38,$70,$F7,$F3,$F8,$F8
 $F400 DEFB $F9,$7F,$08,$04,$76,$66,$46,$06
 $F408 DEFB $CE,$3E,$00,$1C,$2A,$3E,$2A,$08
 $F410 DEFB $1C,$00,$01,$77,$23,$25,$39,$25
 $F418 DEFB $23,$77,$80,$9C,$AA,$BE,$AA,$88
 $F420 DEFB $9C,$80,$FF,$FF,$FF,$FC,$FB,$F9
 $F428 DEFB $E0,$C1,$3B,$21,$D1,$08,$04,$03
 $F430 DEFB $80,$40,$F4,$E3,$E2,$C4,$08,$F0
 $F438 DEFB $01,$02,$FF,$FF,$3F,$EF,$C7,$83
 $F440 DEFB $21,$F0,$05,$05,$05,$05,$05,$05
 $F448 DEFB $05,$05,$A0,$A0,$A0,$A1,$A1,$A1
 $F450 DEFB $A1,$A1,$82,$04,$08,$12,$12,$04
 $F458 DEFB $14,$14,$3F,$1F,$0F,$0F,$13,$09
 $F460 DEFB $15,$08,$FC,$F9,$F3,$F1,$C8,$90
 $F468 DEFB $28,$91,$E8,$B4,$5A,$B2,$E8,$EA
 $F470 DEFB $EA,$58,$85,$C5,$C5,$C5,$C5,$C5
 $F478 DEFB $C5,$C5,$A1,$A1,$A1,$A1,$A1,$A1
 $F480 DEFB $A1,$A1,$04,$14,$14,$04,$14,$14
 $F488 DEFB $04,$14,$15,$0A,$15,$0A,$15,$0A
 $F490 DEFB $15,$0A,$D1,$A9,$D1,$A9,$D1,$A9
 $F498 DEFB $D0,$A8,$FA,$5A,$F0,$54,$F4,$58
 $F4A0 DEFB $E9,$F1,$C5,$C5,$C5,$C5,$85,$85
 $F4A8 DEFB $05,$05,$78,$78,$78,$78,$78,$78
 $F4B0 DEFB $78,$78,$78,$78,$78,$78,$78,$57
 $F4B8 DEFB $78,$78,$57,$78,$78,$57,$57,$57
 $F4C0 DEFB $57,$78,$78,$57,$56,$56,$57,$78
 $F4C8 DEFB $00

; Custom Font
@label=CustomFont
b$F4C9 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $F4D1 DEFB $00,$08,$08,$10,$10,$00,$20,$00 ; #UDG(#PC)
 $F4D9 DEFB $00,$24,$48,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $F4E1 DEFB $00,$12,$7F,$24,$24,$FE,$48,$00 ; #UDG(#PC)
 $F4E9 DEFB $00,$08,$3E,$50,$7C,$14,$F8,$20 ; #UDG(#PC)
 $F4F1 DEFB $00,$62,$64,$08,$10,$26,$46,$00 ; #UDG(#PC)
 $F4F9 DEFB $00,$08,$14,$18,$2A,$44,$7A,$00 ; #UDG(#PC)
 $F501 DEFB $00,$08,$10,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $F509 DEFB $00,$04,$08,$08,$10,$10,$08,$00 ; #UDG(#PC)
 $F511 DEFB $00,$10,$08,$08,$10,$10,$20,$00 ; #UDG(#PC)
 $F519 DEFB $00,$00,$14,$08,$7E,$10,$28,$00 ; #UDG(#PC)
 $F521 DEFB $00,$00,$08,$10,$7C,$10,$20,$00 ; #UDG(#PC)
 $F529 DEFB $00,$00,$00,$00,$00,$08,$08,$10 ; #UDG(#PC)
 $F531 DEFB $00,$00,$00,$00,$7C,$00,$00,$00 ; #UDG(#PC)
 $F539 DEFB $00,$00,$00,$00,$00,$18,$18,$00 ; #UDG(#PC)
 $F541 DEFB $00,$00,$02,$04,$18,$20,$40,$00 ; #UDG(#PC)
 $F549 DEFB $00,$1E,$26,$4A,$52,$64,$78,$00 ; #UDG(#PC)
 $F551 DEFB $00,$0C,$14,$08,$08,$10,$7C,$00 ; #UDG(#PC)
 $F559 DEFB $00,$1E,$21,$02,$3C,$40,$FE,$00 ; #UDG(#PC)
 $F561 DEFB $00,$1E,$21,$0E,$02,$84,$78,$00 ; #UDG(#PC)
 $F569 DEFB $00,$10,$10,$24,$24,$7E,$08,$08 ; #UDG(#PC)
 $F571 DEFB $00,$3F,$20,$7C,$02,$84,$78,$00 ; #UDG(#PC)
 $F579 DEFB $00,$1E,$20,$7C,$42,$84,$78,$00 ; #UDG(#PC)
 $F581 DEFB $00,$7E,$02,$0C,$30,$40,$40,$00 ; #UDG(#PC)
 $F589 DEFB $00,$1E,$21,$3E,$42,$84,$78,$00 ; #UDG(#PC)
 $F591 DEFB $00,$3C,$42,$84,$7C,$08,$F0,$00 ; #UDG(#PC)
 $F599 DEFB $00,$00,$00,$08,$00,$00,$10,$00 ; #UDG(#PC)
 $F5A1 DEFB $00,$00,$08,$00,$00,$10,$10,$20 ; #UDG(#PC)
 $F5A9 DEFB $00,$00,$08,$10,$20,$10,$08,$00 ; #UDG(#PC)
 $F5B1 DEFB $00,$00,$00,$3E,$00,$7C,$00,$00 ; #UDG(#PC)
 $F5B9 DEFB $00,$00,$20,$10,$08,$10,$20,$00 ; #UDG(#PC)
 $F5C1 DEFB $00,$3C,$44,$08,$10,$00,$20,$00 ; #UDG(#PC)
 $F5C9 DEFB $00,$1E,$29,$56,$5E,$80,$78,$00 ; #UDG(#PC)
 $F5D1 DEFB $00,$1E,$21,$42,$7E,$84,$84,$00 ; #UDG(#PC)
 $F5D9 DEFB $00,$3E,$21,$7E,$42,$84,$F8,$00 ; #UDG(#PC)
 $F5E1 DEFB $00,$1E,$22,$40,$40,$84,$78,$00 ; #UDG(#PC)
 $F5E9 DEFB $00,$3C,$22,$42,$42,$84,$F8,$00 ; #UDG(#PC)
 $F5F1 DEFB $00,$3F,$20,$7C,$40,$80,$FC,$00 ; #UDG(#PC)
 $F5F9 DEFB $00,$3F,$20,$7C,$40,$80,$80,$00 ; #UDG(#PC)
 $F601 DEFB $00,$1E,$21,$40,$4E,$82,$7C,$00 ; #UDG(#PC)
 $F609 DEFB $00,$21,$21,$7E,$42,$84,$84,$00 ; #UDG(#PC)
 $F611 DEFB $00,$3E,$08,$10,$10,$20,$F8,$00 ; #UDG(#PC)
 $F619 DEFB $00,$02,$02,$02,$44,$44,$38,$00 ; #UDG(#PC)
 $F621 DEFB $00,$22,$24,$78,$48,$88,$84,$00 ; #UDG(#PC)
 $F629 DEFB $00,$10,$10,$20,$20,$40,$7E,$00 ; #UDG(#PC)
 $F631 DEFB $00,$21,$37,$5A,$42,$84,$84,$00 ; #UDG(#PC)
 $F639 DEFB $00,$21,$31,$52,$4A,$8C,$84,$00 ; #UDG(#PC)
 $F641 DEFB $00,$1E,$21,$42,$42,$84,$78,$00 ; #UDG(#PC)
 $F649 DEFB $00,$3E,$21,$42,$7C,$80,$80,$00 ; #UDG(#PC)
 $F651 DEFB $00,$1E,$21,$42,$52,$94,$78,$00 ; #UDG(#PC)
 $F659 DEFB $00,$3E,$21,$42,$7C,$88,$84,$00 ; #UDG(#PC)
 $F661 DEFB $00,$1E,$20,$3C,$02,$84,$78,$00 ; #UDG(#PC)
 $F669 DEFB $00,$FE,$10,$20,$20,$40,$40,$00 ; #UDG(#PC)
 $F671 DEFB $00,$21,$21,$42,$42,$84,$78,$00 ; #UDG(#PC)
 $F679 DEFB $00,$42,$42,$84,$88,$50,$20,$00 ; #UDG(#PC)
 $F681 DEFB $00,$21,$21,$42,$52,$B4,$48,$00 ; #UDG(#PC)
 $F689 DEFB $00,$22,$24,$18,$30,$48,$88,$00 ; #UDG(#PC)
 $F691 DEFB $00,$42,$44,$28,$10,$20,$20,$00 ; #UDG(#PC)
 $F699 DEFB $00,$7E,$04,$08,$30,$40,$FC,$00 ; #UDG(#PC)
 $F6A1 DEFB $00,$0E,$08,$10,$10,$20,$38,$00 ; #UDG(#PC)
 $F6A9 DEFB $00,$00,$20,$20,$10,$08,$08,$00 ; #UDG(#PC)
 $F6B1 DEFB $00,$1C,$04,$08,$08,$10,$70,$00 ; #UDG(#PC)
 $F6B9 DEFB $00,$18,$3C,$54,$10,$20,$20,$00 ; #UDG(#PC)
 $F6C1 DEFB $00,$00,$00,$00,$00,$00,$00,$FF ; #UDG(#PC)
 $F6C9 DEFB $00,$0E,$11,$78,$20,$40,$FC,$00 ; #UDG(#PC)
 $F6D1 DEFB $00,$00,$1C,$02,$3E,$44,$3C,$00 ; #UDG(#PC)
 $F6D9 DEFB $00,$10,$10,$3C,$22,$44,$78,$00 ; #UDG(#PC)
 $F6E1 DEFB $00,$00,$1C,$20,$40,$40,$38,$00 ; #UDG(#PC)
 $F6E9 DEFB $00,$02,$02,$3C,$44,$88,$78,$00 ; #UDG(#PC)
 $F6F1 DEFB $00,$00,$1E,$22,$3C,$40,$3C,$00 ; #UDG(#PC)
 $F6F9 DEFB $00,$0C,$10,$38,$20,$40,$40,$00 ; #UDG(#PC)
 $F701 DEFB $00,$00,$1E,$22,$44,$3C,$08,$70 ; #UDG(#PC)
 $F709 DEFB $00,$10,$10,$3C,$22,$44,$44,$00 ; #UDG(#PC)
 $F711 DEFB $00,$04,$00,$08,$08,$10,$38,$00 ; #UDG(#PC)
 $F719 DEFB $00,$02,$00,$04,$04,$08,$48,$30 ; #UDG(#PC)
 $F721 DEFB $00,$10,$14,$18,$30,$28,$48,$00 ; #UDG(#PC)
 $F729 DEFB $00,$08,$08,$10,$10,$20,$18,$00 ; #UDG(#PC)
 $F731 DEFB $00,$00,$1E,$2A,$2A,$54,$54,$00 ; #UDG(#PC)
 $F739 DEFB $00,$00,$1E,$22,$22,$44,$44,$00 ; #UDG(#PC)
 $F741 DEFB $00,$00,$1C,$22,$42,$44,$38,$00 ; #UDG(#PC)
 $F749 DEFB $00,$00,$3C,$22,$44,$78,$80,$80 ; #UDG(#PC)
 $F751 DEFB $00,$00,$1E,$22,$44,$3C,$08,$0C ; #UDG(#PC)
 $F759 DEFB $00,$00,$1C,$20,$20,$40,$40,$00 ; #UDG(#PC)
 $F761 DEFB $00,$00,$0E,$10,$1C,$04,$78,$00 ; #UDG(#PC)
 $F769 DEFB $00,$08,$1C,$10,$20,$20,$18,$00 ; #UDG(#PC)
 $F771 DEFB $00,$00,$22,$22,$44,$44,$38,$00 ; #UDG(#PC)
 $F779 DEFB $00,$00,$22,$44,$48,$50,$20,$00 ; #UDG(#PC)
 $F781 DEFB $00,$00,$22,$2A,$54,$54,$28,$00 ; #UDG(#PC)
 $F789 DEFB $00,$00,$22,$14,$18,$28,$44,$00 ; #UDG(#PC)
 $F791 DEFB $00,$00,$22,$44,$44,$38,$08,$70 ; #UDG(#PC)
 $F799 DEFB $00,$00,$3E,$04,$18,$20,$7C,$00 ; #UDG(#PC)
 $F7A1 DEFB $00,$0E,$10,$60,$10,$20,$38,$00 ; #UDG(#PC)
 $F7A9 DEFB $00,$08,$08,$10,$10,$20,$20,$00 ; #UDG(#PC)
 $F7B1 DEFB $00,$1C,$04,$06,$08,$10,$70,$00 ; #UDG(#PC)
 $F7B9 DEFB $00,$14,$28,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $F7C1 DEFB $3C,$42,$99,$A1,$A1,$99,$42,$3C ; #UDG(#PC)
 $F7C9 DEFB $00

; Print 40 Column Text
;
; Used by the routine at #R$7D97.
;
; BC Length of string to print
; DE Pointer to string to print
@label=Print40ColumnText
c$F7CA LD HL,$F832   ; {#HTML(Write #R$F832 to *<a rel="noopener nofollow"
 $F7CD LD ($5C7B),HL ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C7B.html">UDG</a>.)
                     ; }
@label=Print40ColumnText_Loop
*$F7D0 LD A,B        ; {Jump to #R$F7E0 if #REGbc is not zero.
 $F7D1 OR C          ;
 $F7D2 JR NZ,$F7E0   ; }
 $F7D4 LD HL,$F831   ; #REGhl=#R$F831.
 $F7D7 BIT 0,(HL)    ; {Return if bit 0 of *#REGhl is not set.
 $F7D9 RET Z         ; }
 $F7DA LD A,$90      ; {Print the UDG buffer to the screen.
 $F7DC RST $10       ; }
 $F7DD RES 0,(HL)    ; Reset bit 0 of *#REGhl.
 $F7DF RET           ; Return.
; Process the current letter.
@label=Process40ColumnText
*$F7E0 LD A,(DE)     ; Fetch the current letter from the pointer in *#REGde,
                     ; and store it in #REGa.
 $F7E1 SUB $20       ; Subtract #N$20 from #REGa to "normalise" it. ASCII characters start
                     ; from #N$20 ("SPACE") so this makes them #N$00-based.
 $F7E3 JR NC,$F7EE   ; Jump to #R$F7EE if #REGa is higher than zero.
; Where #REGa is less than zero, this means a control character needs to
; be actioned (e.g. setting INK/ PAPER/ PRINT AT/ etc).
 $F7E5 ADD A,$20     ; Add #N$20 to the character to restore the "proper" ASCII
                     ; value.
 $F7E7 PUSH DE       ; Stash the string pointer on the stack.
 $F7E8 RST $10       ; Action the current ASCII character.
 $F7E9 POP DE        ; Restore the string pointer from the stack.
 $F7EA INC DE        ; Move onto the next letter in the string.
 $F7EB DEC BC        ; Decrease the string length counter by one.
 $F7EC JR $F7D0      ; Jump back to #R$F7D0.
; We have a character we want to process, the UDGs for the characters begin at
; #R$F83A.
@label=Process40ColumnCharacter
*$F7EE INC A         ; Increment #REGa by one.
 $F7EF PUSH DE       ; {Stash the string pointer and string length on the
 $F7F0 PUSH BC       ; stack.}
; Locate the UDG character for the current letter.
 $F7F1 LD HL,$F832   ; #REGhl=#R$F832.
 $F7F4 LD DE,$0008   ; {#REGhl+=#N($0008,$04,$04).
@label=LocateSmallCharacter_Loop
*$F7F7 ADD HL,DE     ; }
 $F7F8 DEC A         ; Decrease #REGa by one.
 $F7F9 JR NZ,$F7F7   ; Jump to #R$F7F7 until #REGa is zero.
 $F7FB LD DE,$F832   ; #REGde=#R$F832.
; The UDGs are still 8 bytes each, just for each only the first #N$04
; bits are used of the #N$08 total bits.
 $F7FE LD B,$08      ; Set a UDG counter of #N$08.
@label=SmallCharacterCopy_Loop
*$F800 LD A,($F831)  ; {Test bit 0 of *#R$F831...
 $F803 BIT 0,A       ; }
 $F805 LD A,(HL)     ; Fetch the UDG letter byte and store it in #REGa.
 $F806 JR Z,$F812    ; Jump to #R$F812 if bit 0 of *#R$F831 was not set.
; Shift the letter from the left-hand side of the UDG buffer over to the
; right-hand side.
 $F808 LD C,$04      ; {Shift the bits of the current letter right four bits (move the
@label=ShiftToRightHandSide_Loop
*$F80A SRL A         ; letter from being on the left-hand side over to the right-hand side).
 $F80C DEC C         ;
 $F80D JR NZ,$F80A   ; }
 $F80F LD C,A        ; {Merge the current byte in #R$F832 together with the shifted letter
 $F810 LD A,(DE)     ; in #REGc. The result is stored in #REGa.
 $F811 OR C          ; }
@label=WriteSmallCharacterToBuffer
*$F812 LD (DE),A     ; Write #REGa to the buffer.
 $F813 INC HL        ; Move onto the next byte of the UDG letter.
 $F814 INC DE        ; Move onto the next byte in the buffer.
 $F815 DJNZ $F800    ; Decrease the UDG byte counter by one and loop back to
                     ; #R$F800 until the counter is zero.
; This toggle is the "magic" - it handles the left/ right flow of the code.
 $F817 LD A,($F831)  ; {Flip bit 0 of *#R$F831.
 $F81A XOR %00000001 ;
 $F81C LD ($F831),A  ; }
 $F81F POP BC        ; {Restore the string length and string pointer from the
 $F820 POP DE        ; stack.}
 $F821 INC DE        ; Move onto the next letter in the string.
 $F822 DEC BC        ; Decrease the string length counter by one.
 $F823 LD A,($F831)  ; {Jump to #R$F7D0 if bit 0 of *#R$F831 is set.
 $F826 BIT 0,A       ;
 $F828 JR NZ,$F7D0   ; }
; Else, we can now print the UDG buffer at #R$F832 to the screen.
 $F82A PUSH DE       ; Stash the string pointer on the stack.
 $F82B LD A,$90      ; {Print the UDG buffer to the screen.
 $F82D RST $10       ; }
 $F82E POP DE        ; Restore the string pointer from the stack.
 $F82F JR $F7D0      ; Jump to #R$F7D0.

; Flag: Shift Letter
;
; Will be either #N$00 or #N$01, used to track what point the 40 column
; printing is at (if the code needs to print, or shift the lettering).
; .
; Used by the routine at #R$F7CA.
@label=FlagShiftLetter
g$F831 DEFB $00

; Buffer: Small Custom Font
;
; This is a buffer where the letter doubles are merged together for
; printing to the screen.
; .
; Used by the routine at #R$F7CA.
@label=BufferSmallFont
g$F832 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)

; Small Custom Font
;
; Used by the routine at #R$F7CA.
;
; .
;
; This is ASCII "SPACE" (#N$20), and everything below leads on from here (as
; ASCII).
@label=SmallCustomFont
b$F83A DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $F842 DEFB $00,$40,$40,$40,$40,$00,$40,$00 ; #UDG(#PC)
 $F84A DEFB $A0,$A0,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $F852 DEFB $00,$00,$A0,$E0,$A0,$E0,$A0,$00 ; #UDG(#PC)
 $F85A DEFB $40,$E0,$C0,$E0,$60,$E0,$40,$00 ; #UDG(#PC)
 $F862 DEFB $00,$00,$A0,$20,$40,$80,$A0,$00 ; #UDG(#PC)
 $F86A DEFB $00,$40,$A0,$40,$A0,$C0,$60,$00 ; #UDG(#PC)
 $F872 DEFB $00,$40,$40,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $F87A DEFB $00,$60,$80,$80,$80,$80,$60,$00 ; #UDG(#PC)
 $F882 DEFB $00,$C0,$20,$20,$20,$20,$C0,$00 ; #UDG(#PC)
 $F88A DEFB $00,$00,$A0,$40,$E0,$40,$A0,$00 ; #UDG(#PC)
 $F892 DEFB $00,$00,$00,$40,$E0,$40,$00,$00 ; #UDG(#PC)
 $F89A DEFB $00,$00,$00,$00,$00,$00,$20,$60 ; #UDG(#PC)
 $F8A2 DEFB $00,$00,$00,$00,$E0,$00,$00,$00 ; #UDG(#PC)
 $F8AA DEFB $00,$00,$00,$00,$00,$00,$40,$00 ; #UDG(#PC)
 $F8B2 DEFB $00,$20,$20,$40,$40,$80,$80,$00 ; #UDG(#PC)
 $F8BA DEFB $00,$40,$A0,$A0,$A0,$A0,$40,$00 ; #UDG(#PC)
 $F8C2 DEFB $00,$40,$C0,$40,$40,$40,$E0,$00 ; #UDG(#PC)
 $F8CA DEFB $00,$40,$A0,$20,$40,$80,$E0,$00 ; #UDG(#PC)
 $F8D2 DEFB $00,$E0,$20,$60,$20,$A0,$E0,$00 ; #UDG(#PC)
 $F8DA DEFB $00,$80,$80,$C0,$E0,$40,$40,$00 ; #UDG(#PC)
 $F8E2 DEFB $00,$E0,$80,$C0,$20,$A0,$C0,$00 ; #UDG(#PC)
 $F8EA DEFB $00,$60,$80,$C0,$A0,$A0,$40,$00 ; #UDG(#PC)
 $F8F2 DEFB $00,$E0,$20,$20,$40,$80,$80,$00 ; #UDG(#PC)
 $F8FA DEFB $00,$40,$A0,$40,$A0,$A0,$40,$00 ; #UDG(#PC)
 $F902 DEFB $00,$40,$A0,$60,$20,$A0,$40,$00 ; #UDG(#PC)
 $F90A DEFB $00,$00,$00,$40,$00,$40,$00,$00 ; #UDG(#PC)
 $F912 DEFB $00,$00,$00,$00,$20,$00,$20,$60 ; #UDG(#PC)
 $F91A DEFB $00,$00,$20,$40,$80,$40,$20,$00 ; #UDG(#PC)
 $F922 DEFB $00,$00,$00,$E0,$00,$E0,$00,$00 ; #UDG(#PC)
 $F92A DEFB $00,$00,$80,$40,$20,$40,$80,$00 ; #UDG(#PC)
 $F932 DEFB $00,$40,$A0,$20,$40,$00,$40,$00 ; #UDG(#PC)
 $F93A DEFB $00,$00,$60,$A0,$E0,$C0,$60,$00 ; #UDG(#PC)
 $F942 DEFB $00,$E0,$A0,$A0,$E0,$A0,$A0,$00 ; #UDG(#PC)
 $F94A DEFB $00,$E0,$A0,$C0,$A0,$A0,$E0,$00 ; #UDG(#PC)
 $F952 DEFB $00,$E0,$80,$80,$80,$80,$E0,$00 ; #UDG(#PC)
 $F95A DEFB $00,$C0,$A0,$A0,$A0,$A0,$C0,$00 ; #UDG(#PC)
 $F962 DEFB $00,$E0,$80,$C0,$80,$80,$E0,$00 ; #UDG(#PC)
 $F96A DEFB $00,$E0,$80,$C0,$80,$80,$80,$00 ; #UDG(#PC)
 $F972 DEFB $00,$E0,$80,$E0,$A0,$A0,$E0,$00 ; #UDG(#PC)
 $F97A DEFB $00,$A0,$A0,$E0,$A0,$A0,$A0,$00 ; #UDG(#PC)
 $F982 DEFB $00,$E0,$40,$40,$40,$40,$E0,$00 ; #UDG(#PC)
 $F98A DEFB $00,$E0,$20,$20,$20,$20,$C0,$00 ; #UDG(#PC)
 $F992 DEFB $00,$A0,$A0,$C0,$A0,$A0,$A0,$00 ; #UDG(#PC)
 $F99A DEFB $00,$80,$80,$80,$80,$80,$E0,$00 ; #UDG(#PC)
 $F9A2 DEFB $00,$A0,$E0,$E0,$A0,$A0,$A0,$00 ; #UDG(#PC)
 $F9AA DEFB $00,$A0,$E0,$E0,$E0,$E0,$A0,$00 ; #UDG(#PC)
 $F9B2 DEFB $00,$E0,$A0,$A0,$A0,$A0,$E0,$00 ; #UDG(#PC)
 $F9BA DEFB $00,$E0,$A0,$E0,$80,$80,$80,$00 ; #UDG(#PC)
 $F9C2 DEFB $00,$E0,$A0,$A0,$A0,$E0,$E0,$20 ; #UDG(#PC)
 $F9CA DEFB $00,$E0,$A0,$C0,$A0,$A0,$A0,$00 ; #UDG(#PC)
 $F9D2 DEFB $00,$E0,$80,$E0,$20,$20,$E0,$00 ; #UDG(#PC)
 $F9DA DEFB $00,$E0,$40,$40,$40,$40,$40,$00 ; #UDG(#PC)
 $F9E2 DEFB $00,$A0,$A0,$A0,$A0,$A0,$E0,$00 ; #UDG(#PC)
 $F9EA DEFB $00,$A0,$A0,$A0,$A0,$A0,$40,$00 ; #UDG(#PC)
 $F9F2 DEFB $00,$A0,$A0,$A0,$E0,$E0,$A0,$00 ; #UDG(#PC)
 $F9FA DEFB $00,$A0,$E0,$40,$E0,$A0,$A0,$00 ; #UDG(#PC)
 $FA02 DEFB $00,$A0,$A0,$E0,$40,$40,$40,$00 ; #UDG(#PC)
 $FA0A DEFB $00,$E0,$20,$40,$80,$80,$E0,$00 ; #UDG(#PC)
 $FA12 DEFB $00,$E0,$80,$80,$80,$80,$E0,$00 ; #UDG(#PC)
 $FA1A DEFB $00,$80,$80,$40,$40,$20,$20,$00 ; #UDG(#PC)
 $FA22 DEFB $00,$E0,$20,$20,$20,$20,$E0,$00 ; #UDG(#PC)
 $FA2A DEFB $00,$40,$E0,$40,$40,$40,$40,$00 ; #UDG(#PC)
 $FA32 DEFB $00,$00,$00,$00,$00,$00,$00,$E0 ; #UDG(#PC)
 $FA3A DEFB $00,$40,$A0,$80,$E0,$40,$E0,$00 ; #UDG(#PC)
 $FA42 DEFB $00,$00,$00,$60,$A0,$A0,$60,$00 ; #UDG(#PC)
 $FA4A DEFB $00,$80,$80,$E0,$A0,$A0,$E0,$00 ; #UDG(#PC)
 $FA52 DEFB $00,$00,$00,$E0,$80,$80,$E0,$00 ; #UDG(#PC)
 $FA5A DEFB $00,$20,$20,$E0,$A0,$A0,$E0,$00 ; #UDG(#PC)
 $FA62 DEFB $00,$00,$00,$E0,$A0,$C0,$E0,$00 ; #UDG(#PC)
 $FA6A DEFB $00,$60,$80,$C0,$80,$80,$80,$00 ; #UDG(#PC)
 $FA72 DEFB $00,$00,$00,$E0,$A0,$E0,$20,$C0 ; #UDG(#PC)
 $FA7A DEFB $00,$80,$80,$E0,$A0,$A0,$A0,$00 ; #UDG(#PC)
 $FA82 DEFB $00,$40,$00,$40,$40,$40,$40,$00 ; #UDG(#PC)
 $FA8A DEFB $00,$20,$00,$E0,$20,$20,$A0,$40 ; #UDG(#PC)
 $FA92 DEFB $00,$80,$A0,$C0,$A0,$A0,$A0,$00 ; #UDG(#PC)
 $FA9A DEFB $00,$40,$40,$40,$40,$40,$20,$00 ; #UDG(#PC)
 $FAA2 DEFB $00,$00,$00,$A0,$E0,$E0,$A0,$00 ; #UDG(#PC)
 $FAAA DEFB $00,$00,$00,$E0,$A0,$A0,$A0,$00 ; #UDG(#PC)
 $FAB2 DEFB $00,$00,$00,$E0,$A0,$A0,$E0,$00 ; #UDG(#PC)
 $FABA DEFB $00,$00,$00,$E0,$A0,$E0,$80,$80 ; #UDG(#PC)
 $FAC2 DEFB $00,$00,$00,$E0,$A0,$E0,$20,$20 ; #UDG(#PC)
 $FACA DEFB $00,$00,$00,$A0,$C0,$80,$80,$00 ; #UDG(#PC)
 $FAD2 DEFB $00,$00,$00,$E0,$C0,$20,$E0,$00 ; #UDG(#PC)
 $FADA DEFB $00,$40,$40,$E0,$40,$40,$20,$00 ; #UDG(#PC)
 $FAE2 DEFB $00,$00,$00,$A0,$A0,$A0,$E0,$00 ; #UDG(#PC)
 $FAEA DEFB $00,$00,$00,$A0,$A0,$A0,$40,$00 ; #UDG(#PC)
 $FAF2 DEFB $00,$00,$00,$A0,$A0,$E0,$A0,$00 ; #UDG(#PC)
 $FAFA DEFB $00,$00,$00,$A0,$40,$A0,$A0,$00 ; #UDG(#PC)
 $FB02 DEFB $00,$00,$00,$A0,$E0,$40,$C0,$00 ; #UDG(#PC)
 $FB0A DEFB $00,$00,$00,$E0,$20,$40,$E0,$00 ; #UDG(#PC)
 $FB12 DEFB $60,$40,$40,$80,$40,$40,$60,$00 ; #UDG(#PC)
 $FB1A DEFB $40,$40,$40,$00,$40,$40,$40,$00 ; #UDG(#PC)
 $FB22 DEFB $C0,$40,$40,$20,$40,$40,$C0,$00 ; #UDG(#PC)
 $FB2A DEFB $00,$00,$50,$A0,$00,$00,$00,$00 ; #UDG(#PC)
 $FB32 DEFB $00,$00,$60,$90,$B0,$90,$60,$00 ; #UDG(#PC)

; Routine at FB3A
;
; Used by the routine at #R$6E9D.
c$FB3A LD HL,$FD09   ; {Write #R$FD09 to *#R$FB55.
 $FB3D LD ($FB55),HL ; }
 $FB40 LD HL,$FE30   ; {Write #R$FE30 to *#R$FB59.
 $FB43 LD ($FB59),HL ; }
; This entry point is used by the routine at #R$6E9D.
*$FB46 DI            ; Disable interrupts.
*$FB47 CALL $FB81    ; Call #R$FB81.
 $FB4A CALL $028E    ; #HTML(Call <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/028E.html">KEY_SCAN</a>.)
 $FB4D INC E         ; Increment #REGe by one.
 $FB4E JR Z,$FB47    ; Jump back to #R$FB47 until #REGe is zero.
 $FB50 EI            ; Enable interrupts.
 $FB51 RET           ; Return.

; Data block at FB52
b$FB52 DEFB $15
 $FB53 DEFB $FD
 $FB54 DEFB $04

; Data block at FB55
w$FB55 DEFW $FD61

; Data block at FB57
w$FB57 DEFW $FD0A
 $FB59 DEFW $FE88
 $FB5B DEFB $31,$FE
 $FB5D DEFB $E6

; Routine at FB5E
;
; Used by the routine at #R$FB81.
c$FB5E LD E,(HL)     ; {Load the next address into #REGde.
 $FB5F INC HL        ;
 $FB60 LD D,(HL)     ; }
 $FB61 INC DE        ; Increment #REGde by one.
; This entry point is used by the routine at #R$FB79.
*$FB62 LD A,(DE)     ;
 $FB63 CP $40        ; {Jump to #R$FB79 if #REGa is equal to #N$40.
 $FB65 JR Z,$FB79    ; }
 $FB67 LD (HL),D     ;
 $FB68 DEC HL        ;
 $FB69 LD (HL),E     ;
 $FB6A RET           ; Return.

; Routine at FB6B
;
; Used by the routine at #R$FB81.
c$FB6B LD A,(HL)     ; #REGa=*#REGhl.
 $FB6C ADD A,$0C     ; #REGa+=#N$0C.
 $FB6E LD E,A        ; #REGe=#REGa.
 $FB6F LD D,$00      ; #REGd=#N$00.
 $FB71 LD HL,$FC0E   ; #REGhl=#R$FC0E.
 $FB74 ADD HL,DE     ; #REGhl+=#REGde.
 $FB75 LD H,(HL)     ; #REGh=*#REGhl.
 $FB76 LD L,$01      ; #REGl=#N$01.
 $FB78 RET           ; Return.

; Routine at FB79
;
; Used by the routine at #R$FB5E.
c$FB79 INC HL        ; Increment #REGhl by one.
 $FB7A LD E,(HL)     ; #REGe=*#REGhl.
 $FB7B INC HL        ; Increment #REGhl by one.
 $FB7C LD D,(HL)     ; #REGd=*#REGhl.
 $FB7D DEC HL        ; {Decrease #REGhl by two.
 $FB7E DEC HL        ; }
 $FB7F JR $FB62      ; Jump to #R$FB62.

; Routine at FB81
;
; Used by the routine at #R$FB3A.
c$FB81 LD HL,$FB55   ; #REGhl=#R$FB55.
 $FB84 CALL $FB5E    ; Call #R$FB5E.
 $FB87 LD ($FB52),A  ; Write #REGa to *#R$FB52.
 $FB8A LD HL,$FB59   ; #REGhl=#R$FB59.
 $FB8D CALL $FB5E    ; Call #R$FB5E.
 $FB90 LD ($FB53),A  ; Write #REGa to *#R$FB53.
 $FB93 LD HL,$FB52   ; #REGhl=#R$FB52.
 $FB96 CALL $FB6B    ; Call #R$FB6B.
 $FB99 RL E          ; Rotate #REGe left.
 $FB9B JP C,$FC44    ; Jump to #R$FC44 if {} is lower.
 $FB9E PUSH HL       ; Stash #REGhl on the stack.
 $FB9F LD HL,$FB53   ; #REGhl=#R$FB53.
 $FBA2 CALL $FB6B    ; Call #R$FB6B.
 $FBA5 POP DE        ; Restore #REGde from the stack.
 $FBA6 LD A,H        ; #REGa=#REGh.
 $FBA7 DEC A         ; Decrease #REGa by one.
 $FBA8 JR NZ,$FBAE   ; Jump to #R$FBAE if #REGa is not zero.
 $FBAA LD A,D        ; #REGa=#REGd.
 $FBAB DEC A         ; Decrease #REGa by one.
 $FBAC JR Z,$FBF0    ; Jump to #R$FBF0 if #REGa is zero.
*$FBAE LD A,($FB5D)  ; #REGa=*#R$FB5D.
 $FBB1 LD C,A        ; #REGc=#REGa.
 $FBB2 LD B,$00      ; #REGb=#N$00.
 $FBB4 LD A,($FB54)  ; #REGa=*#R$FB54.
 $FBB7 EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $FBB8 LD A,($FB54)  ; #REGa=*#R$FB54.
 $FBBB LD IXh,D      ;
 $FBBD LD D,$10      ;
*$FBBF NOP           ;
 $FBC0 NOP           ;
*$FBC1 EX AF,AF'     ;
 $FBC2 DEC E         ;
 $FBC3 OUT ($FE),A   ;
 $FBC5 JR NZ,$FBDE   ;
 $FBC7 LD E,IXh      ;
 $FBC9 XOR D         ;
 $FBCA EX AF,AF'     ;
 $FBCB DEC L         ;
 $FBCC JP NZ,$FBE5   ;
*$FBCF OUT ($FE),A   ;
 $FBD1 LD L,H        ;
 $FBD2 XOR D         ;
 $FBD3 DJNZ $FBBF    ;
 $FBD5 INC C         ;
 $FBD6 JP NZ,$FBC1   ;
 $FBD9 RET           ;
 $FBDA LD H,C        ;
 $FBDB LD H,H        ;
 $FBDC LD H,C        ;
 $FBDD LD L,L        ;
*$FBDE JR Z,$FBDE    ;
 $FBE0 EX AF,AF'     ;
 $FBE1 DEC L         ;
 $FBE2 JP Z,$FBCF    ;
*$FBE5 OUT ($FE),A   ;
 $FBE7 NOP           ;
 $FBE8 NOP           ;
 $FBE9 DJNZ $FBBF    ;
 $FBEB INC C         ;
 $FBEC JP NZ,$FBC1   ;
 $FBEF RET           ;
*$FBF0 LD A,($FB5D)  ; #REGa=*#R$FB5D.
 $FBF3 CPL           ; Invert the bits in #REGa.
 $FBF4 LD C,A        ; #REGc=#REGa.
; This entry point is used by the routine at #R$FC44.
*$FBF5 PUSH BC       ; {Stash #REGbc and #REGaf on the stack.
 $FBF6 PUSH AF       ; }
 $FBF7 LD B,$00      ; #REGb=#N$00.
*$FBF9 PUSH HL       ; Stash #REGhl on the stack.
 $FBFA LD HL,$0000   ; #REGhl=#N($0000,$04,$04).
 $FBFD SRA (HL)      ; {Shift *#REGhl right three positions (with carry).
 $FBFF SRA (HL)      ;
 $FC01 SRA (HL)      ; }
 $FC03 NOP           ; No operation.
 $FC04 POP HL        ; Restore #REGhl from the stack.
 $FC05 DJNZ $FBF9    ; Decrease counter by one and loop back to #R$FBF9 until
                     ; counter is zero.
 $FC07 DEC C         ; Decrease #REGc by one.
 $FC08 JP NZ,$FBF9   ; Jump to #R$FBF9 until #REGc is zero.
 $FC0B POP AF        ; {Restore #REGaf and #REGbc from the stack.
 $FC0C POP BC        ; }
 $FC0D RET           ; Return.

; Data block at FC0E
b$FC0E DEFB $FF,$F0,$E3,$D7,$CB,$C0,$B4,$AB
 $FC16 DEFB $A1,$97,$90,$88,$80,$79,$72,$6C
 $FC1E DEFB $66,$60,$5B,$56,$51,$4C,$48,$44
 $FC26 DEFB $40,$3D,$39,$36,$33,$30,$2D,$2B
 $FC2E DEFB $28,$26,$24,$22,$20,$1E,$1C,$1B
 $FC36 DEFB $19,$18,$17,$15,$14,$13,$12,$11
 $FC3E DEFB $10,$0F,$0E,$0D,$0C,$01

; Routine at FC44
;
; Used by the routine at #R$FB81.
c$FC44 PUSH AF       ;
 $FC45 LD A,($FB53)  ;
 $FC48 LD D,A        ;
 $FC49 POP AF        ;
 $FC4A CALL $FC67    ;
 $FC4D CP $FF        ;
 $FC4F JR Z,$FC7C    ;
 $FC51 CP $C0        ;
 $FC53 JP Z,$FCB9    ;
 $FC56 LD B,$04      ;
 $FC58 LD C,E        ;
 $FC59 RLA           ;
 $FC5A RLA           ;
 $FC5B RLA           ;
 $FC5C RLA           ;
*$FC5D RLA           ;
 $FC5E CALL C,$FC7C  ;
 $FC61 CALL NC,$FBF5 ;
 $FC64 DJNZ $FC5D    ;
 $FC66 RET           ;
*$FC67 PUSH AF       ;
 $FC68 LD A,($FB5D)  ;
 $FC6B CPL           ;
 $FC6C LD B,A        ;
 $FC6D LD C,A        ;
 $FC6E ADD A,$01     ;
 $FC70 SRA A         ;
 $FC72 SRA A         ;
 $FC74 LD E,A        ;
 $FC75 CP $00        ;
 $FC77 JR NZ,$FC7A   ;
 $FC79 INC E         ;
*$FC7A POP AF        ;
 $FC7B RET           ;
*$FC7C PUSH AF       ;
 $FC7D PUSH HL       ;
 $FC7E PUSH BC       ;
 $FC7F LD A,($FB54)  ;
 $FC82 LD B,$00      ;
 $FC84 LD HL,$03E8   ;
*$FC87 RRC D         ;
 $FC89 JP NC,$FCAB   ;
 $FC8C INC HL        ;
 $FC8D BIT 0,(HL)    ;
 $FC8F JP Z,$FCA7    ;
 $FC92 SET 4,A       ;
 $FC94 XOR $83       ;
 $FC96 XOR $83       ;
*$FC98 OUT ($FE),A   ;
*$FC9A NOP           ;
 $FC9B DEC B         ;
 $FC9C JP NZ,$FC87   ;
 $FC9F DEC C         ;
 $FCA0 JP NZ,$FC87   ;
 $FCA3 POP BC        ;
 $FCA4 POP HL        ;
 $FCA5 POP AF        ;
 $FCA6 RET           ;
*$FCA7 RES 4,A       ;
 $FCA9 JR $FC98      ;
*$FCAB SCF           ;
 $FCAC JP NC,$0000   ;
 $FCAF JP NC,$0000   ;
 $FCB2 JP NC,$0000   ;
 $FCB5 NOP           ;
 $FCB6 NOP           ;
 $FCB7 JR $FC9A      ;
*$FCB9 LD E,B        ;
 $FCBA LD D,$00      ;
 $FCBC LD HL,$FCF1   ;
 $FCBF ADC HL,DE     ;
 $FCC1 LD A,(HL)     ;
 $FCC2 LD B,A        ;
 $FCC3 LD HL,$0003   ;
*$FCC6 PUSH BC       ;
 $FCC7 LD DE,$0001   ;
 $FCCA PUSH HL       ;
 $FCCB CALL $FCD8    ;
 $FCCE POP HL        ;
 $FCCF LD DE,$00FF   ;
 $FCD2 ADC HL,DE     ;
 $FCD4 POP BC        ;
 $FCD5 DJNZ $FCC6    ;
 $FCD7 RET           ;
*$FCD8 LD A,L        ;
 $FCD9 SRL L         ;
 $FCDB SRL L         ;
 $FCDD CPL           ;
 $FCDE AND $03       ;
 $FCE0 LD C,A        ;
 $FCE1 LD B,$00      ;
 $FCE3 LD IX,$03D1   ;
 $FCE7 ADD IX,BC     ;
 $FCE9 LD A,($FB54)  ;
 $FCEC CALL $03D4    ;
 $FCEF DI            ;
 $FCF0 RET           ;

; Data block at FCF1
b$FCF1 DEFB $0C,$0C,$0D,$0D,$0E,$0E,$0E,$0F
 $FCF9 DEFB $0F,$0F,$10,$10,$11,$11,$12,$12
 $FD01 DEFB $13,$13,$14,$14,$15,$15,$15,$16

; Data block at FD09
b$FD09 DEFB $16,$24,$23,$24,$1F,$1F,$1C,$18
 $FD11 DEFB $18,$21,$20,$21,$1C,$1C,$18,$15
 $FD19 DEFB $15,$12,$15,$18,$1C,$15,$18,$1C
 $FD21 DEFB $21,$1F,$1F,$29,$29,$1F,$1F,$0E
 $FD29 DEFB $0F,$10,$18,$18,$10,$18,$18,$10
 $FD31 DEFB $18,$18,$18,$18,$18,$18,$18,$1A
 $FD39 DEFB $1B,$1C,$18,$1A,$1C,$1C,$17,$1A
 $FD41 DEFB $1A,$18,$18,$18,$18,$29,$29,$0E
 $FD49 DEFB $0F,$10,$18,$18,$10,$18,$18,$10
 $FD51 DEFB $18,$18,$18,$18,$18,$29,$29,$15
 $FD59 DEFB $13,$12,$15,$18,$1C,$1C,$1A,$18
 $FD61 DEFB $15,$1A,$1A,$1A,$1A,$29,$29,$0E
 $FD69 DEFB $0F,$10,$18,$18,$10,$18,$18,$10
 $FD71 DEFB $18,$18,$18,$18,$18,$18,$18,$1A
 $FD79 DEFB $1B,$1C,$18,$1A,$1C,$1C,$17,$1A
 $FD81 DEFB $1A,$18,$18,$18,$18,$29,$29,$18
 $FD89 DEFB $1A,$1C,$18,$1A,$1C,$1C,$18,$1A
 $FD91 DEFB $18,$1C,$18,$1A,$1C,$1C,$18,$1A
 $FD99 DEFB $18,$1C,$18,$1A,$1C,$1C,$17,$1A
 $FDA1 DEFB $1A,$18,$18,$18,$18,$29,$29,$0E
 $FDA9 DEFB $0F,$10,$18,$18,$10,$18,$10,$11
 $FDB1 DEFB $12,$13,$13,$15,$13,$13,$10,$11
 $FDB9 DEFB $12,$13,$13,$15,$13,$13,$1C,$18
 $FDC1 DEFB $13,$15,$17,$18,$1A,$1C,$1A,$18
 $FDC9 DEFB $17,$13,$13,$13,$13,$29,$29,$10
 $FDD1 DEFB $11,$13,$13,$15,$13,$13,$10,$11
 $FDD9 DEFB $12,$13,$13,$15,$13,$13,$13,$15
 $FDE1 DEFB $16,$17,$17,$17,$17,$17,$15,$12
 $FDE9 DEFB $0E,$13,$13,$13,$13,$13,$10,$11
 $FDF1 DEFB $12,$13,$13,$15,$13,$13,$10,$11
 $FDF9 DEFB $12,$13,$13,$15,$13,$13,$1C,$18
 $FE01 DEFB $13,$15,$17,$18,$1A,$1C,$1A,$18
 $FE09 DEFB $17,$18,$10,$13,$18,$18,$13,$12
 $FE11 DEFB $13,$18,$18,$15,$18,$18,$15,$18
 $FE19 DEFB $15,$13,$18,$1C,$1F,$1F,$1C,$18
 $FE21 DEFB $13,$15,$15,$18,$18,$1C,$1A,$1A
 $FE29 DEFB $18,$18,$18,$18,$18,$29,$40

; Data block at FE30
b$FE30 DEFB $00,$07,$07,$29,$29,$29,$29,$29
 $FE38 DEFB $29,$04,$04,$29,$29,$29,$29,$29
 $FE40 DEFB $29,$02,$02,$02,$02,$06,$06,$06
 $FE48 DEFB $06,$07,$07,$29,$29,$05,$05,$29
 $FE50 DEFB $29,$00,$00,$07,$07,$FB,$FB,$07
 $FE58 DEFB $07,$05,$05,$0C,$0C,$04,$04,$0C
 $FE60 DEFB $0C,$FB,$FB,$07,$07,$FB,$FB,$FB
 $FE68 DEFB $FB,$00,$00,$FF,$FF,$FD,$FD,$FB
 $FE70 DEFB $FB,$00,$00,$07,$07,$FB,$FB,$07
 $FE78 DEFB $07,$05,$05,$0C,$0C,$04,$04,$04
 $FE80 DEFB $04,$02,$02,$FD,$FD,$F6,$F6,$FD
 $FE88 DEFB $FD,$FB,$FB,$FB,$FB,$FD,$FD,$FF
 $FE90 DEFB $FF,$00,$00,$07,$07,$FB,$FB,$07
 $FE98 DEFB $07,$05,$05,$0C,$0C,$04,$04,$0C
 $FEA0 DEFB $0C,$FB,$FB,$07,$07,$FB,$FB,$FB
 $FEA8 DEFB $FB,$00,$00,$FB,$FB,$07,$07,$29
 $FEB0 DEFB $29,$0C,$0C,$0C,$0C,$0B,$0B,$0B
 $FEB8 DEFB $0B,$09,$09,$09,$09,$08,$08,$08
 $FEC0 DEFB $08,$07,$07,$07,$07,$FB,$FB,$FB
 $FEC8 DEFB $FB,$00,$00,$FB,$FB,$F4,$F4,$29
 $FED0 DEFB $29,$00,$00,$FB,$FB,$F4,$F4,$29
 $FED8 DEFB $29,$00,$00,$29,$29,$FF,$FF,$29
 $FEE0 DEFB $29,$FD,$FD,$29,$29,$FB,$FB,$29
 $FEE8 DEFB $29,$F9,$F9,$29,$29,$F9,$F9,$29
 $FEF0 DEFB $29,$00,$00,$29,$29,$FB,$FB,$29
 $FEF8 DEFB $29,$F4,$F4,$29,$29,$F8,$F8,$F8
 $FF00 DEFB $F8,$F6,$F6,$02,$02,$F6,$F6,$02
 $FF08 DEFB $02,$07,$07,$05,$05,$04,$04,$02
 $FF10 DEFB $02,$00,$00,$29,$29,$FF,$FF,$29
 $FF18 DEFB $29,$FD,$FD,$29,$29,$FB,$FB,$29
 $FF20 DEFB $29,$F9,$F9,$29,$29,$F9,$F9,$29
 $FF28 DEFB $29,$F8,$F8,$FB,$F4,$F4,$F4,$F4
 $FF30 DEFB $F4,$F9,$F9,$29,$FA,$F9,$F9,$F9
 $FF38 DEFB $F9,$FB,$FB,$29,$FB,$FB,$FB,$FB
 $FF40 DEFB $FB,$F6,$F6,$02,$02,$FB,$FB,$FB
 $FF48 DEFB $FB,$00,$00,$FB,$FB,$F4,$F4,$29
 $FF50 DEFB $29,$29,$29,$29,$29,$29,$40,$3E
 $FF58 DEFB $36,$00,$3C,$06,$3E,$66,$3E,$00
 $FF60 DEFB $66,$3C,$7E,$66,$7E,$66,$66,$00
 $FF68 DEFB $30,$18,$0C,$3C,$66,$66,$3C,$00
 $FF70 DEFB $18,$3C,$24,$66,$42,$7E,$7E,$00
 $FF78 DEFB $00,$02,$3A,$4C,$4C,$6A,$32,$00
 $FF80 DEFB $4C,$4A,$52,$52,$3C,$10,$10,$00
 $FF88 DEFB $22,$56,$54,$08,$36,$32,$1C,$00
 $FF90 DEFB $FF,$FF,$C0,$C0,$C0,$C0,$C0,$C0
 $FF98 DEFB $C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0
 $FFA0 DEFB $03,$03,$03,$03,$03,$03,$03,$03
 $FFA8 DEFB $FF,$FF,$03,$03,$03,$03,$03,$03
 $FFB0 DEFB $40,$20,$30,$10,$18,$24,$26,$00
 $FFB8 DEFB $00,$26,$26,$22,$36,$3C,$20,$20
 $FFC0 DEFB $00,$58,$48,$44,$4C,$78,$10,$00
 $FFC8 DEFB $66,$00,$3C,$66,$66,$66,$3C,$00
 $FFD0 DEFB $66,$3C,$66,$66,$66,$66,$3C,$00
 $FFD8 DEFB $08,$04,$FE,$01,$FE,$04,$08,$00
 $FFE0 DEFB $3C,$66,$66,$3C,$08,$06,$1C,$70
 $FFE8 DEFB $38,$64,$64,$7E,$62,$66,$7C,$60
 $FFF0 DEFB $66,$00,$66,$66,$66,$66,$3C,$00
 $FFF8 DEFB $66,$00,$66,$66,$66,$66,$3E,$00
